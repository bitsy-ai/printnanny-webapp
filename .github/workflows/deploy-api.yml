name: Deploy API
on:
  workflow_dispatch:

jobs:
  mypy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # the following environment variables are for unit/e2e test mode only
    env:
      DATABASE_URL: "postgres://debug:debug@postgres:5432/print_nanny"
      COTURN_SECRET_KEY: testsecret1234
      COTURN_REALM: turn.test.com
      REDIS_URL: "redis://redis:6379/0"
      MAILGUN_DOMAIN: ""
      MAILGUN_API_KEY: ""
      MAILGUN_WEBHOOK_SIGNING_KEY: ""
      DISCORD_TOKEN: ""
      LOGLEVEL: debug

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: Mypy
        shell: bash
        run: |
          pip3 install -r requirements/local.txt
          pip3 install -r requirements/test.txt
          mypy
  lint:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: Run black linter
        shell: bash
        run: |
          pip3 install -r requirements/test.txt
          make lint
  shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: "./k8s"
  deploy:
    environment: live
    env:
      ANYMAIL_WEBHOOK_SECRET: ${{ secrets.ANYMAIL_WEBHOOK_SECRET }}
      CLOUD_SQL_POSTGRES_INSTANCE: ${{ secrets.CLOUD_SQL_POSTGRES_INSTANCE }}
      CLUSTER: www-spot
      COTURN_DATABASE_URL: ${{ secrets.COTURN_DATABASE_URL }}
      COTURN_REALM: ${{ secrets.COTURN_REALM }}
      COTURN_SECRET_KEY: ${{ secrets.COTURN_SECRET_KEY }}
      DISCORD_INVITE_URL: https://discord.gg/sf23bk2hPr
      DISCORD_NEW_SIGNUP_WEBHOOK: ${{ secrets.DISCORD_NEW_SIGNUP_WEBHOOK }}
      DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
      DJANGO_ADMIN_URL: ${{ secrets.DJANGO_ADMIN_URL }}
      DJANGO_ALLOWED_HOSTS: .live.printnanny.ai,.printnanny.ai,.print-nanny.com,34.111.124.145
      DJANGO_BASE_URL: ${{ secrets.DJANGO_BASE_URL }}
      DJANGO_DATABASE_URL: ${{ secrets.DJANGO_DATABASE_URL }}
      DJANGO_GCP_STORAGE_BUCKET_NAME: ${{ secrets.DJANGO_GCP_STORAGE_BUCKET_NAME }}
      DJANGO_POSTGRES_DB: ${{ secrets.DJANGO_POSTGRES_DB }}
      DJANGO_POSTGRES_HOST: ${{ secrets.DJANGO_POSTGRES_HOST }}
      DJANGO_POSTGRES_PASSWORD: ${{ secrets.DJANGO_POSTGRES_PASSWORD }}
      DJANGO_POSTGRES_PORT: ${{ secrets.DJANGO_POSTGRES_PORT }}
      DJANGO_POSTGRES_URL: ${{ secrets.DJANGO_POSTGRES_URL }}
      DJANGO_POSTGRES_USER: ${{ secrets.DJANGO_POSTGRES_USER }}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      DJANGO_SETTINGS_MODULE: ${{ secrets.DJANGO_SETTINGS_MODULE }}
      DJANGO_SUPERUSER_EMAIL: ${{ secrets.DJANGO_SUPERUSER_EMAIL }}
      DJANGO_SUPERUSER_PASSWORD: ${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
      DJSTRIPE_WEBHOOK_SECRET: ${{ secrets.DJSTRIPE_WEBHOOK_SECRET }}
      GCE_PROXY_IMAGE: gcr.io/cloudsql-docker/gce-proxy:1.29.0
      GCP_CLOUDIOT_DEVICE_REGISTRY: ${{ secrets.GCP_CLOUDIOT_DEVICE_REGISTRY }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT }}
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
      GCP_REGION: ${{ secrets.GCP_REGION }}
      GCP_ZONE: us-central1-c
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.PROD_GCP_SERVICE_ACCOUNT_KEY  }}
      GCP_SERVICE_ACCOUNT: ${{ secrets.PROD_GCP_SERVICE_ACCOUNT }}
      USE_GKE_GCLOUD_AUTH_PLUGIN: true
      GCSFUSE_BUCKET: printnanny-downloads
      GHOST_NEWSLETTER_IDS: ${{ secrets.GHOST_NEWSLETTER_IDS }}
      GHOST_ADMIN_API_APP_ID: ${{ secrets.GHOST_ADMIN_API_APP_ID }}
      GHOST_ADMIN_API_APP_SECRET: ${{ secrets.GHOST_ADMIN_API_APP_SECRET }}
      HONEYCOMB_API_KEY: ${{ secrets.HONEYCOMB_API_KEY }}
      HONEYCOMB_DATASET: ${{ secrets.HONEYCOMB_DATASET }}
      JANUS_CLOUD_ADMIN_PORT: 7088
      JANUS_CLOUD_ADMIN_SECRET: ${{ secrets.JANUS_CLOUD_ADMIN_SECRET }}
      JANUS_CLOUD_ADMIN_URL: https://janus.live.printnanny.ai/admin
      JANUS_CLOUD_API_PORT: 8088
      JANUS_CLOUD_API_URL: https://janus.live.printnanny.ai/janus
      JANUS_CLOUD_DOMAIN: janus.live.printnanny.ai
      JANUS_CLOUD_IMAGE: us.gcr.io/print-nanny/janus:1.0.4
      JANUS_CLOUD_RTP_DOMAIN: rtp.live.printnanny.ai
      JANUS_CLOUD_RTP_IP: 35.208.45.18
      JANUS_CLOUD_VIDEO_RTP_PORT_RANGE: 20000,20999
      JANUS_CLOUD_DATA_RTP_PORT_RANGE: 21000,21999
      JANUS_CLOUD_WS_PORT: 8188
      JANUS_CLOUD_WS_URL: wss://janus.live.printnanny.ai
      LETSENCRYPT_EMAIL: ${{ secrets.LETSENCRYPT_EMAIL }}
      LOGLEVEL: INFO
      MAILGUN_API_KEY: ${{ secrets.MAILGUN_API_KEY }}
      MAILGUN_API_URL: https://api.mailgun.net/v3
      MAILGUN_DOMAIN: mail.printnanny.ai
      MAILGUN_WEBHOOK_SIGNING_KEY: ${{ secrets.MAILGUN_WEBHOOK_SIGNING_KEY }}
      METABASE_DB_NAME: ${{ secrets.METABASE_DB_NAME }}
      METABASE_DB_PASS: ${{ secrets.METABASE_DB_PASS }}
      METABASE_DB_USER: ${{ secrets.METABASE_DB_USER }}
      NATS_SERVER_URI: nats://nats.live.printnanny.ai:4222
      NATS_WS_URI: wss://nats.live.printnanny.ai:8443
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
      PRINTNANNY_DJANGO_IMAGE: us.gcr.io/print-nanny/print_nanny_webapp:${{ env.GITHUB_SHA }}
      PRINTNANNY_NAMESPACE: live
      REDIS_URL: ${{ secrets.REDIS_URL }}
      STRIPE_LIVE_MODE: True
      STRIPE_LIVE_PUBLIC_KEY: ${{ secrets.STRIPE_LIVE_PUBLIC_KEY }}
      STRIPE_LIVE_SECRET_KEY: ${{ secrets.STRIPE_LIVE_SECRET_KEY }}
      STRIPE_PORTAL_URL: ${{ secrets.STRIPE_PORTAL_URL }}
    needs: [lint, shellcheck, mypy]
    runs-on: ubuntu-latest
    steps:
      - name: Input Settings
        run: |
          echo "Branch: ${{ github.event.inputs.branch }}"
          echo "Loglevel: ${{ github.event.inputs.loglevel }}"
          echo "Plugin Version: ${{ github.event.inputs.plugin_version }}"
          echo "Octoprint Version: ${{ github.event.inputs.octoprint_version }}"
          echo "Load fixture data: ${{ github.event.inputs.fixtures }}"
      - name: Checkout branch
        uses: actions/checkout@v2
      - name: Install system dependencies
        run: |
          sudo apt-get install makepasswd
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Write deploy key
        run: echo $GCP_SERVICE_ACCOUNT_KEY > key.json
      - name: Build UI
        id: ui
        run: |
          make ui
      - name: Deploy to stable cluster
        id: deploy
        run: |

          sudo apt-get install apt-transport-https ca-certificates gnupg
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update && sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin
          gcloud auth activate-service-account $GCP_SERVICE_ACCOUNT --key-file=key.json --project $GCP_PROJECT
          gcloud container clusters get-credentials $CLUSTER --region=$GCP_ZONE --project $GCP_PROJECT
          gcloud auth configure-docker

          make gh-namespace-deploy \
          CLUSTER="$CLUSTER" \
          GCP_PROJECT="print-nanny" \
          PRINT_NANNY_USER="${{ secrets.PROD_DJANGO_SUPERUSER_USERNAME }}" \
          PRINT_NANNY_URL="$DJANGO_BASE_URL" \
          DJANGO_SUPERUSER_EMAIL="$DJANGO_SUPERUSER_EMAIL"
          echo ::set-output name=printnanny_client_version::"$(cat version.txt)"

      - name: Send Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.PRINT_NANNY_DISCORD_DEPLOY_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: |
            ðŸš€ Deployed {{ EVENT_PAYLOAD.repository.full_name }}@{{ GITHUB_SHA }} ðŸš€
            ```
            API Client version: ${{ steps.deploy.outputs.printnanny_client_version }}
            Cluster: ${{ env.CLUSTER }}
            Namespace: live
            ```
            Cluster status: https://console.cloud.google.com/kubernetes/workload/overview?project=print-nanny
