---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: {{ PRINTNANNY_NAMESPACE }}
  name: webapp
  annotations:
    iam.gke.io/gcp-service-account: webapp--{{ PRINTNANNY_NAMESPACE }}@{{ GCP_PROJECT }}.iam.gserviceaccount.com
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: "django-nats-nkey-nfs"
  namespace: {{ PRINTNANNY_NAMESPACE }}
spec:
  storageClassName: nfs
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 512Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ PRINTNANNY_NAMESPACE }}
  name: django
spec:
  replicas: 2
  selector:
    matchLabels:
      app: django
  template:
    metadata:
      labels:
        app: django
    spec:
      serviceAccountName: webapp
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          matchLabelKeys:
            - app
            - pod-template-hash
      volumes:
      - name: django-operator-nkeys
        secret:
          secretName: django-operator-nkeys
          defaultMode: 0400
      - name: firehose-nkey
        secret:
          secretName: printnanny-firehose
      - name: nsc
        persistentVolumeClaim:
          claimName: "django-nats-nkey-nfs"
      containers:
      - name: celery-worker
        image: {{ PRINTNANNY_DJANGO_IMAGE }}

        command:
          - /start-celeryworker
        envFrom:
          - configMapRef:
              name: webapp
        env:
          - name: OIDC_RSA_PRIVATE_KEY
            valueFrom:
              secretKeyRef:
                name: oidc-rsa-private-key
                key: oidc.key
        volumeMounts:
        - name: django-operator-nkeys
          readOnly: true
          mountPath: "/etc/django-operator-nkeys"
        - name: nsc
          mountPath: "/var/lib/nats/nsc"
        resources:
          requests:
            memory: "256M"
            cpu: "0.5"
          limits:
            memory: "2G"
            cpu: "1"

      - name: celery-beat
        image: {{ PRINTNANNY_DJANGO_IMAGE }}
        command:
          - /start-celerybeat
        envFrom:
          - configMapRef:
              name: webapp
        env:
          - name: OIDC_RSA_PRIVATE_KEY
            valueFrom:
              secretKeyRef:
                name: oidc-rsa-private-key
                key: oidc.key
        volumeMounts:
        - name: django-operator-nkeys
          readOnly: true
          mountPath: "/etc/django-operator-nkeys"
        - name: nsc
          mountPath: "/var/lib/nats/nsc"


      - name: django
        image: {{ PRINTNANNY_DJANGO_IMAGE }}
        lifecycle:
          preStop:
            exec:
              command:
                - python
                - manage.py
                - nsc_push
        livenessProbe:
          httpGet:
            path: /health/
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        resources:
          requests:
            memory: "1G"
            cpu: "1"
          limits:
            memory: "4G"
            cpu: "2"
        command:
          - /start
        envFrom:
          - configMapRef:
              name: webapp
        env:
          - name: OIDC_RSA_PRIVATE_KEY
            valueFrom:
              secretKeyRef:
                name: oidc-rsa-private-key
                key: oidc.key
        volumeMounts:
        - name: django-operator-nkeys
          readOnly: true
          mountPath: "/etc/django-operator-nkeys"
        - name: nsc
          mountPath: "/var/lib/nats/nsc"
      # - name: firehose
      #   image: {{ PRINTNANNY_DJANGO_IMAGE }}
      #   command:
      #     - python
      #     - -m
      #     - print_nanny_webapp.events.streams.firehose
      #   envFrom:
      #     - configMapRef:
      #         name: webapp
      #   volumeMounts:
      #   - name: django-operator-nkeys
      #     readOnly: true
      #     mountPath: "/etc/django-operator-nkeys"
      #   - name: nsc
      #     mountPath: "/var/lib/nats/nsc"
      #   - name: firehose-nkey
      #     mountPath: /app/.envs/.production/.firehose
      #     readOnly: true
      - name: pgbouncer
        # pgbouncer implements connection pooling for PostgreSQL
        image: bitnami/pgbouncer:1.18.0
        envFrom:
          - configMapRef:
              name: pgbouncer
        ports:
          - containerPort: {{ PGBOUNCER_PORT }}
      - name: cloud-sql-proxy
        # It is recommended to use the latest version of the Cloud SQL proxy
        # Make sure to update on a regular schedule!
        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.1.2
        args:
          - "{{ GCP_PROJECT }}:{{ GCP_REGION }}:{{ CLOUD_SQL_POSTGRES_INSTANCE }}?port={{ POSTGRES_PORT }}"
          - "--max-sigterm-delay=30s"
          - "--quiet"
          # If connecting from a VPC-native GKE cluster, you can use the
          # following flag to have the proxy connect over private IP
          # - "-ip_address_types=PRIVATE"

          # Replace DB_PORT with the port the proxy should listen on
          # Defaults: MySQL: 3306, Postgres: 5432, SQLServer: 1433
        securityContext:
          # The default Cloud SQL proxy image runs as the
          # "nonroot" user and group (uid: 65532) by default.
          runAsNonRoot: true
        ports:
          - containerPort: {{ POSTGRES_PORT }}
---
apiVersion: cloud.google.com/v1beta1
kind: BackendConfig
metadata:
  namespace: {{ PRINTNANNY_NAMESPACE }}
  name: django-backendconfig
spec:
  timeoutSec: 300
  connectionDraining:
    drainingTimeoutSec: 10
  healthCheck:
    checkIntervalSec: 60
    port: 8000
    type: HTTP
    requestPath: /health/
  cdn:
    enabled: true
    cachePolicy:
      includeHost: true
      includeQueryString: false
---
apiVersion: v1
kind: Service
metadata:
  namespace: {{ PRINTNANNY_NAMESPACE }}
  name: django
  annotations:
    cloud.google.com/backend-config: '{"default": "django-backendconfig"}'
spec:
  selector:
    app: django
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8000
  type: NodePort
