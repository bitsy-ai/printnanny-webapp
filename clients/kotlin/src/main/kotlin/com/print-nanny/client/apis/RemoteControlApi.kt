/**
* 
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 0.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.print-nanny.client.apis

import com.print-nanny.client.models.GcodeFile
import com.print-nanny.client.models.OctoPrintDevice
import com.print-nanny.client.models.OctoPrintDeviceKey
import com.print-nanny.client.models.OctoPrintDeviceRequest
import com.print-nanny.client.models.PaginatedGcodeFileList
import com.print-nanny.client.models.PaginatedOctoPrintDeviceList
import com.print-nanny.client.models.PaginatedPrintSessionList
import com.print-nanny.client.models.PaginatedPrinterProfileList
import com.print-nanny.client.models.PaginatedRemoteControlCommandList
import com.print-nanny.client.models.PatchedOctoPrintDeviceRequest
import com.print-nanny.client.models.PatchedPrintSessionRequest
import com.print-nanny.client.models.PatchedPrinterProfileRequest
import com.print-nanny.client.models.PatchedRemoteControlCommandRequest
import com.print-nanny.client.models.PrintSession
import com.print-nanny.client.models.PrintSessionRequest
import com.print-nanny.client.models.PrinterProfile
import com.print-nanny.client.models.PrinterProfileRequest
import com.print-nanny.client.models.RemoteControlCommand
import com.print-nanny.client.models.RemoteControlCommandRequest

import com.print-nanny.client.infrastructure.ApiClient
import com.print-nanny.client.infrastructure.ClientException
import com.print-nanny.client.infrastructure.ClientError
import com.print-nanny.client.infrastructure.ServerException
import com.print-nanny.client.infrastructure.ServerError
import com.print-nanny.client.infrastructure.MultiValueMap
import com.print-nanny.client.infrastructure.RequestConfig
import com.print-nanny.client.infrastructure.RequestMethod
import com.print-nanny.client.infrastructure.ResponseType
import com.print-nanny.client.infrastructure.Success
import com.print-nanny.client.infrastructure.toMultiValue

class RemoteControlApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("com.print-nanny.client.baseUrl", "http://localhost")
        }
    }

    /**
    * 
    * 
    * @param page A page number within the paginated result set. (optional)
    * @return PaginatedRemoteControlCommandList
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCommandsList(page: kotlin.Int?) : PaginatedRemoteControlCommandList {
        val localVariableConfig = apiCommandsListRequestConfig(page = page)

        val localVarResponse = request<PaginatedRemoteControlCommandList>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaginatedRemoteControlCommandList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiCommandsList
    *
    * @param page A page number within the paginated result set. (optional)
    * @return RequestConfig
    */
    fun apiCommandsListRequestConfig(page: kotlin.Int?) : RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/api/commands/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param id A unique integer value identifying this remote control command. 
    * @param patchedRemoteControlCommandRequest  (optional)
    * @return RemoteControlCommand
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCommandsPartialUpdate(id: kotlin.Int, patchedRemoteControlCommandRequest: PatchedRemoteControlCommandRequest?) : RemoteControlCommand {
        val localVariableConfig = apiCommandsPartialUpdateRequestConfig(id = id, patchedRemoteControlCommandRequest = patchedRemoteControlCommandRequest)

        val localVarResponse = request<RemoteControlCommand>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RemoteControlCommand
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiCommandsPartialUpdate
    *
    * @param id A unique integer value identifying this remote control command. 
    * @param patchedRemoteControlCommandRequest  (optional)
    * @return RequestConfig
    */
    fun apiCommandsPartialUpdateRequestConfig(id: kotlin.Int, patchedRemoteControlCommandRequest: PatchedRemoteControlCommandRequest?) : RequestConfig {
        val localVariableBody: kotlin.Any? = patchedRemoteControlCommandRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/commands/{id}/".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param id A unique integer value identifying this remote control command. 
    * @return RemoteControlCommand
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCommandsRetrieve(id: kotlin.Int) : RemoteControlCommand {
        val localVariableConfig = apiCommandsRetrieveRequestConfig(id = id)

        val localVarResponse = request<RemoteControlCommand>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RemoteControlCommand
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiCommandsRetrieve
    *
    * @param id A unique integer value identifying this remote control command. 
    * @return RequestConfig
    */
    fun apiCommandsRetrieveRequestConfig(id: kotlin.Int) : RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/api/commands/{id}/".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param id A unique integer value identifying this remote control command. 
    * @param remoteControlCommandRequest  
    * @return RemoteControlCommand
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCommandsUpdate(id: kotlin.Int, remoteControlCommandRequest: RemoteControlCommandRequest) : RemoteControlCommand {
        val localVariableConfig = apiCommandsUpdateRequestConfig(id = id, remoteControlCommandRequest = remoteControlCommandRequest)

        val localVarResponse = request<RemoteControlCommand>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RemoteControlCommand
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiCommandsUpdate
    *
    * @param id A unique integer value identifying this remote control command. 
    * @param remoteControlCommandRequest  
    * @return RequestConfig
    */
    fun apiCommandsUpdateRequestConfig(id: kotlin.Int, remoteControlCommandRequest: RemoteControlCommandRequest) : RequestConfig {
        val localVariableBody: kotlin.Any? = remoteControlCommandRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/commands/{id}/".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param page A page number within the paginated result set. (optional)
    * @return PaginatedGcodeFileList
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiGcodeFilesList(page: kotlin.Int?) : PaginatedGcodeFileList {
        val localVariableConfig = apiGcodeFilesListRequestConfig(page = page)

        val localVarResponse = request<PaginatedGcodeFileList>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaginatedGcodeFileList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiGcodeFilesList
    *
    * @param page A page number within the paginated result set. (optional)
    * @return RequestConfig
    */
    fun apiGcodeFilesListRequestConfig(page: kotlin.Int?) : RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/api/gcode-files/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param id  
    * @param name  (optional)
    * @param file  (optional)
    * @param fileHash  (optional)
    * @param octoprintDevice  (optional)
    * @return GcodeFile
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiGcodeFilesPartialUpdate(id: kotlin.String, name: kotlin.String?, file: java.io.File?, fileHash: kotlin.String?, octoprintDevice: kotlin.String?) : GcodeFile {
        val localVariableConfig = apiGcodeFilesPartialUpdateRequestConfig(id = id, name = name, file = file, fileHash = fileHash, octoprintDevice = octoprintDevice)

        val localVarResponse = request<GcodeFile>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GcodeFile
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiGcodeFilesPartialUpdate
    *
    * @param id  
    * @param name  (optional)
    * @param file  (optional)
    * @param fileHash  (optional)
    * @param octoprintDevice  (optional)
    * @return RequestConfig
    */
    fun apiGcodeFilesPartialUpdateRequestConfig(id: kotlin.String, name: kotlin.String?, file: java.io.File?, fileHash: kotlin.String?, octoprintDevice: kotlin.String?) : RequestConfig {
        val localVariableBody: kotlin.Any? = mapOf("name" to name, "file" to file, "file_hash" to fileHash, "octoprint_device" to octoprintDevice)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/gcode-files/{id}/".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param id  
    * @return GcodeFile
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiGcodeFilesRetrieve(id: kotlin.String) : GcodeFile {
        val localVariableConfig = apiGcodeFilesRetrieveRequestConfig(id = id)

        val localVarResponse = request<GcodeFile>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GcodeFile
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiGcodeFilesRetrieve
    *
    * @param id  
    * @return RequestConfig
    */
    fun apiGcodeFilesRetrieveRequestConfig(id: kotlin.String) : RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/api/gcode-files/{id}/".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param id  
    * @param name  
    * @param file  
    * @param fileHash  
    * @param octoprintDevice  
    * @return GcodeFile
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiGcodeFilesUpdate(id: kotlin.String, name: kotlin.String, file: java.io.File, fileHash: kotlin.String, octoprintDevice: kotlin.String) : GcodeFile {
        val localVariableConfig = apiGcodeFilesUpdateRequestConfig(id = id, name = name, file = file, fileHash = fileHash, octoprintDevice = octoprintDevice)

        val localVarResponse = request<GcodeFile>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GcodeFile
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiGcodeFilesUpdate
    *
    * @param id  
    * @param name  
    * @param file  
    * @param fileHash  
    * @param octoprintDevice  
    * @return RequestConfig
    */
    fun apiGcodeFilesUpdateRequestConfig(id: kotlin.String, name: kotlin.String, file: java.io.File, fileHash: kotlin.String, octoprintDevice: kotlin.String) : RequestConfig {
        val localVariableBody: kotlin.Any? = mapOf("name" to name, "file" to file, "file_hash" to fileHash, "octoprint_device" to octoprintDevice)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/gcode-files/{id}/".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param octoPrintDeviceRequest  
    * @return OctoPrintDevice
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiOctoprintDevicesCreate(octoPrintDeviceRequest: OctoPrintDeviceRequest) : OctoPrintDevice {
        val localVariableConfig = apiOctoprintDevicesCreateRequestConfig(octoPrintDeviceRequest = octoPrintDeviceRequest)

        val localVarResponse = request<OctoPrintDevice>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OctoPrintDevice
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiOctoprintDevicesCreate
    *
    * @param octoPrintDeviceRequest  
    * @return RequestConfig
    */
    fun apiOctoprintDevicesCreateRequestConfig(octoPrintDeviceRequest: OctoPrintDeviceRequest) : RequestConfig {
        val localVariableBody: kotlin.Any? = octoPrintDeviceRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/api/octoprint-devices/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param page A page number within the paginated result set. (optional)
    * @return PaginatedOctoPrintDeviceList
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiOctoprintDevicesList(page: kotlin.Int?) : PaginatedOctoPrintDeviceList {
        val localVariableConfig = apiOctoprintDevicesListRequestConfig(page = page)

        val localVarResponse = request<PaginatedOctoPrintDeviceList>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaginatedOctoPrintDeviceList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiOctoprintDevicesList
    *
    * @param page A page number within the paginated result set. (optional)
    * @return RequestConfig
    */
    fun apiOctoprintDevicesListRequestConfig(page: kotlin.Int?) : RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/api/octoprint-devices/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param id A unique integer value identifying this octo print device. 
    * @return OctoPrintDevice
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiOctoprintDevicesRetrieve(id: kotlin.Int) : OctoPrintDevice {
        val localVariableConfig = apiOctoprintDevicesRetrieveRequestConfig(id = id)

        val localVarResponse = request<OctoPrintDevice>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OctoPrintDevice
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiOctoprintDevicesRetrieve
    *
    * @param id A unique integer value identifying this octo print device. 
    * @return RequestConfig
    */
    fun apiOctoprintDevicesRetrieveRequestConfig(id: kotlin.Int) : RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/api/octoprint-devices/{id}/".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param printSessionRequest  
    * @return PrintSession
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiPrintSessionsCreate(printSessionRequest: PrintSessionRequest) : PrintSession {
        val localVariableConfig = apiPrintSessionsCreateRequestConfig(printSessionRequest = printSessionRequest)

        val localVarResponse = request<PrintSession>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PrintSession
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiPrintSessionsCreate
    *
    * @param printSessionRequest  
    * @return RequestConfig
    */
    fun apiPrintSessionsCreateRequestConfig(printSessionRequest: PrintSessionRequest) : RequestConfig {
        val localVariableBody: kotlin.Any? = printSessionRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/api/print-sessions/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param page A page number within the paginated result set. (optional)
    * @return PaginatedPrintSessionList
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiPrintSessionsList(page: kotlin.Int?) : PaginatedPrintSessionList {
        val localVariableConfig = apiPrintSessionsListRequestConfig(page = page)

        val localVarResponse = request<PaginatedPrintSessionList>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaginatedPrintSessionList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiPrintSessionsList
    *
    * @param page A page number within the paginated result set. (optional)
    * @return RequestConfig
    */
    fun apiPrintSessionsListRequestConfig(page: kotlin.Int?) : RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/api/print-sessions/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param session  
    * @return PrintSession
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiPrintSessionsRetrieve(session: kotlin.String) : PrintSession {
        val localVariableConfig = apiPrintSessionsRetrieveRequestConfig(session = session)

        val localVarResponse = request<PrintSession>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PrintSession
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiPrintSessionsRetrieve
    *
    * @param session  
    * @return RequestConfig
    */
    fun apiPrintSessionsRetrieveRequestConfig(session: kotlin.String) : RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/api/print-sessions/{session}/".replace("{"+"session"+"}", "$session"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param name  (optional)
    * @param page A page number within the paginated result set. (optional)
    * @param user  (optional)
    * @return PaginatedPrinterProfileList
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiPrinterProfilesList(name: kotlin.String?, page: kotlin.Int?, user: kotlin.Int?) : PaginatedPrinterProfileList {
        val localVariableConfig = apiPrinterProfilesListRequestConfig(name = name, page = page, user = user)

        val localVarResponse = request<PaginatedPrinterProfileList>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaginatedPrinterProfileList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiPrinterProfilesList
    *
    * @param name  (optional)
    * @param page A page number within the paginated result set. (optional)
    * @param user  (optional)
    * @return RequestConfig
    */
    fun apiPrinterProfilesListRequestConfig(name: kotlin.String?, page: kotlin.Int?, user: kotlin.Int?) : RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (name != null) {
                    put("name", listOf(name.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (user != null) {
                    put("user", listOf(user.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/api/printer-profiles/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param id A unique integer value identifying this printer profile. 
    * @param patchedPrinterProfileRequest  (optional)
    * @return PrinterProfile
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiPrinterProfilesPartialUpdate(id: kotlin.Int, patchedPrinterProfileRequest: PatchedPrinterProfileRequest?) : PrinterProfile {
        val localVariableConfig = apiPrinterProfilesPartialUpdateRequestConfig(id = id, patchedPrinterProfileRequest = patchedPrinterProfileRequest)

        val localVarResponse = request<PrinterProfile>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PrinterProfile
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiPrinterProfilesPartialUpdate
    *
    * @param id A unique integer value identifying this printer profile. 
    * @param patchedPrinterProfileRequest  (optional)
    * @return RequestConfig
    */
    fun apiPrinterProfilesPartialUpdateRequestConfig(id: kotlin.Int, patchedPrinterProfileRequest: PatchedPrinterProfileRequest?) : RequestConfig {
        val localVariableBody: kotlin.Any? = patchedPrinterProfileRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/printer-profiles/{id}/".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param id A unique integer value identifying this printer profile. 
    * @return PrinterProfile
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiPrinterProfilesRetrieve(id: kotlin.Int) : PrinterProfile {
        val localVariableConfig = apiPrinterProfilesRetrieveRequestConfig(id = id)

        val localVarResponse = request<PrinterProfile>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PrinterProfile
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiPrinterProfilesRetrieve
    *
    * @param id A unique integer value identifying this printer profile. 
    * @return RequestConfig
    */
    fun apiPrinterProfilesRetrieveRequestConfig(id: kotlin.Int) : RequestConfig {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.GET,
            path = "/api/printer-profiles/{id}/".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param id A unique integer value identifying this printer profile. 
    * @param printerProfileRequest  
    * @return PrinterProfile
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiPrinterProfilesUpdate(id: kotlin.Int, printerProfileRequest: PrinterProfileRequest) : PrinterProfile {
        val localVariableConfig = apiPrinterProfilesUpdateRequestConfig(id = id, printerProfileRequest = printerProfileRequest)

        val localVarResponse = request<PrinterProfile>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PrinterProfile
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiPrinterProfilesUpdate
    *
    * @param id A unique integer value identifying this printer profile. 
    * @param printerProfileRequest  
    * @return RequestConfig
    */
    fun apiPrinterProfilesUpdateRequestConfig(id: kotlin.Int, printerProfileRequest: PrinterProfileRequest) : RequestConfig {
        val localVariableBody: kotlin.Any? = printerProfileRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/printer-profiles/{id}/".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param name  
    * @param file  
    * @param fileHash  
    * @param octoprintDevice  
    * @return GcodeFile
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gcodeFilesCreate(name: kotlin.String, file: java.io.File, fileHash: kotlin.String, octoprintDevice: kotlin.String) : GcodeFile {
        val localVariableConfig = gcodeFilesCreateRequestConfig(name = name, file = file, fileHash = fileHash, octoprintDevice = octoprintDevice)

        val localVarResponse = request<GcodeFile>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GcodeFile
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation gcodeFilesCreate
    *
    * @param name  
    * @param file  
    * @param fileHash  
    * @param octoprintDevice  
    * @return RequestConfig
    */
    fun gcodeFilesCreateRequestConfig(name: kotlin.String, file: java.io.File, fileHash: kotlin.String, octoprintDevice: kotlin.String) : RequestConfig {
        val localVariableBody: kotlin.Any? = mapOf("name" to name, "file" to file, "file_hash" to fileHash, "octoprint_device" to octoprintDevice)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/api/gcode-files/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param name  
    * @param file  
    * @param fileHash  
    * @param octoprintDevice  
    * @return GcodeFile
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gcodeFilesUpdateOrCreate(name: kotlin.String, file: java.io.File, fileHash: kotlin.String, octoprintDevice: kotlin.String) : GcodeFile {
        val localVariableConfig = gcodeFilesUpdateOrCreateRequestConfig(name = name, file = file, fileHash = fileHash, octoprintDevice = octoprintDevice)

        val localVarResponse = request<GcodeFile>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GcodeFile
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation gcodeFilesUpdateOrCreate
    *
    * @param name  
    * @param file  
    * @param fileHash  
    * @param octoprintDevice  
    * @return RequestConfig
    */
    fun gcodeFilesUpdateOrCreateRequestConfig(name: kotlin.String, file: java.io.File, fileHash: kotlin.String, octoprintDevice: kotlin.String) : RequestConfig {
        val localVariableBody: kotlin.Any? = mapOf("name" to name, "file" to file, "file_hash" to fileHash, "octoprint_device" to octoprintDevice)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/api/gcode-files/update-or-create/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param id A unique integer value identifying this octo print device. 
    * @param patchedOctoPrintDeviceRequest  (optional)
    * @return OctoPrintDevice
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun octoprintDevicesPartialUpdate(id: kotlin.Int, patchedOctoPrintDeviceRequest: PatchedOctoPrintDeviceRequest?) : OctoPrintDevice {
        val localVariableConfig = octoprintDevicesPartialUpdateRequestConfig(id = id, patchedOctoPrintDeviceRequest = patchedOctoPrintDeviceRequest)

        val localVarResponse = request<OctoPrintDevice>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OctoPrintDevice
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation octoprintDevicesPartialUpdate
    *
    * @param id A unique integer value identifying this octo print device. 
    * @param patchedOctoPrintDeviceRequest  (optional)
    * @return RequestConfig
    */
    fun octoprintDevicesPartialUpdateRequestConfig(id: kotlin.Int, patchedOctoPrintDeviceRequest: PatchedOctoPrintDeviceRequest?) : RequestConfig {
        val localVariableBody: kotlin.Any? = patchedOctoPrintDeviceRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/octoprint-devices/{id}/".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param id A unique integer value identifying this octo print device. 
    * @param octoPrintDeviceRequest  
    * @return OctoPrintDevice
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun octoprintDevicesUpdate(id: kotlin.Int, octoPrintDeviceRequest: OctoPrintDeviceRequest) : OctoPrintDevice {
        val localVariableConfig = octoprintDevicesUpdateRequestConfig(id = id, octoPrintDeviceRequest = octoPrintDeviceRequest)

        val localVarResponse = request<OctoPrintDevice>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OctoPrintDevice
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation octoprintDevicesUpdate
    *
    * @param id A unique integer value identifying this octo print device. 
    * @param octoPrintDeviceRequest  
    * @return RequestConfig
    */
    fun octoprintDevicesUpdateRequestConfig(id: kotlin.Int, octoPrintDeviceRequest: OctoPrintDeviceRequest) : RequestConfig {
        val localVariableBody: kotlin.Any? = octoPrintDeviceRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/octoprint-devices/{id}/".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param octoPrintDeviceRequest  
    * @return OctoPrintDevice
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun octoprintDevicesUpdateOrCreate(octoPrintDeviceRequest: OctoPrintDeviceRequest) : OctoPrintDevice {
        val localVariableConfig = octoprintDevicesUpdateOrCreateRequestConfig(octoPrintDeviceRequest = octoPrintDeviceRequest)

        val localVarResponse = request<OctoPrintDevice>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OctoPrintDevice
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation octoprintDevicesUpdateOrCreate
    *
    * @param octoPrintDeviceRequest  
    * @return RequestConfig
    */
    fun octoprintDevicesUpdateOrCreateRequestConfig(octoPrintDeviceRequest: OctoPrintDeviceRequest) : RequestConfig {
        val localVariableBody: kotlin.Any? = octoPrintDeviceRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/api/octoprint-devices/update-or-create/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param session  
    * @param patchedPrintSessionRequest  (optional)
    * @return PrintSession
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun printSessionPartialUpdate(session: kotlin.String, patchedPrintSessionRequest: PatchedPrintSessionRequest?) : PrintSession {
        val localVariableConfig = printSessionPartialUpdateRequestConfig(session = session, patchedPrintSessionRequest = patchedPrintSessionRequest)

        val localVarResponse = request<PrintSession>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PrintSession
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation printSessionPartialUpdate
    *
    * @param session  
    * @param patchedPrintSessionRequest  (optional)
    * @return RequestConfig
    */
    fun printSessionPartialUpdateRequestConfig(session: kotlin.String, patchedPrintSessionRequest: PatchedPrintSessionRequest?) : RequestConfig {
        val localVariableBody: kotlin.Any? = patchedPrintSessionRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/print-sessions/{session}/".replace("{"+"session"+"}", "$session"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param session  
    * @param printSessionRequest  
    * @return PrintSession
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun printSessionUpdate(session: kotlin.String, printSessionRequest: PrintSessionRequest) : PrintSession {
        val localVariableConfig = printSessionUpdateRequestConfig(session = session, printSessionRequest = printSessionRequest)

        val localVarResponse = request<PrintSession>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PrintSession
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation printSessionUpdate
    *
    * @param session  
    * @param printSessionRequest  
    * @return RequestConfig
    */
    fun printSessionUpdateRequestConfig(session: kotlin.String, printSessionRequest: PrintSessionRequest) : RequestConfig {
        val localVariableBody: kotlin.Any? = printSessionRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/print-sessions/{session}/".replace("{"+"session"+"}", "$session"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param printerProfileRequest  
    * @return PrintSession
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun printerProfilesCreate(printerProfileRequest: PrinterProfileRequest) : PrintSession {
        val localVariableConfig = printerProfilesCreateRequestConfig(printerProfileRequest = printerProfileRequest)

        val localVarResponse = request<PrintSession>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PrintSession
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation printerProfilesCreate
    *
    * @param printerProfileRequest  
    * @return RequestConfig
    */
    fun printerProfilesCreateRequestConfig(printerProfileRequest: PrinterProfileRequest) : RequestConfig {
        val localVariableBody: kotlin.Any? = printerProfileRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/api/printer-profiles/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

    /**
    * 
    * 
    * @param printerProfileRequest  
    * @return PrinterProfile
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun printerProfilesUpdateOrCreate(printerProfileRequest: PrinterProfileRequest) : PrinterProfile {
        val localVariableConfig = printerProfilesUpdateOrCreateRequestConfig(printerProfileRequest = printerProfileRequest)

        val localVarResponse = request<PrinterProfile>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PrinterProfile
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation printerProfilesUpdateOrCreate
    *
    * @param printerProfileRequest  
    * @return RequestConfig
    */
    fun printerProfilesUpdateOrCreateRequestConfig(printerProfileRequest: PrinterProfileRequest) : RequestConfig {
        val localVariableBody: kotlin.Any? = printerProfileRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        val localVariableConfig = RequestConfig(
            method = RequestMethod.POST,
            path = "/api/printer-profiles/update-or-create/",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )

        return localVariableConfig
    }

}
