/**
 * print-nanny-client
 *
 * Official API client library for print-nanny.com
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: leigh@print-nanny.com
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.print-nanny.client.models


import com.squareup.moshi.Json

/**
 * 
 *
 * Values: operational,paused,cancelling,printing,pausing,sdReady,error,readyPrinterReady,closedOrError,offline,openingSerialConnection,connection,resuming,finishing,printerStateChanged,connected,disconnected,printerReset,firmwareData
 */

enum class PrinterStateEnum(val value: kotlin.String) {

    @Json(name = "Operational")
    operational("Operational"),

    @Json(name = "Paused")
    paused("Paused"),

    @Json(name = "Cancelling")
    cancelling("Cancelling"),

    @Json(name = "Printing")
    printing("Printing"),

    @Json(name = "Pausing")
    pausing("Pausing"),

    @Json(name = "sdReady")
    sdReady("sdReady"),

    @Json(name = "Error")
    error("Error"),

    @Json(name = "ReadyPrinter Ready")
    readyPrinterReady("ReadyPrinter Ready"),

    @Json(name = "closedOrError")
    closedOrError("closedOrError"),

    @Json(name = "Offline")
    offline("Offline"),

    @Json(name = "Opening serial connection")
    openingSerialConnection("Opening serial connection"),

    @Json(name = "Connection")
    connection("Connection"),

    @Json(name = "Resuming")
    resuming("Resuming"),

    @Json(name = "Finishing")
    finishing("Finishing"),

    @Json(name = "PrinterStateChanged")
    printerStateChanged("PrinterStateChanged"),

    @Json(name = "Connected")
    connected("Connected"),

    @Json(name = "Disconnected")
    disconnected("Disconnected"),

    @Json(name = "PrinterReset")
    printerReset("PrinterReset"),

    @Json(name = "FirmwareData")
    firmwareData("FirmwareData");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: Any?): kotlin.String? = if (data is PrinterStateEnum) "$data" else null

        /**
         * Returns a valid [PrinterStateEnum] for [data], null otherwise.
         */
        fun decode(data: Any?): PrinterStateEnum? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

