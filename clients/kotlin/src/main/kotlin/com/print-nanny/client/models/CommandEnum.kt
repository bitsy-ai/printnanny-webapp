/**
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.print-nanny.client.models


import com.squareup.moshi.Json

/**
 * 
 *
 * Values: monitoringStop,monitoringStart,printStart,printStop,printPause,printResume,moveNozzle,connectTestMqttPong
 */

enum class CommandEnum(val value: kotlin.String) {

    @Json(name = "monitoring_stop")
    monitoringStop("monitoring_stop"),

    @Json(name = "monitoring_start")
    monitoringStart("monitoring_start"),

    @Json(name = "print_start")
    printStart("print_start"),

    @Json(name = "print_stop")
    printStop("print_stop"),

    @Json(name = "print_pause")
    printPause("print_pause"),

    @Json(name = "print_resume")
    printResume("print_resume"),

    @Json(name = "move_nozzle")
    moveNozzle("move_nozzle"),

    @Json(name = "connect_test_mqtt_pong")
    connectTestMqttPong("connect_test_mqtt_pong");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: Any?): kotlin.String? = if (data is CommandEnum) "$data" else null

        /**
         * Returns a valid [CommandEnum] for [data], null otherwise.
         */
        fun decode(data: Any?): CommandEnum? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

