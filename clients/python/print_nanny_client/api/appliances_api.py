# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Contact: leigh@bitsy.ai
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from print_nanny_client.api_client import ApiClient
from print_nanny_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class AppliancesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def appliances_ansible_facts_create(self, appliance_id, ansible_facts_request, **kwargs):  # noqa: E501
        """appliances_ansible_facts_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_ansible_facts_create(appliance_id, ansible_facts_request, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param ansible_facts_request: (required)
        :type ansible_facts_request: AnsibleFactsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AnsibleFacts
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_ansible_facts_create_with_http_info(appliance_id, ansible_facts_request, **kwargs)  # noqa: E501

    def appliances_ansible_facts_create_with_http_info(self, appliance_id, ansible_facts_request, **kwargs):  # noqa: E501
        """appliances_ansible_facts_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_ansible_facts_create_with_http_info(appliance_id, ansible_facts_request, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param ansible_facts_request: (required)
        :type ansible_facts_request: AnsibleFactsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AnsibleFacts, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'ansible_facts_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_ansible_facts_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_ansible_facts_create`")  # noqa: E501
        # verify the required parameter 'ansible_facts_request' is set
        if self.api_client.client_side_validation and ('ansible_facts_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['ansible_facts_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ansible_facts_request` when calling `appliances_ansible_facts_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'ansible_facts_request' in local_var_params:
            body_params = local_var_params['ansible_facts_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            201: "AnsibleFacts",
            202: "AnsibleFacts",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/ansible-facts/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_ansible_facts_list(self, appliance_id, **kwargs):  # noqa: E501
        """appliances_ansible_facts_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_ansible_facts_list(appliance_id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param page: A page number within the paginated result set.
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedAnsibleFactsList
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_ansible_facts_list_with_http_info(appliance_id, **kwargs)  # noqa: E501

    def appliances_ansible_facts_list_with_http_info(self, appliance_id, **kwargs):  # noqa: E501
        """appliances_ansible_facts_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_ansible_facts_list_with_http_info(appliance_id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param page: A page number within the paginated result set.
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedAnsibleFactsList, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'page'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_ansible_facts_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_ansible_facts_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            200: "PaginatedAnsibleFactsList",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/ansible-facts/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_ansible_facts_partial_update(self, appliance_id, id, **kwargs):  # noqa: E501
        """appliances_ansible_facts_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_ansible_facts_partial_update(appliance_id, id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this ansible facts. (required)
        :type id: int
        :param patched_ansible_facts_request:
        :type patched_ansible_facts_request: PatchedAnsibleFactsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AnsibleFacts
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_ansible_facts_partial_update_with_http_info(appliance_id, id, **kwargs)  # noqa: E501

    def appliances_ansible_facts_partial_update_with_http_info(self, appliance_id, id, **kwargs):  # noqa: E501
        """appliances_ansible_facts_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_ansible_facts_partial_update_with_http_info(appliance_id, id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this ansible facts. (required)
        :type id: int
        :param patched_ansible_facts_request:
        :type patched_ansible_facts_request: PatchedAnsibleFactsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AnsibleFacts, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'id',
            'patched_ansible_facts_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_ansible_facts_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_ansible_facts_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `appliances_ansible_facts_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'patched_ansible_facts_request' in local_var_params:
            body_params = local_var_params['patched_ansible_facts_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            200: "AnsibleFacts",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/ansible-facts/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_ansible_facts_retrieve(self, appliance_id, id, **kwargs):  # noqa: E501
        """appliances_ansible_facts_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_ansible_facts_retrieve(appliance_id, id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this ansible facts. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AnsibleFacts
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_ansible_facts_retrieve_with_http_info(appliance_id, id, **kwargs)  # noqa: E501

    def appliances_ansible_facts_retrieve_with_http_info(self, appliance_id, id, **kwargs):  # noqa: E501
        """appliances_ansible_facts_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_ansible_facts_retrieve_with_http_info(appliance_id, id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this ansible facts. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AnsibleFacts, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_ansible_facts_retrieve" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_ansible_facts_retrieve`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `appliances_ansible_facts_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            200: "AnsibleFacts",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/ansible-facts/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_ansible_facts_update(self, appliance_id, id, ansible_facts_request, **kwargs):  # noqa: E501
        """appliances_ansible_facts_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_ansible_facts_update(appliance_id, id, ansible_facts_request, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this ansible facts. (required)
        :type id: int
        :param ansible_facts_request: (required)
        :type ansible_facts_request: AnsibleFactsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AnsibleFacts
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_ansible_facts_update_with_http_info(appliance_id, id, ansible_facts_request, **kwargs)  # noqa: E501

    def appliances_ansible_facts_update_with_http_info(self, appliance_id, id, ansible_facts_request, **kwargs):  # noqa: E501
        """appliances_ansible_facts_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_ansible_facts_update_with_http_info(appliance_id, id, ansible_facts_request, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this ansible facts. (required)
        :type id: int
        :param ansible_facts_request: (required)
        :type ansible_facts_request: AnsibleFactsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AnsibleFacts, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'id',
            'ansible_facts_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_ansible_facts_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_ansible_facts_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `appliances_ansible_facts_update`")  # noqa: E501
        # verify the required parameter 'ansible_facts_request' is set
        if self.api_client.client_side_validation and ('ansible_facts_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['ansible_facts_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ansible_facts_request` when calling `appliances_ansible_facts_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'ansible_facts_request' in local_var_params:
            body_params = local_var_params['ansible_facts_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            201: "AnsibleFacts",
            202: "AnsibleFacts",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/ansible-facts/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_cameras_create(self, appliance_id, camera_request, **kwargs):  # noqa: E501
        """appliances_cameras_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_cameras_create(appliance_id, camera_request, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param camera_request: (required)
        :type camera_request: CameraRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Camera
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_cameras_create_with_http_info(appliance_id, camera_request, **kwargs)  # noqa: E501

    def appliances_cameras_create_with_http_info(self, appliance_id, camera_request, **kwargs):  # noqa: E501
        """appliances_cameras_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_cameras_create_with_http_info(appliance_id, camera_request, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param camera_request: (required)
        :type camera_request: CameraRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Camera, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'camera_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_cameras_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_cameras_create`")  # noqa: E501
        # verify the required parameter 'camera_request' is set
        if self.api_client.client_side_validation and ('camera_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['camera_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `camera_request` when calling `appliances_cameras_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'camera_request' in local_var_params:
            body_params = local_var_params['camera_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            201: "Camera",
            202: "Camera",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/cameras/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_cameras_list(self, appliance_id, **kwargs):  # noqa: E501
        """appliances_cameras_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_cameras_list(appliance_id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param page: A page number within the paginated result set.
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedCameraList
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_cameras_list_with_http_info(appliance_id, **kwargs)  # noqa: E501

    def appliances_cameras_list_with_http_info(self, appliance_id, **kwargs):  # noqa: E501
        """appliances_cameras_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_cameras_list_with_http_info(appliance_id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param page: A page number within the paginated result set.
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedCameraList, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'page'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_cameras_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_cameras_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            200: "PaginatedCameraList",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/cameras/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_cameras_partial_update(self, appliance_id, id, **kwargs):  # noqa: E501
        """appliances_cameras_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_cameras_partial_update(appliance_id, id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this camera. (required)
        :type id: int
        :param patched_camera_request:
        :type patched_camera_request: PatchedCameraRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Camera
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_cameras_partial_update_with_http_info(appliance_id, id, **kwargs)  # noqa: E501

    def appliances_cameras_partial_update_with_http_info(self, appliance_id, id, **kwargs):  # noqa: E501
        """appliances_cameras_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_cameras_partial_update_with_http_info(appliance_id, id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this camera. (required)
        :type id: int
        :param patched_camera_request:
        :type patched_camera_request: PatchedCameraRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Camera, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'id',
            'patched_camera_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_cameras_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_cameras_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `appliances_cameras_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'patched_camera_request' in local_var_params:
            body_params = local_var_params['patched_camera_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            200: "Camera",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/cameras/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_cameras_retrieve(self, appliance_id, id, **kwargs):  # noqa: E501
        """appliances_cameras_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_cameras_retrieve(appliance_id, id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this camera. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Camera
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_cameras_retrieve_with_http_info(appliance_id, id, **kwargs)  # noqa: E501

    def appliances_cameras_retrieve_with_http_info(self, appliance_id, id, **kwargs):  # noqa: E501
        """appliances_cameras_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_cameras_retrieve_with_http_info(appliance_id, id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this camera. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Camera, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_cameras_retrieve" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_cameras_retrieve`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `appliances_cameras_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            200: "Camera",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/cameras/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_cameras_update(self, appliance_id, id, camera_request, **kwargs):  # noqa: E501
        """appliances_cameras_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_cameras_update(appliance_id, id, camera_request, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this camera. (required)
        :type id: int
        :param camera_request: (required)
        :type camera_request: CameraRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Camera
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_cameras_update_with_http_info(appliance_id, id, camera_request, **kwargs)  # noqa: E501

    def appliances_cameras_update_with_http_info(self, appliance_id, id, camera_request, **kwargs):  # noqa: E501
        """appliances_cameras_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_cameras_update_with_http_info(appliance_id, id, camera_request, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this camera. (required)
        :type id: int
        :param camera_request: (required)
        :type camera_request: CameraRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Camera, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'id',
            'camera_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_cameras_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_cameras_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `appliances_cameras_update`")  # noqa: E501
        # verify the required parameter 'camera_request' is set
        if self.api_client.client_side_validation and ('camera_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['camera_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `camera_request` when calling `appliances_cameras_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'camera_request' in local_var_params:
            body_params = local_var_params['camera_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            201: "Camera",
            202: "Camera",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/cameras/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_cloud_iot_devices_create(self, appliance_id, cloud_io_t_device_request, **kwargs):  # noqa: E501
        """appliances_cloud_iot_devices_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_cloud_iot_devices_create(appliance_id, cloud_io_t_device_request, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param cloud_io_t_device_request: (required)
        :type cloud_io_t_device_request: CloudIoTDeviceRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CloudIoTDevice
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_cloud_iot_devices_create_with_http_info(appliance_id, cloud_io_t_device_request, **kwargs)  # noqa: E501

    def appliances_cloud_iot_devices_create_with_http_info(self, appliance_id, cloud_io_t_device_request, **kwargs):  # noqa: E501
        """appliances_cloud_iot_devices_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_cloud_iot_devices_create_with_http_info(appliance_id, cloud_io_t_device_request, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param cloud_io_t_device_request: (required)
        :type cloud_io_t_device_request: CloudIoTDeviceRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CloudIoTDevice, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'cloud_io_t_device_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_cloud_iot_devices_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_cloud_iot_devices_create`")  # noqa: E501
        # verify the required parameter 'cloud_io_t_device_request' is set
        if self.api_client.client_side_validation and ('cloud_io_t_device_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['cloud_io_t_device_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cloud_io_t_device_request` when calling `appliances_cloud_iot_devices_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cloud_io_t_device_request' in local_var_params:
            body_params = local_var_params['cloud_io_t_device_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            201: "CloudIoTDevice",
            202: "CloudIoTDevice",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/cloud-iot-devices/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_cloud_iot_devices_list(self, appliance_id, **kwargs):  # noqa: E501
        """appliances_cloud_iot_devices_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_cloud_iot_devices_list(appliance_id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param page: A page number within the paginated result set.
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedCloudIoTDeviceList
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_cloud_iot_devices_list_with_http_info(appliance_id, **kwargs)  # noqa: E501

    def appliances_cloud_iot_devices_list_with_http_info(self, appliance_id, **kwargs):  # noqa: E501
        """appliances_cloud_iot_devices_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_cloud_iot_devices_list_with_http_info(appliance_id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param page: A page number within the paginated result set.
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedCloudIoTDeviceList, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'page'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_cloud_iot_devices_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_cloud_iot_devices_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            200: "PaginatedCloudIoTDeviceList",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/cloud-iot-devices/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_cloud_iot_devices_partial_update(self, appliance_id, id, **kwargs):  # noqa: E501
        """appliances_cloud_iot_devices_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_cloud_iot_devices_partial_update(appliance_id, id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: (required)
        :type id: str
        :param patched_cloud_io_t_device_request:
        :type patched_cloud_io_t_device_request: PatchedCloudIoTDeviceRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CloudIoTDevice
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_cloud_iot_devices_partial_update_with_http_info(appliance_id, id, **kwargs)  # noqa: E501

    def appliances_cloud_iot_devices_partial_update_with_http_info(self, appliance_id, id, **kwargs):  # noqa: E501
        """appliances_cloud_iot_devices_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_cloud_iot_devices_partial_update_with_http_info(appliance_id, id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: (required)
        :type id: str
        :param patched_cloud_io_t_device_request:
        :type patched_cloud_io_t_device_request: PatchedCloudIoTDeviceRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CloudIoTDevice, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'id',
            'patched_cloud_io_t_device_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_cloud_iot_devices_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_cloud_iot_devices_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `appliances_cloud_iot_devices_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'patched_cloud_io_t_device_request' in local_var_params:
            body_params = local_var_params['patched_cloud_io_t_device_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            200: "CloudIoTDevice",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/cloud-iot-devices/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_cloud_iot_devices_retrieve(self, appliance_id, id, **kwargs):  # noqa: E501
        """appliances_cloud_iot_devices_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_cloud_iot_devices_retrieve(appliance_id, id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CloudIoTDevice
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_cloud_iot_devices_retrieve_with_http_info(appliance_id, id, **kwargs)  # noqa: E501

    def appliances_cloud_iot_devices_retrieve_with_http_info(self, appliance_id, id, **kwargs):  # noqa: E501
        """appliances_cloud_iot_devices_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_cloud_iot_devices_retrieve_with_http_info(appliance_id, id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CloudIoTDevice, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_cloud_iot_devices_retrieve" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_cloud_iot_devices_retrieve`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `appliances_cloud_iot_devices_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            200: "CloudIoTDevice",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/cloud-iot-devices/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_cloud_iot_devices_update(self, appliance_id, id, cloud_io_t_device_request, **kwargs):  # noqa: E501
        """appliances_cloud_iot_devices_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_cloud_iot_devices_update(appliance_id, id, cloud_io_t_device_request, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: (required)
        :type id: str
        :param cloud_io_t_device_request: (required)
        :type cloud_io_t_device_request: CloudIoTDeviceRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CloudIoTDevice
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_cloud_iot_devices_update_with_http_info(appliance_id, id, cloud_io_t_device_request, **kwargs)  # noqa: E501

    def appliances_cloud_iot_devices_update_with_http_info(self, appliance_id, id, cloud_io_t_device_request, **kwargs):  # noqa: E501
        """appliances_cloud_iot_devices_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_cloud_iot_devices_update_with_http_info(appliance_id, id, cloud_io_t_device_request, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: (required)
        :type id: str
        :param cloud_io_t_device_request: (required)
        :type cloud_io_t_device_request: CloudIoTDeviceRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CloudIoTDevice, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'id',
            'cloud_io_t_device_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_cloud_iot_devices_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_cloud_iot_devices_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `appliances_cloud_iot_devices_update`")  # noqa: E501
        # verify the required parameter 'cloud_io_t_device_request' is set
        if self.api_client.client_side_validation and ('cloud_io_t_device_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['cloud_io_t_device_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cloud_io_t_device_request` when calling `appliances_cloud_iot_devices_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cloud_io_t_device_request' in local_var_params:
            body_params = local_var_params['cloud_io_t_device_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            201: "CloudIoTDevice",
            202: "CloudIoTDevice",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/cloud-iot-devices/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_create(self, appliance_request, **kwargs):  # noqa: E501
        """appliances_create  # noqa: E501

        All-in-one Print Nanny installation via print-nanny-main-<platform>-<cpu>.img  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_create(appliance_request, async_req=True)
        >>> result = thread.get()

        :param appliance_request: (required)
        :type appliance_request: ApplianceRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Appliance
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_create_with_http_info(appliance_request, **kwargs)  # noqa: E501

    def appliances_create_with_http_info(self, appliance_request, **kwargs):  # noqa: E501
        """appliances_create  # noqa: E501

        All-in-one Print Nanny installation via print-nanny-main-<platform>-<cpu>.img  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_create_with_http_info(appliance_request, async_req=True)
        >>> result = thread.get()

        :param appliance_request: (required)
        :type appliance_request: ApplianceRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Appliance, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_request' is set
        if self.api_client.client_side_validation and ('appliance_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_request` when calling `appliances_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'appliance_request' in local_var_params:
            body_params = local_var_params['appliance_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            201: "Appliance",
            202: "Appliance",
        }

        return self.api_client.call_api(
            '/api/appliances/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_list(self, **kwargs):  # noqa: E501
        """appliances_list  # noqa: E501

        All-in-one Print Nanny installation via print-nanny-main-<platform>-<cpu>.img  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_list(async_req=True)
        >>> result = thread.get()

        :param page: A page number within the paginated result set.
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedApplianceList
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_list_with_http_info(**kwargs)  # noqa: E501

    def appliances_list_with_http_info(self, **kwargs):  # noqa: E501
        """appliances_list  # noqa: E501

        All-in-one Print Nanny installation via print-nanny-main-<platform>-<cpu>.img  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param page: A page number within the paginated result set.
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedApplianceList, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'page'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            200: "PaginatedApplianceList",
        }

        return self.api_client.call_api(
            '/api/appliances/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_partial_update(self, id, **kwargs):  # noqa: E501
        """appliances_partial_update  # noqa: E501

        All-in-one Print Nanny installation via print-nanny-main-<platform>-<cpu>.img  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this appliance. (required)
        :type id: int
        :param patched_appliance_request:
        :type patched_appliance_request: PatchedApplianceRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Appliance
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_partial_update_with_http_info(id, **kwargs)  # noqa: E501

    def appliances_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """appliances_partial_update  # noqa: E501

        All-in-one Print Nanny installation via print-nanny-main-<platform>-<cpu>.img  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this appliance. (required)
        :type id: int
        :param patched_appliance_request:
        :type patched_appliance_request: PatchedApplianceRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Appliance, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'patched_appliance_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `appliances_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'patched_appliance_request' in local_var_params:
            body_params = local_var_params['patched_appliance_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            200: "Appliance",
        }

        return self.api_client.call_api(
            '/api/appliances/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_printer_controllers_create(self, appliance_id, appliance_request, **kwargs):  # noqa: E501
        """appliances_printer_controllers_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_printer_controllers_create(appliance_id, appliance_request, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param appliance_request: (required)
        :type appliance_request: ApplianceRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PrinterController
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_printer_controllers_create_with_http_info(appliance_id, appliance_request, **kwargs)  # noqa: E501

    def appliances_printer_controllers_create_with_http_info(self, appliance_id, appliance_request, **kwargs):  # noqa: E501
        """appliances_printer_controllers_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_printer_controllers_create_with_http_info(appliance_id, appliance_request, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param appliance_request: (required)
        :type appliance_request: ApplianceRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PrinterController, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'appliance_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_printer_controllers_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_printer_controllers_create`")  # noqa: E501
        # verify the required parameter 'appliance_request' is set
        if self.api_client.client_side_validation and ('appliance_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_request` when calling `appliances_printer_controllers_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'appliance_request' in local_var_params:
            body_params = local_var_params['appliance_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            201: "PrinterController",
            202: "PrinterController",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/printer-controllers/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_printer_controllers_list(self, appliance_id, **kwargs):  # noqa: E501
        """appliances_printer_controllers_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_printer_controllers_list(appliance_id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param page: A page number within the paginated result set.
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedPrinterControllerList
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_printer_controllers_list_with_http_info(appliance_id, **kwargs)  # noqa: E501

    def appliances_printer_controllers_list_with_http_info(self, appliance_id, **kwargs):  # noqa: E501
        """appliances_printer_controllers_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_printer_controllers_list_with_http_info(appliance_id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param page: A page number within the paginated result set.
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedPrinterControllerList, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'page'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_printer_controllers_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_printer_controllers_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            200: "PaginatedPrinterControllerList",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/printer-controllers/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_printer_controllers_partial_update(self, appliance_id, id, **kwargs):  # noqa: E501
        """appliances_printer_controllers_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_printer_controllers_partial_update(appliance_id, id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this printer controller. (required)
        :type id: int
        :param patched_printer_controller_request:
        :type patched_printer_controller_request: PatchedPrinterControllerRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PrinterController
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_printer_controllers_partial_update_with_http_info(appliance_id, id, **kwargs)  # noqa: E501

    def appliances_printer_controllers_partial_update_with_http_info(self, appliance_id, id, **kwargs):  # noqa: E501
        """appliances_printer_controllers_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_printer_controllers_partial_update_with_http_info(appliance_id, id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this printer controller. (required)
        :type id: int
        :param patched_printer_controller_request:
        :type patched_printer_controller_request: PatchedPrinterControllerRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PrinterController, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'id',
            'patched_printer_controller_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_printer_controllers_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_printer_controllers_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `appliances_printer_controllers_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'patched_printer_controller_request' in local_var_params:
            body_params = local_var_params['patched_printer_controller_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            200: "PrinterController",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/printer-controllers/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_printer_controllers_retrieve(self, appliance_id, id, **kwargs):  # noqa: E501
        """appliances_printer_controllers_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_printer_controllers_retrieve(appliance_id, id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this printer controller. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PrinterController
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_printer_controllers_retrieve_with_http_info(appliance_id, id, **kwargs)  # noqa: E501

    def appliances_printer_controllers_retrieve_with_http_info(self, appliance_id, id, **kwargs):  # noqa: E501
        """appliances_printer_controllers_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_printer_controllers_retrieve_with_http_info(appliance_id, id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this printer controller. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PrinterController, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_printer_controllers_retrieve" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_printer_controllers_retrieve`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `appliances_printer_controllers_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            200: "PrinterController",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/printer-controllers/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_printer_controllers_update(self, appliance_id, id, appliance_request, **kwargs):  # noqa: E501
        """appliances_printer_controllers_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_printer_controllers_update(appliance_id, id, appliance_request, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this printer controller. (required)
        :type id: int
        :param appliance_request: (required)
        :type appliance_request: ApplianceRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PrinterController
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_printer_controllers_update_with_http_info(appliance_id, id, appliance_request, **kwargs)  # noqa: E501

    def appliances_printer_controllers_update_with_http_info(self, appliance_id, id, appliance_request, **kwargs):  # noqa: E501
        """appliances_printer_controllers_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_printer_controllers_update_with_http_info(appliance_id, id, appliance_request, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this printer controller. (required)
        :type id: int
        :param appliance_request: (required)
        :type appliance_request: ApplianceRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PrinterController, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'id',
            'appliance_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_printer_controllers_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_printer_controllers_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `appliances_printer_controllers_update`")  # noqa: E501
        # verify the required parameter 'appliance_request' is set
        if self.api_client.client_side_validation and ('appliance_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_request` when calling `appliances_printer_controllers_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'appliance_request' in local_var_params:
            body_params = local_var_params['appliance_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            201: "PrinterController",
            202: "PrinterController",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/printer-controllers/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_public_keys_create(self, appliance_id, appliance_public_key_request, **kwargs):  # noqa: E501
        """appliances_public_keys_create  # noqa: E501

        Public key for Print Nanny Appliance Only one public key may be active at a time DELETE <:endpoint> will soft-delete a key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_public_keys_create(appliance_id, appliance_public_key_request, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param appliance_public_key_request: (required)
        :type appliance_public_key_request: AppliancePublicKeyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AppliancePublicKey
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_public_keys_create_with_http_info(appliance_id, appliance_public_key_request, **kwargs)  # noqa: E501

    def appliances_public_keys_create_with_http_info(self, appliance_id, appliance_public_key_request, **kwargs):  # noqa: E501
        """appliances_public_keys_create  # noqa: E501

        Public key for Print Nanny Appliance Only one public key may be active at a time DELETE <:endpoint> will soft-delete a key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_public_keys_create_with_http_info(appliance_id, appliance_public_key_request, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param appliance_public_key_request: (required)
        :type appliance_public_key_request: AppliancePublicKeyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AppliancePublicKey, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'appliance_public_key_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_public_keys_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_public_keys_create`")  # noqa: E501
        # verify the required parameter 'appliance_public_key_request' is set
        if self.api_client.client_side_validation and ('appliance_public_key_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_public_key_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_public_key_request` when calling `appliances_public_keys_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'appliance_public_key_request' in local_var_params:
            body_params = local_var_params['appliance_public_key_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            201: "AppliancePublicKey",
            202: "AppliancePublicKey",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/public-keys/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_public_keys_list(self, appliance_id, **kwargs):  # noqa: E501
        """appliances_public_keys_list  # noqa: E501

        Public key for Print Nanny Appliance Only one public key may be active at a time DELETE <:endpoint> will soft-delete a key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_public_keys_list(appliance_id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param page: A page number within the paginated result set.
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedAppliancePublicKeyList
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_public_keys_list_with_http_info(appliance_id, **kwargs)  # noqa: E501

    def appliances_public_keys_list_with_http_info(self, appliance_id, **kwargs):  # noqa: E501
        """appliances_public_keys_list  # noqa: E501

        Public key for Print Nanny Appliance Only one public key may be active at a time DELETE <:endpoint> will soft-delete a key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_public_keys_list_with_http_info(appliance_id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param page: A page number within the paginated result set.
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedAppliancePublicKeyList, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'page'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_public_keys_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_public_keys_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            200: "PaginatedAppliancePublicKeyList",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/public-keys/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_public_keys_partial_update(self, appliance_id, id, **kwargs):  # noqa: E501
        """appliances_public_keys_partial_update  # noqa: E501

        Public key for Print Nanny Appliance Only one public key may be active at a time DELETE <:endpoint> will soft-delete a key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_public_keys_partial_update(appliance_id, id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this appliance public key. (required)
        :type id: int
        :param patched_appliance_public_key_request:
        :type patched_appliance_public_key_request: PatchedAppliancePublicKeyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AppliancePublicKey
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_public_keys_partial_update_with_http_info(appliance_id, id, **kwargs)  # noqa: E501

    def appliances_public_keys_partial_update_with_http_info(self, appliance_id, id, **kwargs):  # noqa: E501
        """appliances_public_keys_partial_update  # noqa: E501

        Public key for Print Nanny Appliance Only one public key may be active at a time DELETE <:endpoint> will soft-delete a key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_public_keys_partial_update_with_http_info(appliance_id, id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this appliance public key. (required)
        :type id: int
        :param patched_appliance_public_key_request:
        :type patched_appliance_public_key_request: PatchedAppliancePublicKeyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AppliancePublicKey, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'id',
            'patched_appliance_public_key_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_public_keys_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_public_keys_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `appliances_public_keys_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'patched_appliance_public_key_request' in local_var_params:
            body_params = local_var_params['patched_appliance_public_key_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            200: "AppliancePublicKey",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/public-keys/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_public_keys_retrieve(self, appliance_id, id, **kwargs):  # noqa: E501
        """appliances_public_keys_retrieve  # noqa: E501

        Public key for Print Nanny Appliance Only one public key may be active at a time DELETE <:endpoint> will soft-delete a key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_public_keys_retrieve(appliance_id, id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this appliance public key. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AppliancePublicKey
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_public_keys_retrieve_with_http_info(appliance_id, id, **kwargs)  # noqa: E501

    def appliances_public_keys_retrieve_with_http_info(self, appliance_id, id, **kwargs):  # noqa: E501
        """appliances_public_keys_retrieve  # noqa: E501

        Public key for Print Nanny Appliance Only one public key may be active at a time DELETE <:endpoint> will soft-delete a key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_public_keys_retrieve_with_http_info(appliance_id, id, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this appliance public key. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AppliancePublicKey, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_public_keys_retrieve" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_public_keys_retrieve`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `appliances_public_keys_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            200: "AppliancePublicKey",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/public-keys/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_public_keys_update(self, appliance_id, id, appliance_public_key_request, **kwargs):  # noqa: E501
        """appliances_public_keys_update  # noqa: E501

        Public key for Print Nanny Appliance Only one public key may be active at a time DELETE <:endpoint> will soft-delete a key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_public_keys_update(appliance_id, id, appliance_public_key_request, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this appliance public key. (required)
        :type id: int
        :param appliance_public_key_request: (required)
        :type appliance_public_key_request: AppliancePublicKeyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AppliancePublicKey
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_public_keys_update_with_http_info(appliance_id, id, appliance_public_key_request, **kwargs)  # noqa: E501

    def appliances_public_keys_update_with_http_info(self, appliance_id, id, appliance_public_key_request, **kwargs):  # noqa: E501
        """appliances_public_keys_update  # noqa: E501

        Public key for Print Nanny Appliance Only one public key may be active at a time DELETE <:endpoint> will soft-delete a key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_public_keys_update_with_http_info(appliance_id, id, appliance_public_key_request, async_req=True)
        >>> result = thread.get()

        :param appliance_id: (required)
        :type appliance_id: int
        :param id: A unique integer value identifying this appliance public key. (required)
        :type id: int
        :param appliance_public_key_request: (required)
        :type appliance_public_key_request: AppliancePublicKeyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AppliancePublicKey, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'appliance_id',
            'id',
            'appliance_public_key_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_public_keys_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'appliance_id' is set
        if self.api_client.client_side_validation and ('appliance_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_id` when calling `appliances_public_keys_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `appliances_public_keys_update`")  # noqa: E501
        # verify the required parameter 'appliance_public_key_request' is set
        if self.api_client.client_side_validation and ('appliance_public_key_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_public_key_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_public_key_request` when calling `appliances_public_keys_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appliance_id' in local_var_params:
            path_params['appliance_id'] = local_var_params['appliance_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'appliance_public_key_request' in local_var_params:
            body_params = local_var_params['appliance_public_key_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            201: "AppliancePublicKey",
            202: "AppliancePublicKey",
        }

        return self.api_client.call_api(
            '/api/appliances/{appliance_id}/public-keys/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_retrieve(self, hostname, **kwargs):  # noqa: E501
        """appliances_retrieve  # noqa: E501

        All-in-one Print Nanny installation via print-nanny-main-<platform>-<cpu>.img  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_retrieve(hostname, async_req=True)
        >>> result = thread.get()

        :param hostname: (required)
        :type hostname: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Appliance
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_retrieve_with_http_info(hostname, **kwargs)  # noqa: E501

    def appliances_retrieve_with_http_info(self, hostname, **kwargs):  # noqa: E501
        """appliances_retrieve  # noqa: E501

        All-in-one Print Nanny installation via print-nanny-main-<platform>-<cpu>.img  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_retrieve_with_http_info(hostname, async_req=True)
        >>> result = thread.get()

        :param hostname: (required)
        :type hostname: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Appliance, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'hostname'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_retrieve" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'hostname' is set
        if self.api_client.client_side_validation and ('hostname' not in local_var_params or  # noqa: E501
                                                        local_var_params['hostname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `hostname` when calling `appliances_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hostname' in local_var_params:
            path_params['hostname'] = local_var_params['hostname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            200: "Appliance",
        }

        return self.api_client.call_api(
            '/api/appliances/{hostname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_retrieve2(self, id, **kwargs):  # noqa: E501
        """appliances_retrieve2  # noqa: E501

        All-in-one Print Nanny installation via print-nanny-main-<platform>-<cpu>.img  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_retrieve2(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this appliance. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Appliance
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_retrieve2_with_http_info(id, **kwargs)  # noqa: E501

    def appliances_retrieve2_with_http_info(self, id, **kwargs):  # noqa: E501
        """appliances_retrieve2  # noqa: E501

        All-in-one Print Nanny installation via print-nanny-main-<platform>-<cpu>.img  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_retrieve2_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this appliance. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Appliance, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_retrieve2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `appliances_retrieve2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            200: "Appliance",
        }

        return self.api_client.call_api(
            '/api/appliances/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def appliances_update(self, id, appliance_request, **kwargs):  # noqa: E501
        """appliances_update  # noqa: E501

        All-in-one Print Nanny installation via print-nanny-main-<platform>-<cpu>.img  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_update(id, appliance_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this appliance. (required)
        :type id: int
        :param appliance_request: (required)
        :type appliance_request: ApplianceRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Appliance
        """
        kwargs['_return_http_data_only'] = True
        return self.appliances_update_with_http_info(id, appliance_request, **kwargs)  # noqa: E501

    def appliances_update_with_http_info(self, id, appliance_request, **kwargs):  # noqa: E501
        """appliances_update  # noqa: E501

        All-in-one Print Nanny installation via print-nanny-main-<platform>-<cpu>.img  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.appliances_update_with_http_info(id, appliance_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this appliance. (required)
        :type id: int
        :param appliance_request: (required)
        :type appliance_request: ApplianceRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Appliance, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'appliance_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appliances_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `appliances_update`")  # noqa: E501
        # verify the required parameter 'appliance_request' is set
        if self.api_client.client_side_validation and ('appliance_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['appliance_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `appliance_request` when calling `appliances_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'appliance_request' in local_var_params:
            body_params = local_var_params['appliance_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        response_types_map = {
            201: "Appliance",
            202: "Appliance",
        }

        return self.api_client.call_api(
            '/api/appliances/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
