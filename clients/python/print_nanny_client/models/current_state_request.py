# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Contact: leigh@bitsy.ai
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from print_nanny_client.configuration import Configuration


class CurrentStateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ansible_state': 'AnsibleStateEnum',
        'ansible_facts': 'dict(str, object)',
        'ansible_extra_vars': 'dict(str, object)',
        'release_channel': 'ReleaseChannelEnum',
        'device': 'int'
    }

    attribute_map = {
        'ansible_state': 'ansible_state',
        'ansible_facts': 'ansible_facts',
        'ansible_extra_vars': 'ansible_extra_vars',
        'release_channel': 'release_channel',
        'device': 'device'
    }

    def __init__(self, ansible_state=None, ansible_facts=None, ansible_extra_vars=None, release_channel=None, device=None, local_vars_configuration=None):  # noqa: E501
        """CurrentStateRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._ansible_state = None
        self._ansible_facts = None
        self._ansible_extra_vars = None
        self._release_channel = None
        self._device = None
        self.discriminator = None

        if ansible_state is not None:
            self.ansible_state = ansible_state
        if ansible_facts is not None:
            self.ansible_facts = ansible_facts
        if ansible_extra_vars is not None:
            self.ansible_extra_vars = ansible_extra_vars
        if release_channel is not None:
            self.release_channel = release_channel
        self.device = device

    @property
    def ansible_state(self):
        """Gets the ansible_state of this CurrentStateRequest.  # noqa: E501


        :return: The ansible_state of this CurrentStateRequest.  # noqa: E501
        :rtype: AnsibleStateEnum
        """
        return self._ansible_state

    @ansible_state.setter
    def ansible_state(self, ansible_state):
        """Sets the ansible_state of this CurrentStateRequest.


        :param ansible_state: The ansible_state of this CurrentStateRequest.  # noqa: E501
        :type ansible_state: AnsibleStateEnum
        """

        self._ansible_state = ansible_state

    @property
    def ansible_facts(self):
        """Gets the ansible_facts of this CurrentStateRequest.  # noqa: E501


        :return: The ansible_facts of this CurrentStateRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._ansible_facts

    @ansible_facts.setter
    def ansible_facts(self, ansible_facts):
        """Sets the ansible_facts of this CurrentStateRequest.


        :param ansible_facts: The ansible_facts of this CurrentStateRequest.  # noqa: E501
        :type ansible_facts: dict(str, object)
        """

        self._ansible_facts = ansible_facts

    @property
    def ansible_extra_vars(self):
        """Gets the ansible_extra_vars of this CurrentStateRequest.  # noqa: E501


        :return: The ansible_extra_vars of this CurrentStateRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._ansible_extra_vars

    @ansible_extra_vars.setter
    def ansible_extra_vars(self, ansible_extra_vars):
        """Sets the ansible_extra_vars of this CurrentStateRequest.


        :param ansible_extra_vars: The ansible_extra_vars of this CurrentStateRequest.  # noqa: E501
        :type ansible_extra_vars: dict(str, object)
        """

        self._ansible_extra_vars = ansible_extra_vars

    @property
    def release_channel(self):
        """Gets the release_channel of this CurrentStateRequest.  # noqa: E501


        :return: The release_channel of this CurrentStateRequest.  # noqa: E501
        :rtype: ReleaseChannelEnum
        """
        return self._release_channel

    @release_channel.setter
    def release_channel(self, release_channel):
        """Sets the release_channel of this CurrentStateRequest.


        :param release_channel: The release_channel of this CurrentStateRequest.  # noqa: E501
        :type release_channel: ReleaseChannelEnum
        """

        self._release_channel = release_channel

    @property
    def device(self):
        """Gets the device of this CurrentStateRequest.  # noqa: E501


        :return: The device of this CurrentStateRequest.  # noqa: E501
        :rtype: int
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this CurrentStateRequest.


        :param device: The device of this CurrentStateRequest.  # noqa: E501
        :type device: int
        """
        if self.local_vars_configuration.client_side_validation and device is None:  # noqa: E501
            raise ValueError("Invalid value for `device`, must not be `None`")  # noqa: E501

        self._device = device

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrentStateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CurrentStateRequest):
            return True

        return self.to_dict() != other.to_dict()
