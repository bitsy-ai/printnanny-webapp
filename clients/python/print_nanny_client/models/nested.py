# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Contact: leigh@bitsy.ai
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from print_nanny_client.configuration import Configuration


class Nested(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'created_dt': 'datetime',
        'active': 'bool',
        'name': 'str',
        'hypothesis': 'str',
        'notion_url': 'str',
        'control': 'int',
        'treatments': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'created_dt': 'created_dt',
        'active': 'active',
        'name': 'name',
        'hypothesis': 'hypothesis',
        'notion_url': 'notion_url',
        'control': 'control',
        'treatments': 'treatments'
    }

    def __init__(self, id=None, created_dt=None, active=None, name=None, hypothesis=None, notion_url=None, control=None, treatments=None, local_vars_configuration=None):  # noqa: E501
        """Nested - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._created_dt = None
        self._active = None
        self._name = None
        self._hypothesis = None
        self._notion_url = None
        self._control = None
        self._treatments = None
        self.discriminator = None

        self.id = id
        self.created_dt = created_dt
        if active is not None:
            self.active = active
        self.name = name
        self.hypothesis = hypothesis
        self.notion_url = notion_url
        self.control = control
        if treatments is not None:
            self.treatments = treatments

    @property
    def id(self):
        """Gets the id of this Nested.  # noqa: E501


        :return: The id of this Nested.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Nested.


        :param id: The id of this Nested.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_dt(self):
        """Gets the created_dt of this Nested.  # noqa: E501


        :return: The created_dt of this Nested.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this Nested.


        :param created_dt: The created_dt of this Nested.  # noqa: E501
        :type created_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `created_dt`, must not be `None`")  # noqa: E501

        self._created_dt = created_dt

    @property
    def active(self):
        """Gets the active of this Nested.  # noqa: E501


        :return: The active of this Nested.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Nested.


        :param active: The active of this Nested.  # noqa: E501
        :type active: bool
        """

        self._active = active

    @property
    def name(self):
        """Gets the name of this Nested.  # noqa: E501


        :return: The name of this Nested.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Nested.


        :param name: The name of this Nested.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def hypothesis(self):
        """Gets the hypothesis of this Nested.  # noqa: E501


        :return: The hypothesis of this Nested.  # noqa: E501
        :rtype: str
        """
        return self._hypothesis

    @hypothesis.setter
    def hypothesis(self, hypothesis):
        """Sets the hypothesis of this Nested.


        :param hypothesis: The hypothesis of this Nested.  # noqa: E501
        :type hypothesis: str
        """
        if self.local_vars_configuration.client_side_validation and hypothesis is None:  # noqa: E501
            raise ValueError("Invalid value for `hypothesis`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                hypothesis is not None and len(hypothesis) > 255):
            raise ValueError("Invalid value for `hypothesis`, length must be less than or equal to `255`")  # noqa: E501

        self._hypothesis = hypothesis

    @property
    def notion_url(self):
        """Gets the notion_url of this Nested.  # noqa: E501


        :return: The notion_url of this Nested.  # noqa: E501
        :rtype: str
        """
        return self._notion_url

    @notion_url.setter
    def notion_url(self, notion_url):
        """Sets the notion_url of this Nested.


        :param notion_url: The notion_url of this Nested.  # noqa: E501
        :type notion_url: str
        """
        if (self.local_vars_configuration.client_side_validation and
                notion_url is not None and len(notion_url) > 255):
            raise ValueError("Invalid value for `notion_url`, length must be less than or equal to `255`")  # noqa: E501

        self._notion_url = notion_url

    @property
    def control(self):
        """Gets the control of this Nested.  # noqa: E501


        :return: The control of this Nested.  # noqa: E501
        :rtype: int
        """
        return self._control

    @control.setter
    def control(self, control):
        """Sets the control of this Nested.


        :param control: The control of this Nested.  # noqa: E501
        :type control: int
        """
        if self.local_vars_configuration.client_side_validation and control is None:  # noqa: E501
            raise ValueError("Invalid value for `control`, must not be `None`")  # noqa: E501

        self._control = control

    @property
    def treatments(self):
        """Gets the treatments of this Nested.  # noqa: E501


        :return: The treatments of this Nested.  # noqa: E501
        :rtype: list[int]
        """
        return self._treatments

    @treatments.setter
    def treatments(self, treatments):
        """Sets the treatments of this Nested.


        :param treatments: The treatments of this Nested.  # noqa: E501
        :type treatments: list[int]
        """

        self._treatments = treatments

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Nested):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Nested):
            return True

        return self.to_dict() != other.to_dict()
