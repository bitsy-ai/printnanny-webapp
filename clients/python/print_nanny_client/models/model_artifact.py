# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Contact: leigh@bitsy.ai
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from print_nanny_client.configuration import Configuration


class ModelArtifact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'created_dt': 'datetime',
        'version': 'str',
        'labels': 'str',
        'artifacts': 'str',
        'artifact_types': 'list[ArtifactTypesEnum]',
        'metadata': 'dict(str, object)',
        'url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_dt': 'created_dt',
        'version': 'version',
        'labels': 'labels',
        'artifacts': 'artifacts',
        'artifact_types': 'artifact_types',
        'metadata': 'metadata',
        'url': 'url'
    }

    def __init__(self, id=None, created_dt=None, version=None, labels=None, artifacts=None, artifact_types=None, metadata=None, url=None, local_vars_configuration=None):  # noqa: E501
        """ModelArtifact - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._created_dt = None
        self._version = None
        self._labels = None
        self._artifacts = None
        self._artifact_types = None
        self._metadata = None
        self._url = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_dt is not None:
            self.created_dt = created_dt
        if version is not None:
            self.version = version
        if labels is not None:
            self.labels = labels
        if artifacts is not None:
            self.artifacts = artifacts
        if artifact_types is not None:
            self.artifact_types = artifact_types
        if metadata is not None:
            self.metadata = metadata
        if url is not None:
            self.url = url

    @property
    def id(self):
        """Gets the id of this ModelArtifact.  # noqa: E501


        :return: The id of this ModelArtifact.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelArtifact.


        :param id: The id of this ModelArtifact.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def created_dt(self):
        """Gets the created_dt of this ModelArtifact.  # noqa: E501


        :return: The created_dt of this ModelArtifact.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ModelArtifact.


        :param created_dt: The created_dt of this ModelArtifact.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def version(self):
        """Gets the version of this ModelArtifact.  # noqa: E501


        :return: The version of this ModelArtifact.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ModelArtifact.


        :param version: The version of this ModelArtifact.  # noqa: E501
        :type version: str
        """

        self._version = version

    @property
    def labels(self):
        """Gets the labels of this ModelArtifact.  # noqa: E501


        :return: The labels of this ModelArtifact.  # noqa: E501
        :rtype: str
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ModelArtifact.


        :param labels: The labels of this ModelArtifact.  # noqa: E501
        :type labels: str
        """

        self._labels = labels

    @property
    def artifacts(self):
        """Gets the artifacts of this ModelArtifact.  # noqa: E501


        :return: The artifacts of this ModelArtifact.  # noqa: E501
        :rtype: str
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this ModelArtifact.


        :param artifacts: The artifacts of this ModelArtifact.  # noqa: E501
        :type artifacts: str
        """

        self._artifacts = artifacts

    @property
    def artifact_types(self):
        """Gets the artifact_types of this ModelArtifact.  # noqa: E501


        :return: The artifact_types of this ModelArtifact.  # noqa: E501
        :rtype: list[ArtifactTypesEnum]
        """
        return self._artifact_types

    @artifact_types.setter
    def artifact_types(self, artifact_types):
        """Sets the artifact_types of this ModelArtifact.


        :param artifact_types: The artifact_types of this ModelArtifact.  # noqa: E501
        :type artifact_types: list[ArtifactTypesEnum]
        """

        self._artifact_types = artifact_types

    @property
    def metadata(self):
        """Gets the metadata of this ModelArtifact.  # noqa: E501


        :return: The metadata of this ModelArtifact.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ModelArtifact.


        :param metadata: The metadata of this ModelArtifact.  # noqa: E501
        :type metadata: dict(str, object)
        """

        self._metadata = metadata

    @property
    def url(self):
        """Gets the url of this ModelArtifact.  # noqa: E501


        :return: The url of this ModelArtifact.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ModelArtifact.


        :param url: The url of this ModelArtifact.  # noqa: E501
        :type url: str
        """

        self._url = url

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelArtifact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelArtifact):
            return True

        return self.to_dict() != other.to_dict()
