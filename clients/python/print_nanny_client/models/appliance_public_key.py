# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Contact: leigh@bitsy.ai
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from print_nanny_client.configuration import Configuration


class AppliancePublicKey(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'user': 'str',
        'appliance': 'int',
        'deleted': 'datetime',
        'public_key': 'str',
        'public_key_checksum': 'str',
        'fingerprint': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user': 'user',
        'appliance': 'appliance',
        'deleted': 'deleted',
        'public_key': 'public_key',
        'public_key_checksum': 'public_key_checksum',
        'fingerprint': 'fingerprint'
    }

    def __init__(self, id=None, user=None, appliance=None, deleted=None, public_key=None, public_key_checksum=None, fingerprint=None, local_vars_configuration=None):  # noqa: E501
        """AppliancePublicKey - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._user = None
        self._appliance = None
        self._deleted = None
        self._public_key = None
        self._public_key_checksum = None
        self._fingerprint = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user is not None:
            self.user = user
        if appliance is not None:
            self.appliance = appliance
        if deleted is not None:
            self.deleted = deleted
        if public_key is not None:
            self.public_key = public_key
        if public_key_checksum is not None:
            self.public_key_checksum = public_key_checksum
        if fingerprint is not None:
            self.fingerprint = fingerprint

    @property
    def id(self):
        """Gets the id of this AppliancePublicKey.  # noqa: E501


        :return: The id of this AppliancePublicKey.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppliancePublicKey.


        :param id: The id of this AppliancePublicKey.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def user(self):
        """Gets the user of this AppliancePublicKey.  # noqa: E501


        :return: The user of this AppliancePublicKey.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AppliancePublicKey.


        :param user: The user of this AppliancePublicKey.  # noqa: E501
        :type user: str
        """

        self._user = user

    @property
    def appliance(self):
        """Gets the appliance of this AppliancePublicKey.  # noqa: E501


        :return: The appliance of this AppliancePublicKey.  # noqa: E501
        :rtype: int
        """
        return self._appliance

    @appliance.setter
    def appliance(self, appliance):
        """Sets the appliance of this AppliancePublicKey.


        :param appliance: The appliance of this AppliancePublicKey.  # noqa: E501
        :type appliance: int
        """

        self._appliance = appliance

    @property
    def deleted(self):
        """Gets the deleted of this AppliancePublicKey.  # noqa: E501


        :return: The deleted of this AppliancePublicKey.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this AppliancePublicKey.


        :param deleted: The deleted of this AppliancePublicKey.  # noqa: E501
        :type deleted: datetime
        """

        self._deleted = deleted

    @property
    def public_key(self):
        """Gets the public_key of this AppliancePublicKey.  # noqa: E501


        :return: The public_key of this AppliancePublicKey.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this AppliancePublicKey.


        :param public_key: The public_key of this AppliancePublicKey.  # noqa: E501
        :type public_key: str
        """

        self._public_key = public_key

    @property
    def public_key_checksum(self):
        """Gets the public_key_checksum of this AppliancePublicKey.  # noqa: E501


        :return: The public_key_checksum of this AppliancePublicKey.  # noqa: E501
        :rtype: str
        """
        return self._public_key_checksum

    @public_key_checksum.setter
    def public_key_checksum(self, public_key_checksum):
        """Sets the public_key_checksum of this AppliancePublicKey.


        :param public_key_checksum: The public_key_checksum of this AppliancePublicKey.  # noqa: E501
        :type public_key_checksum: str
        """

        self._public_key_checksum = public_key_checksum

    @property
    def fingerprint(self):
        """Gets the fingerprint of this AppliancePublicKey.  # noqa: E501


        :return: The fingerprint of this AppliancePublicKey.  # noqa: E501
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this AppliancePublicKey.


        :param fingerprint: The fingerprint of this AppliancePublicKey.  # noqa: E501
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppliancePublicKey):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppliancePublicKey):
            return True

        return self.to_dict() != other.to_dict()
