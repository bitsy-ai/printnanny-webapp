# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Contact: leigh@bitsy.ai
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from print_nanny_client.configuration import Configuration


class DeviceCalibration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'created_dt': 'datetime',
        'updated_dt': 'datetime',
        'octoprint_device': 'int',
        'fps': 'float',
        'xy': 'dict(str, object)',
        'height': 'int',
        'width': 'int',
        'url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_dt': 'created_dt',
        'updated_dt': 'updated_dt',
        'octoprint_device': 'octoprint_device',
        'fps': 'fps',
        'xy': 'xy',
        'height': 'height',
        'width': 'width',
        'url': 'url'
    }

    def __init__(self, id=None, created_dt=None, updated_dt=None, octoprint_device=None, fps=None, xy=None, height=None, width=None, url=None, local_vars_configuration=None):  # noqa: E501
        """DeviceCalibration - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._created_dt = None
        self._updated_dt = None
        self._octoprint_device = None
        self._fps = None
        self._xy = None
        self._height = None
        self._width = None
        self._url = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_dt is not None:
            self.created_dt = created_dt
        if updated_dt is not None:
            self.updated_dt = updated_dt
        self.octoprint_device = octoprint_device
        if fps is not None:
            self.fps = fps
        self.xy = xy
        if height is not None:
            self.height = height
        if width is not None:
            self.width = width
        if url is not None:
            self.url = url

    @property
    def id(self):
        """Gets the id of this DeviceCalibration.  # noqa: E501


        :return: The id of this DeviceCalibration.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceCalibration.


        :param id: The id of this DeviceCalibration.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def created_dt(self):
        """Gets the created_dt of this DeviceCalibration.  # noqa: E501


        :return: The created_dt of this DeviceCalibration.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this DeviceCalibration.


        :param created_dt: The created_dt of this DeviceCalibration.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def updated_dt(self):
        """Gets the updated_dt of this DeviceCalibration.  # noqa: E501


        :return: The updated_dt of this DeviceCalibration.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this DeviceCalibration.


        :param updated_dt: The updated_dt of this DeviceCalibration.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    @property
    def octoprint_device(self):
        """Gets the octoprint_device of this DeviceCalibration.  # noqa: E501


        :return: The octoprint_device of this DeviceCalibration.  # noqa: E501
        :rtype: int
        """
        return self._octoprint_device

    @octoprint_device.setter
    def octoprint_device(self, octoprint_device):
        """Sets the octoprint_device of this DeviceCalibration.


        :param octoprint_device: The octoprint_device of this DeviceCalibration.  # noqa: E501
        :type octoprint_device: int
        """
        if self.local_vars_configuration.client_side_validation and octoprint_device is None:  # noqa: E501
            raise ValueError("Invalid value for `octoprint_device`, must not be `None`")  # noqa: E501

        self._octoprint_device = octoprint_device

    @property
    def fps(self):
        """Gets the fps of this DeviceCalibration.  # noqa: E501


        :return: The fps of this DeviceCalibration.  # noqa: E501
        :rtype: float
        """
        return self._fps

    @fps.setter
    def fps(self, fps):
        """Sets the fps of this DeviceCalibration.


        :param fps: The fps of this DeviceCalibration.  # noqa: E501
        :type fps: float
        """

        self._fps = fps

    @property
    def xy(self):
        """Gets the xy of this DeviceCalibration.  # noqa: E501


        :return: The xy of this DeviceCalibration.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._xy

    @xy.setter
    def xy(self, xy):
        """Sets the xy of this DeviceCalibration.


        :param xy: The xy of this DeviceCalibration.  # noqa: E501
        :type xy: dict(str, object)
        """

        self._xy = xy

    @property
    def height(self):
        """Gets the height of this DeviceCalibration.  # noqa: E501


        :return: The height of this DeviceCalibration.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this DeviceCalibration.


        :param height: The height of this DeviceCalibration.  # noqa: E501
        :type height: int
        """
        if (self.local_vars_configuration.client_side_validation and
                height is not None and height > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `height`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                height is not None and height < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `height`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._height = height

    @property
    def width(self):
        """Gets the width of this DeviceCalibration.  # noqa: E501


        :return: The width of this DeviceCalibration.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this DeviceCalibration.


        :param width: The width of this DeviceCalibration.  # noqa: E501
        :type width: int
        """
        if (self.local_vars_configuration.client_side_validation and
                width is not None and width > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `width`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                width is not None and width < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `width`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._width = width

    @property
    def url(self):
        """Gets the url of this DeviceCalibration.  # noqa: E501


        :return: The url of this DeviceCalibration.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DeviceCalibration.


        :param url: The url of this DeviceCalibration.  # noqa: E501
        :type url: str
        """

        self._url = url

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceCalibration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceCalibration):
            return True

        return self.to_dict() != other.to_dict()
