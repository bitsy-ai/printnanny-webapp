# coding: utf-8

"""
    printnanny-api-client

    Official API client library for print-nanny.com  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Contact: leigh@print-nanny.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from printnanny_api_client.configuration import Configuration


class LicenseCredentials(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'printnanny_api_token': 'str',
        'printnanny_api_url': 'str',
        'honeycomb_dataset': 'str',
        'honeycomb_api_key': 'str'
    }

    attribute_map = {
        'printnanny_api_token': 'printnanny_api_token',
        'printnanny_api_url': 'printnanny_api_url',
        'honeycomb_dataset': 'honeycomb_dataset',
        'honeycomb_api_key': 'honeycomb_api_key'
    }

    def __init__(self, printnanny_api_token=None, printnanny_api_url=None, honeycomb_dataset=None, honeycomb_api_key=None, local_vars_configuration=None):  # noqa: E501
        """LicenseCredentials - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._printnanny_api_token = None
        self._printnanny_api_url = None
        self._honeycomb_dataset = None
        self._honeycomb_api_key = None
        self.discriminator = None

        if printnanny_api_token is not None:
            self.printnanny_api_token = printnanny_api_token
        if printnanny_api_url is not None:
            self.printnanny_api_url = printnanny_api_url
        if honeycomb_dataset is not None:
            self.honeycomb_dataset = honeycomb_dataset
        if honeycomb_api_key is not None:
            self.honeycomb_api_key = honeycomb_api_key

    @property
    def printnanny_api_token(self):
        """Gets the printnanny_api_token of this LicenseCredentials.  # noqa: E501


        :return: The printnanny_api_token of this LicenseCredentials.  # noqa: E501
        :rtype: str
        """
        return self._printnanny_api_token

    @printnanny_api_token.setter
    def printnanny_api_token(self, printnanny_api_token):
        """Sets the printnanny_api_token of this LicenseCredentials.


        :param printnanny_api_token: The printnanny_api_token of this LicenseCredentials.  # noqa: E501
        :type printnanny_api_token: str
        """

        self._printnanny_api_token = printnanny_api_token

    @property
    def printnanny_api_url(self):
        """Gets the printnanny_api_url of this LicenseCredentials.  # noqa: E501


        :return: The printnanny_api_url of this LicenseCredentials.  # noqa: E501
        :rtype: str
        """
        return self._printnanny_api_url

    @printnanny_api_url.setter
    def printnanny_api_url(self, printnanny_api_url):
        """Sets the printnanny_api_url of this LicenseCredentials.


        :param printnanny_api_url: The printnanny_api_url of this LicenseCredentials.  # noqa: E501
        :type printnanny_api_url: str
        """

        self._printnanny_api_url = printnanny_api_url

    @property
    def honeycomb_dataset(self):
        """Gets the honeycomb_dataset of this LicenseCredentials.  # noqa: E501


        :return: The honeycomb_dataset of this LicenseCredentials.  # noqa: E501
        :rtype: str
        """
        return self._honeycomb_dataset

    @honeycomb_dataset.setter
    def honeycomb_dataset(self, honeycomb_dataset):
        """Sets the honeycomb_dataset of this LicenseCredentials.


        :param honeycomb_dataset: The honeycomb_dataset of this LicenseCredentials.  # noqa: E501
        :type honeycomb_dataset: str
        """

        self._honeycomb_dataset = honeycomb_dataset

    @property
    def honeycomb_api_key(self):
        """Gets the honeycomb_api_key of this LicenseCredentials.  # noqa: E501


        :return: The honeycomb_api_key of this LicenseCredentials.  # noqa: E501
        :rtype: str
        """
        return self._honeycomb_api_key

    @honeycomb_api_key.setter
    def honeycomb_api_key(self, honeycomb_api_key):
        """Sets the honeycomb_api_key of this LicenseCredentials.


        :param honeycomb_api_key: The honeycomb_api_key of this LicenseCredentials.  # noqa: E501
        :type honeycomb_api_key: str
        """

        self._honeycomb_api_key = honeycomb_api_key

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseCredentials):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LicenseCredentials):
            return True

        return self.to_dict() != other.to_dict()
