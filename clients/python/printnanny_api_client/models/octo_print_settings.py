# coding: utf-8

"""
    printnanny-api-client

    Official API client library forprintnanny.ai print-nanny.com  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Contact: leigh@printnanny.ai
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from printnanny_api_client.configuration import Configuration


class OctoPrintSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'sync_gcode': 'bool',
        'sync_printer_profiles': 'bool',
        'sync_backups': 'bool',
        'monitoring_auto_start': 'bool',
        'monitoring_auto_pause': 'bool',
        'user': 'int'
    }

    attribute_map = {
        'id': 'id',
        'sync_gcode': 'sync_gcode',
        'sync_printer_profiles': 'sync_printer_profiles',
        'sync_backups': 'sync_backups',
        'monitoring_auto_start': 'monitoring_auto_start',
        'monitoring_auto_pause': 'monitoring_auto_pause',
        'user': 'user'
    }

    def __init__(self, id=None, sync_gcode=None, sync_printer_profiles=None, sync_backups=None, monitoring_auto_start=None, monitoring_auto_pause=None, user=None, local_vars_configuration=None):  # noqa: E501
        """OctoPrintSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._sync_gcode = None
        self._sync_printer_profiles = None
        self._sync_backups = None
        self._monitoring_auto_start = None
        self._monitoring_auto_pause = None
        self._user = None
        self.discriminator = None

        self.id = id
        if sync_gcode is not None:
            self.sync_gcode = sync_gcode
        if sync_printer_profiles is not None:
            self.sync_printer_profiles = sync_printer_profiles
        if sync_backups is not None:
            self.sync_backups = sync_backups
        if monitoring_auto_start is not None:
            self.monitoring_auto_start = monitoring_auto_start
        if monitoring_auto_pause is not None:
            self.monitoring_auto_pause = monitoring_auto_pause
        self.user = user

    @property
    def id(self):
        """Gets the id of this OctoPrintSettings.  # noqa: E501


        :return: The id of this OctoPrintSettings.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OctoPrintSettings.


        :param id: The id of this OctoPrintSettings.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def sync_gcode(self):
        """Gets the sync_gcode of this OctoPrintSettings.  # noqa: E501

        Sync Gcode files to PrintNanny Cloud  # noqa: E501

        :return: The sync_gcode of this OctoPrintSettings.  # noqa: E501
        :rtype: bool
        """
        return self._sync_gcode

    @sync_gcode.setter
    def sync_gcode(self, sync_gcode):
        """Sets the sync_gcode of this OctoPrintSettings.

        Sync Gcode files to PrintNanny Cloud  # noqa: E501

        :param sync_gcode: The sync_gcode of this OctoPrintSettings.  # noqa: E501
        :type sync_gcode: bool
        """

        self._sync_gcode = sync_gcode

    @property
    def sync_printer_profiles(self):
        """Gets the sync_printer_profiles of this OctoPrintSettings.  # noqa: E501

        Sync Printer Profiles to PrintNanny Cloud  # noqa: E501

        :return: The sync_printer_profiles of this OctoPrintSettings.  # noqa: E501
        :rtype: bool
        """
        return self._sync_printer_profiles

    @sync_printer_profiles.setter
    def sync_printer_profiles(self, sync_printer_profiles):
        """Sets the sync_printer_profiles of this OctoPrintSettings.

        Sync Printer Profiles to PrintNanny Cloud  # noqa: E501

        :param sync_printer_profiles: The sync_printer_profiles of this OctoPrintSettings.  # noqa: E501
        :type sync_printer_profiles: bool
        """

        self._sync_printer_profiles = sync_printer_profiles

    @property
    def sync_backups(self):
        """Gets the sync_backups of this OctoPrintSettings.  # noqa: E501

        Upload OctoPrint backups to PrintNanny Cloud  # noqa: E501

        :return: The sync_backups of this OctoPrintSettings.  # noqa: E501
        :rtype: bool
        """
        return self._sync_backups

    @sync_backups.setter
    def sync_backups(self, sync_backups):
        """Sets the sync_backups of this OctoPrintSettings.

        Upload OctoPrint backups to PrintNanny Cloud  # noqa: E501

        :param sync_backups: The sync_backups of this OctoPrintSettings.  # noqa: E501
        :type sync_backups: bool
        """

        self._sync_backups = sync_backups

    @property
    def monitoring_auto_start(self):
        """Gets the monitoring_auto_start of this OctoPrintSettings.  # noqa: E501

        Start PrintNanny monitoring automatically when a print job begins  # noqa: E501

        :return: The monitoring_auto_start of this OctoPrintSettings.  # noqa: E501
        :rtype: bool
        """
        return self._monitoring_auto_start

    @monitoring_auto_start.setter
    def monitoring_auto_start(self, monitoring_auto_start):
        """Sets the monitoring_auto_start of this OctoPrintSettings.

        Start PrintNanny monitoring automatically when a print job begins  # noqa: E501

        :param monitoring_auto_start: The monitoring_auto_start of this OctoPrintSettings.  # noqa: E501
        :type monitoring_auto_start: bool
        """

        self._monitoring_auto_start = monitoring_auto_start

    @property
    def monitoring_auto_pause(self):
        """Gets the monitoring_auto_pause of this OctoPrintSettings.  # noqa: E501

        Pause failing print jobs automatically  # noqa: E501

        :return: The monitoring_auto_pause of this OctoPrintSettings.  # noqa: E501
        :rtype: bool
        """
        return self._monitoring_auto_pause

    @monitoring_auto_pause.setter
    def monitoring_auto_pause(self, monitoring_auto_pause):
        """Sets the monitoring_auto_pause of this OctoPrintSettings.

        Pause failing print jobs automatically  # noqa: E501

        :param monitoring_auto_pause: The monitoring_auto_pause of this OctoPrintSettings.  # noqa: E501
        :type monitoring_auto_pause: bool
        """

        self._monitoring_auto_pause = monitoring_auto_pause

    @property
    def user(self):
        """Gets the user of this OctoPrintSettings.  # noqa: E501


        :return: The user of this OctoPrintSettings.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this OctoPrintSettings.


        :param user: The user of this OctoPrintSettings.  # noqa: E501
        :type user: int
        """
        if self.local_vars_configuration.client_side_validation and user is None:  # noqa: E501
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OctoPrintSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OctoPrintSettings):
            return True

        return self.to_dict() != other.to_dict()
