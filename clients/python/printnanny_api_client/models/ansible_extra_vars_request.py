# coding: utf-8

"""
    printnanny-api-client

    Official API client library for print-nanny.com  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Contact: leigh@print-nanny.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from printnanny_api_client.configuration import Configuration


class AnsibleExtraVarsRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'janus_version': 'str',
        'janus_libwebsockets_version': 'str',
        'janus_libnice_version': 'str',
        'janus_usrsctp_version': 'str',
        'janus_libsrtp_version': 'str',
        'tflite_version': 'str',
        'printnanny_cli_version': 'str',
        'libcamera_version': 'str'
    }

    attribute_map = {
        'janus_version': 'janus_version',
        'janus_libwebsockets_version': 'janus_libwebsockets_version',
        'janus_libnice_version': 'janus_libnice_version',
        'janus_usrsctp_version': 'janus_usrsctp_version',
        'janus_libsrtp_version': 'janus_libsrtp_version',
        'tflite_version': 'tflite_version',
        'printnanny_cli_version': 'printnanny_cli_version',
        'libcamera_version': 'libcamera_version'
    }

    def __init__(self, janus_version=None, janus_libwebsockets_version=None, janus_libnice_version=None, janus_usrsctp_version=None, janus_libsrtp_version=None, tflite_version=None, printnanny_cli_version=None, libcamera_version=None, local_vars_configuration=None):  # noqa: E501
        """AnsibleExtraVarsRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._janus_version = None
        self._janus_libwebsockets_version = None
        self._janus_libnice_version = None
        self._janus_usrsctp_version = None
        self._janus_libsrtp_version = None
        self._tflite_version = None
        self._printnanny_cli_version = None
        self._libcamera_version = None
        self.discriminator = None

        self.janus_version = janus_version
        self.janus_libwebsockets_version = janus_libwebsockets_version
        self.janus_libnice_version = janus_libnice_version
        self.janus_usrsctp_version = janus_usrsctp_version
        self.janus_libsrtp_version = janus_libsrtp_version
        self.tflite_version = tflite_version
        self.printnanny_cli_version = printnanny_cli_version
        self.libcamera_version = libcamera_version

    @property
    def janus_version(self):
        """Gets the janus_version of this AnsibleExtraVarsRequest.  # noqa: E501


        :return: The janus_version of this AnsibleExtraVarsRequest.  # noqa: E501
        :rtype: str
        """
        return self._janus_version

    @janus_version.setter
    def janus_version(self, janus_version):
        """Sets the janus_version of this AnsibleExtraVarsRequest.


        :param janus_version: The janus_version of this AnsibleExtraVarsRequest.  # noqa: E501
        :type janus_version: str
        """
        if self.local_vars_configuration.client_side_validation and janus_version is None:  # noqa: E501
            raise ValueError("Invalid value for `janus_version`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                janus_version is not None and len(janus_version) < 1):
            raise ValueError("Invalid value for `janus_version`, length must be greater than or equal to `1`")  # noqa: E501

        self._janus_version = janus_version

    @property
    def janus_libwebsockets_version(self):
        """Gets the janus_libwebsockets_version of this AnsibleExtraVarsRequest.  # noqa: E501


        :return: The janus_libwebsockets_version of this AnsibleExtraVarsRequest.  # noqa: E501
        :rtype: str
        """
        return self._janus_libwebsockets_version

    @janus_libwebsockets_version.setter
    def janus_libwebsockets_version(self, janus_libwebsockets_version):
        """Sets the janus_libwebsockets_version of this AnsibleExtraVarsRequest.


        :param janus_libwebsockets_version: The janus_libwebsockets_version of this AnsibleExtraVarsRequest.  # noqa: E501
        :type janus_libwebsockets_version: str
        """
        if self.local_vars_configuration.client_side_validation and janus_libwebsockets_version is None:  # noqa: E501
            raise ValueError("Invalid value for `janus_libwebsockets_version`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                janus_libwebsockets_version is not None and len(janus_libwebsockets_version) < 1):
            raise ValueError("Invalid value for `janus_libwebsockets_version`, length must be greater than or equal to `1`")  # noqa: E501

        self._janus_libwebsockets_version = janus_libwebsockets_version

    @property
    def janus_libnice_version(self):
        """Gets the janus_libnice_version of this AnsibleExtraVarsRequest.  # noqa: E501


        :return: The janus_libnice_version of this AnsibleExtraVarsRequest.  # noqa: E501
        :rtype: str
        """
        return self._janus_libnice_version

    @janus_libnice_version.setter
    def janus_libnice_version(self, janus_libnice_version):
        """Sets the janus_libnice_version of this AnsibleExtraVarsRequest.


        :param janus_libnice_version: The janus_libnice_version of this AnsibleExtraVarsRequest.  # noqa: E501
        :type janus_libnice_version: str
        """
        if self.local_vars_configuration.client_side_validation and janus_libnice_version is None:  # noqa: E501
            raise ValueError("Invalid value for `janus_libnice_version`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                janus_libnice_version is not None and len(janus_libnice_version) < 1):
            raise ValueError("Invalid value for `janus_libnice_version`, length must be greater than or equal to `1`")  # noqa: E501

        self._janus_libnice_version = janus_libnice_version

    @property
    def janus_usrsctp_version(self):
        """Gets the janus_usrsctp_version of this AnsibleExtraVarsRequest.  # noqa: E501


        :return: The janus_usrsctp_version of this AnsibleExtraVarsRequest.  # noqa: E501
        :rtype: str
        """
        return self._janus_usrsctp_version

    @janus_usrsctp_version.setter
    def janus_usrsctp_version(self, janus_usrsctp_version):
        """Sets the janus_usrsctp_version of this AnsibleExtraVarsRequest.


        :param janus_usrsctp_version: The janus_usrsctp_version of this AnsibleExtraVarsRequest.  # noqa: E501
        :type janus_usrsctp_version: str
        """
        if self.local_vars_configuration.client_side_validation and janus_usrsctp_version is None:  # noqa: E501
            raise ValueError("Invalid value for `janus_usrsctp_version`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                janus_usrsctp_version is not None and len(janus_usrsctp_version) < 1):
            raise ValueError("Invalid value for `janus_usrsctp_version`, length must be greater than or equal to `1`")  # noqa: E501

        self._janus_usrsctp_version = janus_usrsctp_version

    @property
    def janus_libsrtp_version(self):
        """Gets the janus_libsrtp_version of this AnsibleExtraVarsRequest.  # noqa: E501


        :return: The janus_libsrtp_version of this AnsibleExtraVarsRequest.  # noqa: E501
        :rtype: str
        """
        return self._janus_libsrtp_version

    @janus_libsrtp_version.setter
    def janus_libsrtp_version(self, janus_libsrtp_version):
        """Sets the janus_libsrtp_version of this AnsibleExtraVarsRequest.


        :param janus_libsrtp_version: The janus_libsrtp_version of this AnsibleExtraVarsRequest.  # noqa: E501
        :type janus_libsrtp_version: str
        """
        if self.local_vars_configuration.client_side_validation and janus_libsrtp_version is None:  # noqa: E501
            raise ValueError("Invalid value for `janus_libsrtp_version`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                janus_libsrtp_version is not None and len(janus_libsrtp_version) < 1):
            raise ValueError("Invalid value for `janus_libsrtp_version`, length must be greater than or equal to `1`")  # noqa: E501

        self._janus_libsrtp_version = janus_libsrtp_version

    @property
    def tflite_version(self):
        """Gets the tflite_version of this AnsibleExtraVarsRequest.  # noqa: E501


        :return: The tflite_version of this AnsibleExtraVarsRequest.  # noqa: E501
        :rtype: str
        """
        return self._tflite_version

    @tflite_version.setter
    def tflite_version(self, tflite_version):
        """Sets the tflite_version of this AnsibleExtraVarsRequest.


        :param tflite_version: The tflite_version of this AnsibleExtraVarsRequest.  # noqa: E501
        :type tflite_version: str
        """
        if self.local_vars_configuration.client_side_validation and tflite_version is None:  # noqa: E501
            raise ValueError("Invalid value for `tflite_version`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                tflite_version is not None and len(tflite_version) < 1):
            raise ValueError("Invalid value for `tflite_version`, length must be greater than or equal to `1`")  # noqa: E501

        self._tflite_version = tflite_version

    @property
    def printnanny_cli_version(self):
        """Gets the printnanny_cli_version of this AnsibleExtraVarsRequest.  # noqa: E501


        :return: The printnanny_cli_version of this AnsibleExtraVarsRequest.  # noqa: E501
        :rtype: str
        """
        return self._printnanny_cli_version

    @printnanny_cli_version.setter
    def printnanny_cli_version(self, printnanny_cli_version):
        """Sets the printnanny_cli_version of this AnsibleExtraVarsRequest.


        :param printnanny_cli_version: The printnanny_cli_version of this AnsibleExtraVarsRequest.  # noqa: E501
        :type printnanny_cli_version: str
        """
        if self.local_vars_configuration.client_side_validation and printnanny_cli_version is None:  # noqa: E501
            raise ValueError("Invalid value for `printnanny_cli_version`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                printnanny_cli_version is not None and len(printnanny_cli_version) < 1):
            raise ValueError("Invalid value for `printnanny_cli_version`, length must be greater than or equal to `1`")  # noqa: E501

        self._printnanny_cli_version = printnanny_cli_version

    @property
    def libcamera_version(self):
        """Gets the libcamera_version of this AnsibleExtraVarsRequest.  # noqa: E501


        :return: The libcamera_version of this AnsibleExtraVarsRequest.  # noqa: E501
        :rtype: str
        """
        return self._libcamera_version

    @libcamera_version.setter
    def libcamera_version(self, libcamera_version):
        """Sets the libcamera_version of this AnsibleExtraVarsRequest.


        :param libcamera_version: The libcamera_version of this AnsibleExtraVarsRequest.  # noqa: E501
        :type libcamera_version: str
        """
        if self.local_vars_configuration.client_side_validation and libcamera_version is None:  # noqa: E501
            raise ValueError("Invalid value for `libcamera_version`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                libcamera_version is not None and len(libcamera_version) < 1):
            raise ValueError("Invalid value for `libcamera_version`, length must be greater than or equal to `1`")  # noqa: E501

        self._libcamera_version = libcamera_version

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnsibleExtraVarsRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnsibleExtraVarsRequest):
            return True

        return self.to_dict() != other.to_dict()
