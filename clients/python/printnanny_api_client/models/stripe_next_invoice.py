# coding: utf-8

"""
    printnanny-api-client

    Official API client library for printnanny.ai  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Contact: leigh@printnanny.ai
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from printnanny_api_client.configuration import Configuration


class StripeNextInvoice(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'djstripe_id': 'int',
        'djstripe_created': 'datetime',
        'djstripe_updated': 'datetime',
        'livemode': 'bool',
        'created': 'datetime',
        'metadata': 'dict(str, object)',
        'description': 'str',
        'account_country': 'str',
        'account_name': 'str',
        'amount_due': 'str',
        'amount_paid': 'str',
        'amount_remaining': 'str',
        'application_fee_amount': 'str',
        'attempt_count': 'int',
        'attempted': 'bool',
        'auto_advance': 'bool',
        'billing_reason': 'OneOfBillingReasonEnumBlankEnum',
        'collection_method': 'OneOfCollectionMethodEnumNullEnum',
        'currency': 'str',
        'customer_address': 'dict(str, object)',
        'customer_email': 'str',
        'customer_name': 'str',
        'customer_phone': 'str',
        'customer_shipping': 'dict(str, object)',
        'customer_tax_exempt': 'CustomerTaxExemptEnum',
        'discount': 'dict(str, object)',
        'due_date': 'datetime',
        'ending_balance': 'int',
        'footer': 'str',
        'hosted_invoice_url': 'str',
        'invoice_pdf': 'str',
        'next_payment_attempt': 'datetime',
        'number': 'str',
        'paid': 'bool',
        'period_end': 'datetime',
        'period_start': 'datetime',
        'post_payment_credit_notes_amount': 'int',
        'pre_payment_credit_notes_amount': 'int',
        'receipt_number': 'str',
        'starting_balance': 'int',
        'statement_descriptor': 'str',
        'status': 'OneOfStripeNextInvoiceStatusEnumBlankEnum',
        'status_transitions': 'dict(str, object)',
        'subscription_proration_date': 'datetime',
        'subtotal': 'str',
        'tax': 'str',
        'tax_percent': 'str',
        'threshold_reason': 'dict(str, object)',
        'total': 'str',
        'webhooks_delivered_at': 'datetime',
        'djstripe_owner_account': 'str',
        'charge': 'int',
        'customer': 'str',
        'default_payment_method': 'str',
        'payment_intent': 'int',
        'subscription': 'str',
        'default_source': 'str'
    }

    attribute_map = {
        'djstripe_id': 'djstripe_id',
        'djstripe_created': 'djstripe_created',
        'djstripe_updated': 'djstripe_updated',
        'livemode': 'livemode',
        'created': 'created',
        'metadata': 'metadata',
        'description': 'description',
        'account_country': 'account_country',
        'account_name': 'account_name',
        'amount_due': 'amount_due',
        'amount_paid': 'amount_paid',
        'amount_remaining': 'amount_remaining',
        'application_fee_amount': 'application_fee_amount',
        'attempt_count': 'attempt_count',
        'attempted': 'attempted',
        'auto_advance': 'auto_advance',
        'billing_reason': 'billing_reason',
        'collection_method': 'collection_method',
        'currency': 'currency',
        'customer_address': 'customer_address',
        'customer_email': 'customer_email',
        'customer_name': 'customer_name',
        'customer_phone': 'customer_phone',
        'customer_shipping': 'customer_shipping',
        'customer_tax_exempt': 'customer_tax_exempt',
        'discount': 'discount',
        'due_date': 'due_date',
        'ending_balance': 'ending_balance',
        'footer': 'footer',
        'hosted_invoice_url': 'hosted_invoice_url',
        'invoice_pdf': 'invoice_pdf',
        'next_payment_attempt': 'next_payment_attempt',
        'number': 'number',
        'paid': 'paid',
        'period_end': 'period_end',
        'period_start': 'period_start',
        'post_payment_credit_notes_amount': 'post_payment_credit_notes_amount',
        'pre_payment_credit_notes_amount': 'pre_payment_credit_notes_amount',
        'receipt_number': 'receipt_number',
        'starting_balance': 'starting_balance',
        'statement_descriptor': 'statement_descriptor',
        'status': 'status',
        'status_transitions': 'status_transitions',
        'subscription_proration_date': 'subscription_proration_date',
        'subtotal': 'subtotal',
        'tax': 'tax',
        'tax_percent': 'tax_percent',
        'threshold_reason': 'threshold_reason',
        'total': 'total',
        'webhooks_delivered_at': 'webhooks_delivered_at',
        'djstripe_owner_account': 'djstripe_owner_account',
        'charge': 'charge',
        'customer': 'customer',
        'default_payment_method': 'default_payment_method',
        'payment_intent': 'payment_intent',
        'subscription': 'subscription',
        'default_source': 'default_source'
    }

    def __init__(self, djstripe_id=None, djstripe_created=None, djstripe_updated=None, livemode=None, created=None, metadata=None, description=None, account_country=None, account_name=None, amount_due=None, amount_paid=None, amount_remaining=None, application_fee_amount=None, attempt_count=None, attempted=None, auto_advance=None, billing_reason=None, collection_method=None, currency=None, customer_address=None, customer_email=None, customer_name=None, customer_phone=None, customer_shipping=None, customer_tax_exempt=None, discount=None, due_date=None, ending_balance=None, footer=None, hosted_invoice_url=None, invoice_pdf=None, next_payment_attempt=None, number=None, paid=None, period_end=None, period_start=None, post_payment_credit_notes_amount=None, pre_payment_credit_notes_amount=None, receipt_number=None, starting_balance=None, statement_descriptor=None, status=None, status_transitions=None, subscription_proration_date=None, subtotal=None, tax=None, tax_percent=None, threshold_reason=None, total=None, webhooks_delivered_at=None, djstripe_owner_account=None, charge=None, customer=None, default_payment_method=None, payment_intent=None, subscription=None, default_source=None, local_vars_configuration=None):  # noqa: E501
        """StripeNextInvoice - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._djstripe_id = None
        self._djstripe_created = None
        self._djstripe_updated = None
        self._livemode = None
        self._created = None
        self._metadata = None
        self._description = None
        self._account_country = None
        self._account_name = None
        self._amount_due = None
        self._amount_paid = None
        self._amount_remaining = None
        self._application_fee_amount = None
        self._attempt_count = None
        self._attempted = None
        self._auto_advance = None
        self._billing_reason = None
        self._collection_method = None
        self._currency = None
        self._customer_address = None
        self._customer_email = None
        self._customer_name = None
        self._customer_phone = None
        self._customer_shipping = None
        self._customer_tax_exempt = None
        self._discount = None
        self._due_date = None
        self._ending_balance = None
        self._footer = None
        self._hosted_invoice_url = None
        self._invoice_pdf = None
        self._next_payment_attempt = None
        self._number = None
        self._paid = None
        self._period_end = None
        self._period_start = None
        self._post_payment_credit_notes_amount = None
        self._pre_payment_credit_notes_amount = None
        self._receipt_number = None
        self._starting_balance = None
        self._statement_descriptor = None
        self._status = None
        self._status_transitions = None
        self._subscription_proration_date = None
        self._subtotal = None
        self._tax = None
        self._tax_percent = None
        self._threshold_reason = None
        self._total = None
        self._webhooks_delivered_at = None
        self._djstripe_owner_account = None
        self._charge = None
        self._customer = None
        self._default_payment_method = None
        self._payment_intent = None
        self._subscription = None
        self._default_source = None
        self.discriminator = None

        self.djstripe_id = djstripe_id
        self.djstripe_created = djstripe_created
        self.djstripe_updated = djstripe_updated
        self.livemode = livemode
        self.created = created
        self.metadata = metadata
        self.description = description
        if account_country is not None:
            self.account_country = account_country
        if account_name is not None:
            self.account_name = account_name
        self.amount_due = amount_due
        self.amount_paid = amount_paid
        self.amount_remaining = amount_remaining
        self.application_fee_amount = application_fee_amount
        self.attempt_count = attempt_count
        if attempted is not None:
            self.attempted = attempted
        self.auto_advance = auto_advance
        self.billing_reason = billing_reason
        self.collection_method = collection_method
        self.currency = currency
        self.customer_address = customer_address
        if customer_email is not None:
            self.customer_email = customer_email
        if customer_name is not None:
            self.customer_name = customer_name
        if customer_phone is not None:
            self.customer_phone = customer_phone
        self.customer_shipping = customer_shipping
        self.customer_tax_exempt = customer_tax_exempt
        self.discount = discount
        self.due_date = due_date
        self.ending_balance = ending_balance
        if footer is not None:
            self.footer = footer
        if hosted_invoice_url is not None:
            self.hosted_invoice_url = hosted_invoice_url
        if invoice_pdf is not None:
            self.invoice_pdf = invoice_pdf
        self.next_payment_attempt = next_payment_attempt
        if number is not None:
            self.number = number
        if paid is not None:
            self.paid = paid
        self.period_end = period_end
        self.period_start = period_start
        self.post_payment_credit_notes_amount = post_payment_credit_notes_amount
        self.pre_payment_credit_notes_amount = pre_payment_credit_notes_amount
        self.receipt_number = receipt_number
        self.starting_balance = starting_balance
        if statement_descriptor is not None:
            self.statement_descriptor = statement_descriptor
        self.status = status
        self.status_transitions = status_transitions
        self.subscription_proration_date = subscription_proration_date
        self.subtotal = subtotal
        self.tax = tax
        self.tax_percent = tax_percent
        self.threshold_reason = threshold_reason
        self.total = total
        self.webhooks_delivered_at = webhooks_delivered_at
        self.djstripe_owner_account = djstripe_owner_account
        self.charge = charge
        self.customer = customer
        self.default_payment_method = default_payment_method
        self.payment_intent = payment_intent
        self.subscription = subscription
        self.default_source = default_source

    @property
    def djstripe_id(self):
        """Gets the djstripe_id of this StripeNextInvoice.  # noqa: E501


        :return: The djstripe_id of this StripeNextInvoice.  # noqa: E501
        :rtype: int
        """
        return self._djstripe_id

    @djstripe_id.setter
    def djstripe_id(self, djstripe_id):
        """Sets the djstripe_id of this StripeNextInvoice.


        :param djstripe_id: The djstripe_id of this StripeNextInvoice.  # noqa: E501
        :type djstripe_id: int
        """
        if self.local_vars_configuration.client_side_validation and djstripe_id is None:  # noqa: E501
            raise ValueError("Invalid value for `djstripe_id`, must not be `None`")  # noqa: E501

        self._djstripe_id = djstripe_id

    @property
    def djstripe_created(self):
        """Gets the djstripe_created of this StripeNextInvoice.  # noqa: E501


        :return: The djstripe_created of this StripeNextInvoice.  # noqa: E501
        :rtype: datetime
        """
        return self._djstripe_created

    @djstripe_created.setter
    def djstripe_created(self, djstripe_created):
        """Sets the djstripe_created of this StripeNextInvoice.


        :param djstripe_created: The djstripe_created of this StripeNextInvoice.  # noqa: E501
        :type djstripe_created: datetime
        """
        if self.local_vars_configuration.client_side_validation and djstripe_created is None:  # noqa: E501
            raise ValueError("Invalid value for `djstripe_created`, must not be `None`")  # noqa: E501

        self._djstripe_created = djstripe_created

    @property
    def djstripe_updated(self):
        """Gets the djstripe_updated of this StripeNextInvoice.  # noqa: E501


        :return: The djstripe_updated of this StripeNextInvoice.  # noqa: E501
        :rtype: datetime
        """
        return self._djstripe_updated

    @djstripe_updated.setter
    def djstripe_updated(self, djstripe_updated):
        """Sets the djstripe_updated of this StripeNextInvoice.


        :param djstripe_updated: The djstripe_updated of this StripeNextInvoice.  # noqa: E501
        :type djstripe_updated: datetime
        """
        if self.local_vars_configuration.client_side_validation and djstripe_updated is None:  # noqa: E501
            raise ValueError("Invalid value for `djstripe_updated`, must not be `None`")  # noqa: E501

        self._djstripe_updated = djstripe_updated

    @property
    def livemode(self):
        """Gets the livemode of this StripeNextInvoice.  # noqa: E501

        Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.  # noqa: E501

        :return: The livemode of this StripeNextInvoice.  # noqa: E501
        :rtype: bool
        """
        return self._livemode

    @livemode.setter
    def livemode(self, livemode):
        """Sets the livemode of this StripeNextInvoice.

        Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.  # noqa: E501

        :param livemode: The livemode of this StripeNextInvoice.  # noqa: E501
        :type livemode: bool
        """

        self._livemode = livemode

    @property
    def created(self):
        """Gets the created of this StripeNextInvoice.  # noqa: E501

        The datetime this object was created in stripe.  # noqa: E501

        :return: The created of this StripeNextInvoice.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this StripeNextInvoice.

        The datetime this object was created in stripe.  # noqa: E501

        :param created: The created of this StripeNextInvoice.  # noqa: E501
        :type created: datetime
        """

        self._created = created

    @property
    def metadata(self):
        """Gets the metadata of this StripeNextInvoice.  # noqa: E501

        A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.  # noqa: E501

        :return: The metadata of this StripeNextInvoice.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this StripeNextInvoice.

        A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.  # noqa: E501

        :param metadata: The metadata of this StripeNextInvoice.  # noqa: E501
        :type metadata: dict(str, object)
        """

        self._metadata = metadata

    @property
    def description(self):
        """Gets the description of this StripeNextInvoice.  # noqa: E501

        A description of this object.  # noqa: E501

        :return: The description of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StripeNextInvoice.

        A description of this object.  # noqa: E501

        :param description: The description of this StripeNextInvoice.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def account_country(self):
        """Gets the account_country of this StripeNextInvoice.  # noqa: E501

        The country of the business associated with this invoice, most often the business creating the invoice.  # noqa: E501

        :return: The account_country of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._account_country

    @account_country.setter
    def account_country(self, account_country):
        """Sets the account_country of this StripeNextInvoice.

        The country of the business associated with this invoice, most often the business creating the invoice.  # noqa: E501

        :param account_country: The account_country of this StripeNextInvoice.  # noqa: E501
        :type account_country: str
        """
        if (self.local_vars_configuration.client_side_validation and
                account_country is not None and len(account_country) > 2):
            raise ValueError("Invalid value for `account_country`, length must be less than or equal to `2`")  # noqa: E501

        self._account_country = account_country

    @property
    def account_name(self):
        """Gets the account_name of this StripeNextInvoice.  # noqa: E501

        The public name of the business associated with this invoice, most often the business creating the invoice.  # noqa: E501

        :return: The account_name of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this StripeNextInvoice.

        The public name of the business associated with this invoice, most often the business creating the invoice.  # noqa: E501

        :param account_name: The account_name of this StripeNextInvoice.  # noqa: E501
        :type account_name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                account_name is not None and len(account_name) > 5000):
            raise ValueError("Invalid value for `account_name`, length must be less than or equal to `5000`")  # noqa: E501

        self._account_name = account_name

    @property
    def amount_due(self):
        """Gets the amount_due of this StripeNextInvoice.  # noqa: E501

        Final amount due (as decimal) at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the amount_due may be 0. If there is a positive starting_balance for the invoice (the customer owes money), the amount_due will also take that into account. The charge that gets generated for the invoice will be for the amount specified in amount_due.  # noqa: E501

        :return: The amount_due of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._amount_due

    @amount_due.setter
    def amount_due(self, amount_due):
        """Sets the amount_due of this StripeNextInvoice.

        Final amount due (as decimal) at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the amount_due may be 0. If there is a positive starting_balance for the invoice (the customer owes money), the amount_due will also take that into account. The charge that gets generated for the invoice will be for the amount specified in amount_due.  # noqa: E501

        :param amount_due: The amount_due of this StripeNextInvoice.  # noqa: E501
        :type amount_due: str
        """
        if self.local_vars_configuration.client_side_validation and amount_due is None:  # noqa: E501
            raise ValueError("Invalid value for `amount_due`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                amount_due is not None and not re.search(r'^-?\d{0,9}(?:\.\d{0,2})?$', amount_due)):  # noqa: E501
            raise ValueError(r"Invalid value for `amount_due`, must be a follow pattern or equal to `/^-?\d{0,9}(?:\.\d{0,2})?$/`")  # noqa: E501

        self._amount_due = amount_due

    @property
    def amount_paid(self):
        """Gets the amount_paid of this StripeNextInvoice.  # noqa: E501

        The amount, (as decimal), that was paid.  # noqa: E501

        :return: The amount_paid of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._amount_paid

    @amount_paid.setter
    def amount_paid(self, amount_paid):
        """Sets the amount_paid of this StripeNextInvoice.

        The amount, (as decimal), that was paid.  # noqa: E501

        :param amount_paid: The amount_paid of this StripeNextInvoice.  # noqa: E501
        :type amount_paid: str
        """
        if (self.local_vars_configuration.client_side_validation and
                amount_paid is not None and not re.search(r'^-?\d{0,9}(?:\.\d{0,2})?$', amount_paid)):  # noqa: E501
            raise ValueError(r"Invalid value for `amount_paid`, must be a follow pattern or equal to `/^-?\d{0,9}(?:\.\d{0,2})?$/`")  # noqa: E501

        self._amount_paid = amount_paid

    @property
    def amount_remaining(self):
        """Gets the amount_remaining of this StripeNextInvoice.  # noqa: E501

        The amount remaining, (as decimal), that is due.  # noqa: E501

        :return: The amount_remaining of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._amount_remaining

    @amount_remaining.setter
    def amount_remaining(self, amount_remaining):
        """Sets the amount_remaining of this StripeNextInvoice.

        The amount remaining, (as decimal), that is due.  # noqa: E501

        :param amount_remaining: The amount_remaining of this StripeNextInvoice.  # noqa: E501
        :type amount_remaining: str
        """
        if (self.local_vars_configuration.client_side_validation and
                amount_remaining is not None and not re.search(r'^-?\d{0,9}(?:\.\d{0,2})?$', amount_remaining)):  # noqa: E501
            raise ValueError(r"Invalid value for `amount_remaining`, must be a follow pattern or equal to `/^-?\d{0,9}(?:\.\d{0,2})?$/`")  # noqa: E501

        self._amount_remaining = amount_remaining

    @property
    def application_fee_amount(self):
        """Gets the application_fee_amount of this StripeNextInvoice.  # noqa: E501

        The fee (as decimal) that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid.  # noqa: E501

        :return: The application_fee_amount of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._application_fee_amount

    @application_fee_amount.setter
    def application_fee_amount(self, application_fee_amount):
        """Sets the application_fee_amount of this StripeNextInvoice.

        The fee (as decimal) that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid.  # noqa: E501

        :param application_fee_amount: The application_fee_amount of this StripeNextInvoice.  # noqa: E501
        :type application_fee_amount: str
        """
        if (self.local_vars_configuration.client_side_validation and
                application_fee_amount is not None and not re.search(r'^-?\d{0,9}(?:\.\d{0,2})?$', application_fee_amount)):  # noqa: E501
            raise ValueError(r"Invalid value for `application_fee_amount`, must be a follow pattern or equal to `/^-?\d{0,9}(?:\.\d{0,2})?$/`")  # noqa: E501

        self._application_fee_amount = application_fee_amount

    @property
    def attempt_count(self):
        """Gets the attempt_count of this StripeNextInvoice.  # noqa: E501

        Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.  # noqa: E501

        :return: The attempt_count of this StripeNextInvoice.  # noqa: E501
        :rtype: int
        """
        return self._attempt_count

    @attempt_count.setter
    def attempt_count(self, attempt_count):
        """Sets the attempt_count of this StripeNextInvoice.

        Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.  # noqa: E501

        :param attempt_count: The attempt_count of this StripeNextInvoice.  # noqa: E501
        :type attempt_count: int
        """
        if self.local_vars_configuration.client_side_validation and attempt_count is None:  # noqa: E501
            raise ValueError("Invalid value for `attempt_count`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                attempt_count is not None and attempt_count > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `attempt_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                attempt_count is not None and attempt_count < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `attempt_count`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._attempt_count = attempt_count

    @property
    def attempted(self):
        """Gets the attempted of this StripeNextInvoice.  # noqa: E501

        Whether or not an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the ``invoice.created`` webhook, for example, so you might not want to display that invoice as unpaid to your users.  # noqa: E501

        :return: The attempted of this StripeNextInvoice.  # noqa: E501
        :rtype: bool
        """
        return self._attempted

    @attempted.setter
    def attempted(self, attempted):
        """Sets the attempted of this StripeNextInvoice.

        Whether or not an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the ``invoice.created`` webhook, for example, so you might not want to display that invoice as unpaid to your users.  # noqa: E501

        :param attempted: The attempted of this StripeNextInvoice.  # noqa: E501
        :type attempted: bool
        """

        self._attempted = attempted

    @property
    def auto_advance(self):
        """Gets the auto_advance of this StripeNextInvoice.  # noqa: E501

        Controls whether Stripe will perform automatic collection of the invoice. When false, the invoice's state will not automatically advance without an explicit action.  # noqa: E501

        :return: The auto_advance of this StripeNextInvoice.  # noqa: E501
        :rtype: bool
        """
        return self._auto_advance

    @auto_advance.setter
    def auto_advance(self, auto_advance):
        """Sets the auto_advance of this StripeNextInvoice.

        Controls whether Stripe will perform automatic collection of the invoice. When false, the invoice's state will not automatically advance without an explicit action.  # noqa: E501

        :param auto_advance: The auto_advance of this StripeNextInvoice.  # noqa: E501
        :type auto_advance: bool
        """

        self._auto_advance = auto_advance

    @property
    def billing_reason(self):
        """Gets the billing_reason of this StripeNextInvoice.  # noqa: E501

        Indicates the reason why the invoice was created. subscription_cycle indicates an invoice created by a subscription advancing into a new period. subscription_create indicates an invoice created due to creating a subscription. subscription_update indicates an invoice created due to updating a subscription. subscription is set for all old invoices to indicate either a change to a subscription or a period advancement. manual is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The upcoming value is reserved for simulated invoices per the upcoming invoice endpoint. subscription_threshold indicates an invoice created due to a billing threshold being reached.  # noqa: E501

        :return: The billing_reason of this StripeNextInvoice.  # noqa: E501
        :rtype: OneOfBillingReasonEnumBlankEnum
        """
        return self._billing_reason

    @billing_reason.setter
    def billing_reason(self, billing_reason):
        """Sets the billing_reason of this StripeNextInvoice.

        Indicates the reason why the invoice was created. subscription_cycle indicates an invoice created by a subscription advancing into a new period. subscription_create indicates an invoice created due to creating a subscription. subscription_update indicates an invoice created due to updating a subscription. subscription is set for all old invoices to indicate either a change to a subscription or a period advancement. manual is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The upcoming value is reserved for simulated invoices per the upcoming invoice endpoint. subscription_threshold indicates an invoice created due to a billing threshold being reached.  # noqa: E501

        :param billing_reason: The billing_reason of this StripeNextInvoice.  # noqa: E501
        :type billing_reason: OneOfBillingReasonEnumBlankEnum
        """

        self._billing_reason = billing_reason

    @property
    def collection_method(self):
        """Gets the collection_method of this StripeNextInvoice.  # noqa: E501

        When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.  # noqa: E501

        :return: The collection_method of this StripeNextInvoice.  # noqa: E501
        :rtype: OneOfCollectionMethodEnumNullEnum
        """
        return self._collection_method

    @collection_method.setter
    def collection_method(self, collection_method):
        """Sets the collection_method of this StripeNextInvoice.

        When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.  # noqa: E501

        :param collection_method: The collection_method of this StripeNextInvoice.  # noqa: E501
        :type collection_method: OneOfCollectionMethodEnumNullEnum
        """

        self._collection_method = collection_method

    @property
    def currency(self):
        """Gets the currency of this StripeNextInvoice.  # noqa: E501

        Three-letter ISO currency code  # noqa: E501

        :return: The currency of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this StripeNextInvoice.

        Three-letter ISO currency code  # noqa: E501

        :param currency: The currency of this StripeNextInvoice.  # noqa: E501
        :type currency: str
        """
        if self.local_vars_configuration.client_side_validation and currency is None:  # noqa: E501
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                currency is not None and len(currency) > 3):
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")  # noqa: E501

        self._currency = currency

    @property
    def customer_address(self):
        """Gets the customer_address of this StripeNextInvoice.  # noqa: E501

        The customer's address. Until the invoice is finalized, this field will equal customer.address. Once the invoice is finalized, this field will no longer be updated.  # noqa: E501

        :return: The customer_address of this StripeNextInvoice.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._customer_address

    @customer_address.setter
    def customer_address(self, customer_address):
        """Sets the customer_address of this StripeNextInvoice.

        The customer's address. Until the invoice is finalized, this field will equal customer.address. Once the invoice is finalized, this field will no longer be updated.  # noqa: E501

        :param customer_address: The customer_address of this StripeNextInvoice.  # noqa: E501
        :type customer_address: dict(str, object)
        """

        self._customer_address = customer_address

    @property
    def customer_email(self):
        """Gets the customer_email of this StripeNextInvoice.  # noqa: E501

        The customer's email. Until the invoice is finalized, this field will equal customer.email. Once the invoice is finalized, this field will no longer be updated.  # noqa: E501

        :return: The customer_email of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email):
        """Sets the customer_email of this StripeNextInvoice.

        The customer's email. Until the invoice is finalized, this field will equal customer.email. Once the invoice is finalized, this field will no longer be updated.  # noqa: E501

        :param customer_email: The customer_email of this StripeNextInvoice.  # noqa: E501
        :type customer_email: str
        """
        if (self.local_vars_configuration.client_side_validation and
                customer_email is not None and len(customer_email) > 5000):
            raise ValueError("Invalid value for `customer_email`, length must be less than or equal to `5000`")  # noqa: E501

        self._customer_email = customer_email

    @property
    def customer_name(self):
        """Gets the customer_name of this StripeNextInvoice.  # noqa: E501

        The customer's name. Until the invoice is finalized, this field will equal customer.name. Once the invoice is finalized, this field will no longer be updated.  # noqa: E501

        :return: The customer_name of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this StripeNextInvoice.

        The customer's name. Until the invoice is finalized, this field will equal customer.name. Once the invoice is finalized, this field will no longer be updated.  # noqa: E501

        :param customer_name: The customer_name of this StripeNextInvoice.  # noqa: E501
        :type customer_name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                customer_name is not None and len(customer_name) > 5000):
            raise ValueError("Invalid value for `customer_name`, length must be less than or equal to `5000`")  # noqa: E501

        self._customer_name = customer_name

    @property
    def customer_phone(self):
        """Gets the customer_phone of this StripeNextInvoice.  # noqa: E501

        The customer's phone number. Until the invoice is finalized, this field will equal customer.phone. Once the invoice is finalized, this field will no longer be updated.  # noqa: E501

        :return: The customer_phone of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._customer_phone

    @customer_phone.setter
    def customer_phone(self, customer_phone):
        """Sets the customer_phone of this StripeNextInvoice.

        The customer's phone number. Until the invoice is finalized, this field will equal customer.phone. Once the invoice is finalized, this field will no longer be updated.  # noqa: E501

        :param customer_phone: The customer_phone of this StripeNextInvoice.  # noqa: E501
        :type customer_phone: str
        """
        if (self.local_vars_configuration.client_side_validation and
                customer_phone is not None and len(customer_phone) > 5000):
            raise ValueError("Invalid value for `customer_phone`, length must be less than or equal to `5000`")  # noqa: E501

        self._customer_phone = customer_phone

    @property
    def customer_shipping(self):
        """Gets the customer_shipping of this StripeNextInvoice.  # noqa: E501

        The customer's shipping information. Until the invoice is finalized, this field will equal customer.shipping. Once the invoice is finalized, this field will no longer be updated.  # noqa: E501

        :return: The customer_shipping of this StripeNextInvoice.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._customer_shipping

    @customer_shipping.setter
    def customer_shipping(self, customer_shipping):
        """Sets the customer_shipping of this StripeNextInvoice.

        The customer's shipping information. Until the invoice is finalized, this field will equal customer.shipping. Once the invoice is finalized, this field will no longer be updated.  # noqa: E501

        :param customer_shipping: The customer_shipping of this StripeNextInvoice.  # noqa: E501
        :type customer_shipping: dict(str, object)
        """

        self._customer_shipping = customer_shipping

    @property
    def customer_tax_exempt(self):
        """Gets the customer_tax_exempt of this StripeNextInvoice.  # noqa: E501

        The customer's tax exempt status. Until the invoice is finalized, this field will equal customer.tax_exempt. Once the invoice is finalized, this field will no longer be updated.  # noqa: E501

        :return: The customer_tax_exempt of this StripeNextInvoice.  # noqa: E501
        :rtype: CustomerTaxExemptEnum
        """
        return self._customer_tax_exempt

    @customer_tax_exempt.setter
    def customer_tax_exempt(self, customer_tax_exempt):
        """Sets the customer_tax_exempt of this StripeNextInvoice.

        The customer's tax exempt status. Until the invoice is finalized, this field will equal customer.tax_exempt. Once the invoice is finalized, this field will no longer be updated.  # noqa: E501

        :param customer_tax_exempt: The customer_tax_exempt of this StripeNextInvoice.  # noqa: E501
        :type customer_tax_exempt: CustomerTaxExemptEnum
        """

        self._customer_tax_exempt = customer_tax_exempt

    @property
    def discount(self):
        """Gets the discount of this StripeNextInvoice.  # noqa: E501

        Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis.  # noqa: E501

        :return: The discount of this StripeNextInvoice.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this StripeNextInvoice.

        Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis.  # noqa: E501

        :param discount: The discount of this StripeNextInvoice.  # noqa: E501
        :type discount: dict(str, object)
        """

        self._discount = discount

    @property
    def due_date(self):
        """Gets the due_date of this StripeNextInvoice.  # noqa: E501

        The date on which payment for this invoice is due. This value will be null for invoices where billing=charge_automatically.  # noqa: E501

        :return: The due_date of this StripeNextInvoice.  # noqa: E501
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this StripeNextInvoice.

        The date on which payment for this invoice is due. This value will be null for invoices where billing=charge_automatically.  # noqa: E501

        :param due_date: The due_date of this StripeNextInvoice.  # noqa: E501
        :type due_date: datetime
        """

        self._due_date = due_date

    @property
    def ending_balance(self):
        """Gets the ending_balance of this StripeNextInvoice.  # noqa: E501

        Ending customer balance (in cents) after attempting to pay invoice. If the invoice has not been attempted yet, this will be null.  # noqa: E501

        :return: The ending_balance of this StripeNextInvoice.  # noqa: E501
        :rtype: int
        """
        return self._ending_balance

    @ending_balance.setter
    def ending_balance(self, ending_balance):
        """Sets the ending_balance of this StripeNextInvoice.

        Ending customer balance (in cents) after attempting to pay invoice. If the invoice has not been attempted yet, this will be null.  # noqa: E501

        :param ending_balance: The ending_balance of this StripeNextInvoice.  # noqa: E501
        :type ending_balance: int
        """
        if (self.local_vars_configuration.client_side_validation and
                ending_balance is not None and ending_balance > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `ending_balance`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                ending_balance is not None and ending_balance < -9223372036854775808):  # noqa: E501
            raise ValueError("Invalid value for `ending_balance`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._ending_balance = ending_balance

    @property
    def footer(self):
        """Gets the footer of this StripeNextInvoice.  # noqa: E501

        Footer displayed on the invoice.  # noqa: E501

        :return: The footer of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._footer

    @footer.setter
    def footer(self, footer):
        """Sets the footer of this StripeNextInvoice.

        Footer displayed on the invoice.  # noqa: E501

        :param footer: The footer of this StripeNextInvoice.  # noqa: E501
        :type footer: str
        """
        if (self.local_vars_configuration.client_side_validation and
                footer is not None and len(footer) > 5000):
            raise ValueError("Invalid value for `footer`, length must be less than or equal to `5000`")  # noqa: E501

        self._footer = footer

    @property
    def hosted_invoice_url(self):
        """Gets the hosted_invoice_url of this StripeNextInvoice.  # noqa: E501

        The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been frozen yet, this will be null.  # noqa: E501

        :return: The hosted_invoice_url of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._hosted_invoice_url

    @hosted_invoice_url.setter
    def hosted_invoice_url(self, hosted_invoice_url):
        """Sets the hosted_invoice_url of this StripeNextInvoice.

        The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been frozen yet, this will be null.  # noqa: E501

        :param hosted_invoice_url: The hosted_invoice_url of this StripeNextInvoice.  # noqa: E501
        :type hosted_invoice_url: str
        """
        if (self.local_vars_configuration.client_side_validation and
                hosted_invoice_url is not None and len(hosted_invoice_url) > 799):
            raise ValueError("Invalid value for `hosted_invoice_url`, length must be less than or equal to `799`")  # noqa: E501

        self._hosted_invoice_url = hosted_invoice_url

    @property
    def invoice_pdf(self):
        """Gets the invoice_pdf of this StripeNextInvoice.  # noqa: E501

        The link to download the PDF for the invoice. If the invoice has not been frozen yet, this will be null.  # noqa: E501

        :return: The invoice_pdf of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._invoice_pdf

    @invoice_pdf.setter
    def invoice_pdf(self, invoice_pdf):
        """Sets the invoice_pdf of this StripeNextInvoice.

        The link to download the PDF for the invoice. If the invoice has not been frozen yet, this will be null.  # noqa: E501

        :param invoice_pdf: The invoice_pdf of this StripeNextInvoice.  # noqa: E501
        :type invoice_pdf: str
        """
        if (self.local_vars_configuration.client_side_validation and
                invoice_pdf is not None and len(invoice_pdf) > 799):
            raise ValueError("Invalid value for `invoice_pdf`, length must be less than or equal to `799`")  # noqa: E501

        self._invoice_pdf = invoice_pdf

    @property
    def next_payment_attempt(self):
        """Gets the next_payment_attempt of this StripeNextInvoice.  # noqa: E501

        The time at which payment will next be attempted.  # noqa: E501

        :return: The next_payment_attempt of this StripeNextInvoice.  # noqa: E501
        :rtype: datetime
        """
        return self._next_payment_attempt

    @next_payment_attempt.setter
    def next_payment_attempt(self, next_payment_attempt):
        """Sets the next_payment_attempt of this StripeNextInvoice.

        The time at which payment will next be attempted.  # noqa: E501

        :param next_payment_attempt: The next_payment_attempt of this StripeNextInvoice.  # noqa: E501
        :type next_payment_attempt: datetime
        """

        self._next_payment_attempt = next_payment_attempt

    @property
    def number(self):
        """Gets the number of this StripeNextInvoice.  # noqa: E501

        A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified.  # noqa: E501

        :return: The number of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this StripeNextInvoice.

        A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified.  # noqa: E501

        :param number: The number of this StripeNextInvoice.  # noqa: E501
        :type number: str
        """
        if (self.local_vars_configuration.client_side_validation and
                number is not None and len(number) > 64):
            raise ValueError("Invalid value for `number`, length must be less than or equal to `64`")  # noqa: E501

        self._number = number

    @property
    def paid(self):
        """Gets the paid of this StripeNextInvoice.  # noqa: E501

        Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.  # noqa: E501

        :return: The paid of this StripeNextInvoice.  # noqa: E501
        :rtype: bool
        """
        return self._paid

    @paid.setter
    def paid(self, paid):
        """Sets the paid of this StripeNextInvoice.

        Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.  # noqa: E501

        :param paid: The paid of this StripeNextInvoice.  # noqa: E501
        :type paid: bool
        """

        self._paid = paid

    @property
    def period_end(self):
        """Gets the period_end of this StripeNextInvoice.  # noqa: E501

        End of the usage period during which invoice items were added to this invoice.  # noqa: E501

        :return: The period_end of this StripeNextInvoice.  # noqa: E501
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this StripeNextInvoice.

        End of the usage period during which invoice items were added to this invoice.  # noqa: E501

        :param period_end: The period_end of this StripeNextInvoice.  # noqa: E501
        :type period_end: datetime
        """
        if self.local_vars_configuration.client_side_validation and period_end is None:  # noqa: E501
            raise ValueError("Invalid value for `period_end`, must not be `None`")  # noqa: E501

        self._period_end = period_end

    @property
    def period_start(self):
        """Gets the period_start of this StripeNextInvoice.  # noqa: E501

        Start of the usage period during which invoice items were added to this invoice.  # noqa: E501

        :return: The period_start of this StripeNextInvoice.  # noqa: E501
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this StripeNextInvoice.

        Start of the usage period during which invoice items were added to this invoice.  # noqa: E501

        :param period_start: The period_start of this StripeNextInvoice.  # noqa: E501
        :type period_start: datetime
        """
        if self.local_vars_configuration.client_side_validation and period_start is None:  # noqa: E501
            raise ValueError("Invalid value for `period_start`, must not be `None`")  # noqa: E501

        self._period_start = period_start

    @property
    def post_payment_credit_notes_amount(self):
        """Gets the post_payment_credit_notes_amount of this StripeNextInvoice.  # noqa: E501

        Total amount (in cents) of all post-payment credit notes issued for this invoice.  # noqa: E501

        :return: The post_payment_credit_notes_amount of this StripeNextInvoice.  # noqa: E501
        :rtype: int
        """
        return self._post_payment_credit_notes_amount

    @post_payment_credit_notes_amount.setter
    def post_payment_credit_notes_amount(self, post_payment_credit_notes_amount):
        """Sets the post_payment_credit_notes_amount of this StripeNextInvoice.

        Total amount (in cents) of all post-payment credit notes issued for this invoice.  # noqa: E501

        :param post_payment_credit_notes_amount: The post_payment_credit_notes_amount of this StripeNextInvoice.  # noqa: E501
        :type post_payment_credit_notes_amount: int
        """
        if (self.local_vars_configuration.client_side_validation and
                post_payment_credit_notes_amount is not None and post_payment_credit_notes_amount > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `post_payment_credit_notes_amount`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                post_payment_credit_notes_amount is not None and post_payment_credit_notes_amount < -9223372036854775808):  # noqa: E501
            raise ValueError("Invalid value for `post_payment_credit_notes_amount`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._post_payment_credit_notes_amount = post_payment_credit_notes_amount

    @property
    def pre_payment_credit_notes_amount(self):
        """Gets the pre_payment_credit_notes_amount of this StripeNextInvoice.  # noqa: E501

        Total amount (in cents) of all pre-payment credit notes issued for this invoice.  # noqa: E501

        :return: The pre_payment_credit_notes_amount of this StripeNextInvoice.  # noqa: E501
        :rtype: int
        """
        return self._pre_payment_credit_notes_amount

    @pre_payment_credit_notes_amount.setter
    def pre_payment_credit_notes_amount(self, pre_payment_credit_notes_amount):
        """Sets the pre_payment_credit_notes_amount of this StripeNextInvoice.

        Total amount (in cents) of all pre-payment credit notes issued for this invoice.  # noqa: E501

        :param pre_payment_credit_notes_amount: The pre_payment_credit_notes_amount of this StripeNextInvoice.  # noqa: E501
        :type pre_payment_credit_notes_amount: int
        """
        if (self.local_vars_configuration.client_side_validation and
                pre_payment_credit_notes_amount is not None and pre_payment_credit_notes_amount > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `pre_payment_credit_notes_amount`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                pre_payment_credit_notes_amount is not None and pre_payment_credit_notes_amount < -9223372036854775808):  # noqa: E501
            raise ValueError("Invalid value for `pre_payment_credit_notes_amount`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._pre_payment_credit_notes_amount = pre_payment_credit_notes_amount

    @property
    def receipt_number(self):
        """Gets the receipt_number of this StripeNextInvoice.  # noqa: E501

        This is the transaction number that appears on email receipts sent for this invoice.  # noqa: E501

        :return: The receipt_number of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._receipt_number

    @receipt_number.setter
    def receipt_number(self, receipt_number):
        """Sets the receipt_number of this StripeNextInvoice.

        This is the transaction number that appears on email receipts sent for this invoice.  # noqa: E501

        :param receipt_number: The receipt_number of this StripeNextInvoice.  # noqa: E501
        :type receipt_number: str
        """
        if (self.local_vars_configuration.client_side_validation and
                receipt_number is not None and len(receipt_number) > 64):
            raise ValueError("Invalid value for `receipt_number`, length must be less than or equal to `64`")  # noqa: E501

        self._receipt_number = receipt_number

    @property
    def starting_balance(self):
        """Gets the starting_balance of this StripeNextInvoice.  # noqa: E501

        Starting customer balance (in cents) before attempting to pay invoice. If the invoice has not been attempted yet, this will be the current customer balance.  # noqa: E501

        :return: The starting_balance of this StripeNextInvoice.  # noqa: E501
        :rtype: int
        """
        return self._starting_balance

    @starting_balance.setter
    def starting_balance(self, starting_balance):
        """Sets the starting_balance of this StripeNextInvoice.

        Starting customer balance (in cents) before attempting to pay invoice. If the invoice has not been attempted yet, this will be the current customer balance.  # noqa: E501

        :param starting_balance: The starting_balance of this StripeNextInvoice.  # noqa: E501
        :type starting_balance: int
        """
        if self.local_vars_configuration.client_side_validation and starting_balance is None:  # noqa: E501
            raise ValueError("Invalid value for `starting_balance`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                starting_balance is not None and starting_balance > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `starting_balance`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                starting_balance is not None and starting_balance < -9223372036854775808):  # noqa: E501
            raise ValueError("Invalid value for `starting_balance`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._starting_balance = starting_balance

    @property
    def statement_descriptor(self):
        """Gets the statement_descriptor of this StripeNextInvoice.  # noqa: E501

        An arbitrary string to be displayed on your customer's credit card statement. The statement description may not include <>\"' characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped. While most banks display this information consistently, some may display it incorrectly or not at all.  # noqa: E501

        :return: The statement_descriptor of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._statement_descriptor

    @statement_descriptor.setter
    def statement_descriptor(self, statement_descriptor):
        """Sets the statement_descriptor of this StripeNextInvoice.

        An arbitrary string to be displayed on your customer's credit card statement. The statement description may not include <>\"' characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped. While most banks display this information consistently, some may display it incorrectly or not at all.  # noqa: E501

        :param statement_descriptor: The statement_descriptor of this StripeNextInvoice.  # noqa: E501
        :type statement_descriptor: str
        """
        if (self.local_vars_configuration.client_side_validation and
                statement_descriptor is not None and len(statement_descriptor) > 22):
            raise ValueError("Invalid value for `statement_descriptor`, length must be less than or equal to `22`")  # noqa: E501

        self._statement_descriptor = statement_descriptor

    @property
    def status(self):
        """Gets the status of this StripeNextInvoice.  # noqa: E501

        The status of the invoice, one of draft, open, paid, uncollectible, or void.  # noqa: E501

        :return: The status of this StripeNextInvoice.  # noqa: E501
        :rtype: OneOfStripeNextInvoiceStatusEnumBlankEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StripeNextInvoice.

        The status of the invoice, one of draft, open, paid, uncollectible, or void.  # noqa: E501

        :param status: The status of this StripeNextInvoice.  # noqa: E501
        :type status: OneOfStripeNextInvoiceStatusEnumBlankEnum
        """

        self._status = status

    @property
    def status_transitions(self):
        """Gets the status_transitions of this StripeNextInvoice.  # noqa: E501


        :return: The status_transitions of this StripeNextInvoice.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._status_transitions

    @status_transitions.setter
    def status_transitions(self, status_transitions):
        """Sets the status_transitions of this StripeNextInvoice.


        :param status_transitions: The status_transitions of this StripeNextInvoice.  # noqa: E501
        :type status_transitions: dict(str, object)
        """

        self._status_transitions = status_transitions

    @property
    def subscription_proration_date(self):
        """Gets the subscription_proration_date of this StripeNextInvoice.  # noqa: E501

        Only set for upcoming invoices that preview prorations. The time used to calculate prorations.  # noqa: E501

        :return: The subscription_proration_date of this StripeNextInvoice.  # noqa: E501
        :rtype: datetime
        """
        return self._subscription_proration_date

    @subscription_proration_date.setter
    def subscription_proration_date(self, subscription_proration_date):
        """Sets the subscription_proration_date of this StripeNextInvoice.

        Only set for upcoming invoices that preview prorations. The time used to calculate prorations.  # noqa: E501

        :param subscription_proration_date: The subscription_proration_date of this StripeNextInvoice.  # noqa: E501
        :type subscription_proration_date: datetime
        """

        self._subscription_proration_date = subscription_proration_date

    @property
    def subtotal(self):
        """Gets the subtotal of this StripeNextInvoice.  # noqa: E501

        Total (as decimal) of all subscriptions, invoice items, and prorations on the invoice before any discount or tax is applied.  # noqa: E501

        :return: The subtotal of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this StripeNextInvoice.

        Total (as decimal) of all subscriptions, invoice items, and prorations on the invoice before any discount or tax is applied.  # noqa: E501

        :param subtotal: The subtotal of this StripeNextInvoice.  # noqa: E501
        :type subtotal: str
        """
        if self.local_vars_configuration.client_side_validation and subtotal is None:  # noqa: E501
            raise ValueError("Invalid value for `subtotal`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                subtotal is not None and not re.search(r'^-?\d{0,9}(?:\.\d{0,2})?$', subtotal)):  # noqa: E501
            raise ValueError(r"Invalid value for `subtotal`, must be a follow pattern or equal to `/^-?\d{0,9}(?:\.\d{0,2})?$/`")  # noqa: E501

        self._subtotal = subtotal

    @property
    def tax(self):
        """Gets the tax of this StripeNextInvoice.  # noqa: E501

        The amount (as decimal) of tax included in the total, calculated from ``tax_percent`` and the subtotal. If no ``tax_percent`` is defined, this value will be null.  # noqa: E501

        :return: The tax of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this StripeNextInvoice.

        The amount (as decimal) of tax included in the total, calculated from ``tax_percent`` and the subtotal. If no ``tax_percent`` is defined, this value will be null.  # noqa: E501

        :param tax: The tax of this StripeNextInvoice.  # noqa: E501
        :type tax: str
        """
        if (self.local_vars_configuration.client_side_validation and
                tax is not None and not re.search(r'^-?\d{0,9}(?:\.\d{0,2})?$', tax)):  # noqa: E501
            raise ValueError(r"Invalid value for `tax`, must be a follow pattern or equal to `/^-?\d{0,9}(?:\.\d{0,2})?$/`")  # noqa: E501

        self._tax = tax

    @property
    def tax_percent(self):
        """Gets the tax_percent of this StripeNextInvoice.  # noqa: E501

        This percentage of the subtotal has been added to the total amount of the invoice, including invoice line items and discounts. This field is inherited from the subscription's ``tax_percent`` field, but can be changed before the invoice is paid. This field defaults to null.  # noqa: E501

        :return: The tax_percent of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._tax_percent

    @tax_percent.setter
    def tax_percent(self, tax_percent):
        """Sets the tax_percent of this StripeNextInvoice.

        This percentage of the subtotal has been added to the total amount of the invoice, including invoice line items and discounts. This field is inherited from the subscription's ``tax_percent`` field, but can be changed before the invoice is paid. This field defaults to null.  # noqa: E501

        :param tax_percent: The tax_percent of this StripeNextInvoice.  # noqa: E501
        :type tax_percent: str
        """
        if (self.local_vars_configuration.client_side_validation and
                tax_percent is not None and not re.search(r'^-?\d{0,3}(?:\.\d{0,2})?$', tax_percent)):  # noqa: E501
            raise ValueError(r"Invalid value for `tax_percent`, must be a follow pattern or equal to `/^-?\d{0,3}(?:\.\d{0,2})?$/`")  # noqa: E501

        self._tax_percent = tax_percent

    @property
    def threshold_reason(self):
        """Gets the threshold_reason of this StripeNextInvoice.  # noqa: E501

        If billing_reason is set to subscription_threshold this returns more information on which threshold rules triggered the invoice.  # noqa: E501

        :return: The threshold_reason of this StripeNextInvoice.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._threshold_reason

    @threshold_reason.setter
    def threshold_reason(self, threshold_reason):
        """Sets the threshold_reason of this StripeNextInvoice.

        If billing_reason is set to subscription_threshold this returns more information on which threshold rules triggered the invoice.  # noqa: E501

        :param threshold_reason: The threshold_reason of this StripeNextInvoice.  # noqa: E501
        :type threshold_reason: dict(str, object)
        """

        self._threshold_reason = threshold_reason

    @property
    def total(self):
        """Gets the total of this StripeNextInvoice.  # noqa: E501


        :return: The total of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this StripeNextInvoice.


        :param total: The total of this StripeNextInvoice.  # noqa: E501
        :type total: str
        """
        if self.local_vars_configuration.client_side_validation and total is None:  # noqa: E501
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                total is not None and not re.search(r'^-?\d{0,9}(?:\.\d{0,2})?$', total)):  # noqa: E501
            raise ValueError(r"Invalid value for `total`, must be a follow pattern or equal to `/^-?\d{0,9}(?:\.\d{0,2})?$/`")  # noqa: E501

        self._total = total

    @property
    def webhooks_delivered_at(self):
        """Gets the webhooks_delivered_at of this StripeNextInvoice.  # noqa: E501

        The time at which webhooks for this invoice were successfully delivered (if the invoice had no webhooks to deliver, this will match `date`). Invoice payment is delayed until webhooks are delivered, or until all webhook delivery attempts have been exhausted.  # noqa: E501

        :return: The webhooks_delivered_at of this StripeNextInvoice.  # noqa: E501
        :rtype: datetime
        """
        return self._webhooks_delivered_at

    @webhooks_delivered_at.setter
    def webhooks_delivered_at(self, webhooks_delivered_at):
        """Sets the webhooks_delivered_at of this StripeNextInvoice.

        The time at which webhooks for this invoice were successfully delivered (if the invoice had no webhooks to deliver, this will match `date`). Invoice payment is delayed until webhooks are delivered, or until all webhook delivery attempts have been exhausted.  # noqa: E501

        :param webhooks_delivered_at: The webhooks_delivered_at of this StripeNextInvoice.  # noqa: E501
        :type webhooks_delivered_at: datetime
        """

        self._webhooks_delivered_at = webhooks_delivered_at

    @property
    def djstripe_owner_account(self):
        """Gets the djstripe_owner_account of this StripeNextInvoice.  # noqa: E501

        The Stripe Account this object belongs to.  # noqa: E501

        :return: The djstripe_owner_account of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._djstripe_owner_account

    @djstripe_owner_account.setter
    def djstripe_owner_account(self, djstripe_owner_account):
        """Sets the djstripe_owner_account of this StripeNextInvoice.

        The Stripe Account this object belongs to.  # noqa: E501

        :param djstripe_owner_account: The djstripe_owner_account of this StripeNextInvoice.  # noqa: E501
        :type djstripe_owner_account: str
        """

        self._djstripe_owner_account = djstripe_owner_account

    @property
    def charge(self):
        """Gets the charge of this StripeNextInvoice.  # noqa: E501

        The latest charge generated for this invoice, if any.  # noqa: E501

        :return: The charge of this StripeNextInvoice.  # noqa: E501
        :rtype: int
        """
        return self._charge

    @charge.setter
    def charge(self, charge):
        """Sets the charge of this StripeNextInvoice.

        The latest charge generated for this invoice, if any.  # noqa: E501

        :param charge: The charge of this StripeNextInvoice.  # noqa: E501
        :type charge: int
        """

        self._charge = charge

    @property
    def customer(self):
        """Gets the customer of this StripeNextInvoice.  # noqa: E501

        The customer associated with this invoice.  # noqa: E501

        :return: The customer of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this StripeNextInvoice.

        The customer associated with this invoice.  # noqa: E501

        :param customer: The customer of this StripeNextInvoice.  # noqa: E501
        :type customer: str
        """
        if self.local_vars_configuration.client_side_validation and customer is None:  # noqa: E501
            raise ValueError("Invalid value for `customer`, must not be `None`")  # noqa: E501

        self._customer = customer

    @property
    def default_payment_method(self):
        """Gets the default_payment_method of this StripeNextInvoice.  # noqa: E501

        Default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings.  # noqa: E501

        :return: The default_payment_method of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._default_payment_method

    @default_payment_method.setter
    def default_payment_method(self, default_payment_method):
        """Sets the default_payment_method of this StripeNextInvoice.

        Default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings.  # noqa: E501

        :param default_payment_method: The default_payment_method of this StripeNextInvoice.  # noqa: E501
        :type default_payment_method: str
        """

        self._default_payment_method = default_payment_method

    @property
    def payment_intent(self):
        """Gets the payment_intent of this StripeNextInvoice.  # noqa: E501

        The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice.Note that voiding an invoice will cancel the PaymentIntent  # noqa: E501

        :return: The payment_intent of this StripeNextInvoice.  # noqa: E501
        :rtype: int
        """
        return self._payment_intent

    @payment_intent.setter
    def payment_intent(self, payment_intent):
        """Sets the payment_intent of this StripeNextInvoice.

        The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice.Note that voiding an invoice will cancel the PaymentIntent  # noqa: E501

        :param payment_intent: The payment_intent of this StripeNextInvoice.  # noqa: E501
        :type payment_intent: int
        """

        self._payment_intent = payment_intent

    @property
    def subscription(self):
        """Gets the subscription of this StripeNextInvoice.  # noqa: E501

        The subscription that this invoice was prepared for, if any.  # noqa: E501

        :return: The subscription of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this StripeNextInvoice.

        The subscription that this invoice was prepared for, if any.  # noqa: E501

        :param subscription: The subscription of this StripeNextInvoice.  # noqa: E501
        :type subscription: str
        """

        self._subscription = subscription

    @property
    def default_source(self):
        """Gets the default_source of this StripeNextInvoice.  # noqa: E501

        The default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.  # noqa: E501

        :return: The default_source of this StripeNextInvoice.  # noqa: E501
        :rtype: str
        """
        return self._default_source

    @default_source.setter
    def default_source(self, default_source):
        """Sets the default_source of this StripeNextInvoice.

        The default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.  # noqa: E501

        :param default_source: The default_source of this StripeNextInvoice.  # noqa: E501
        :type default_source: str
        """

        self._default_source = default_source

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StripeNextInvoice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StripeNextInvoice):
            return True

        return self.to_dict() != other.to_dict()
