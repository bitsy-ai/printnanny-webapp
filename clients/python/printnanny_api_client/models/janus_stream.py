# coding: utf-8

"""
    printnanny-api-client

    Official API client library for print-nanny.com  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Contact: leigh@print-nanny.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from printnanny_api_client.configuration import Configuration


class JanusStream(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'auth': 'JanusAuth',
        'api_domain': 'str',
        'api_url': 'str',
        'admin_url': 'str',
        'rtp_domain': 'str',
        'websocket_url': 'str',
        'created_dt': 'datetime',
        'updated_dt': 'datetime',
        'config_type': 'JanusConfigType',
        'active': 'bool',
        'secret': 'str',
        'pin': 'str',
        'info': 'dict(str, object)',
        'port': 'int',
        'device': 'int'
    }

    attribute_map = {
        'id': 'id',
        'auth': 'auth',
        'api_domain': 'api_domain',
        'api_url': 'api_url',
        'admin_url': 'admin_url',
        'rtp_domain': 'rtp_domain',
        'websocket_url': 'websocket_url',
        'created_dt': 'created_dt',
        'updated_dt': 'updated_dt',
        'config_type': 'config_type',
        'active': 'active',
        'secret': 'secret',
        'pin': 'pin',
        'info': 'info',
        'port': 'port',
        'device': 'device'
    }

    def __init__(self, id=None, auth=None, api_domain=None, api_url=None, admin_url=None, rtp_domain=None, websocket_url=None, created_dt=None, updated_dt=None, config_type=None, active=None, secret=None, pin=None, info=None, port=None, device=None, local_vars_configuration=None):  # noqa: E501
        """JanusStream - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._auth = None
        self._api_domain = None
        self._api_url = None
        self._admin_url = None
        self._rtp_domain = None
        self._websocket_url = None
        self._created_dt = None
        self._updated_dt = None
        self._config_type = None
        self._active = None
        self._secret = None
        self._pin = None
        self._info = None
        self._port = None
        self._device = None
        self.discriminator = None

        self.id = id
        self.auth = auth
        self.api_domain = api_domain
        self.api_url = api_url
        self.admin_url = admin_url
        self.rtp_domain = rtp_domain
        self.websocket_url = websocket_url
        self.created_dt = created_dt
        self.updated_dt = updated_dt
        if config_type is not None:
            self.config_type = config_type
        if active is not None:
            self.active = active
        if secret is not None:
            self.secret = secret
        if pin is not None:
            self.pin = pin
        if info is not None:
            self.info = info
        self.port = port
        self.device = device

    @property
    def id(self):
        """Gets the id of this JanusStream.  # noqa: E501


        :return: The id of this JanusStream.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JanusStream.


        :param id: The id of this JanusStream.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def auth(self):
        """Gets the auth of this JanusStream.  # noqa: E501


        :return: The auth of this JanusStream.  # noqa: E501
        :rtype: JanusAuth
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this JanusStream.


        :param auth: The auth of this JanusStream.  # noqa: E501
        :type auth: JanusAuth
        """

        self._auth = auth

    @property
    def api_domain(self):
        """Gets the api_domain of this JanusStream.  # noqa: E501


        :return: The api_domain of this JanusStream.  # noqa: E501
        :rtype: str
        """
        return self._api_domain

    @api_domain.setter
    def api_domain(self, api_domain):
        """Sets the api_domain of this JanusStream.


        :param api_domain: The api_domain of this JanusStream.  # noqa: E501
        :type api_domain: str
        """
        if self.local_vars_configuration.client_side_validation and api_domain is None:  # noqa: E501
            raise ValueError("Invalid value for `api_domain`, must not be `None`")  # noqa: E501

        self._api_domain = api_domain

    @property
    def api_url(self):
        """Gets the api_url of this JanusStream.  # noqa: E501


        :return: The api_url of this JanusStream.  # noqa: E501
        :rtype: str
        """
        return self._api_url

    @api_url.setter
    def api_url(self, api_url):
        """Sets the api_url of this JanusStream.


        :param api_url: The api_url of this JanusStream.  # noqa: E501
        :type api_url: str
        """
        if self.local_vars_configuration.client_side_validation and api_url is None:  # noqa: E501
            raise ValueError("Invalid value for `api_url`, must not be `None`")  # noqa: E501

        self._api_url = api_url

    @property
    def admin_url(self):
        """Gets the admin_url of this JanusStream.  # noqa: E501


        :return: The admin_url of this JanusStream.  # noqa: E501
        :rtype: str
        """
        return self._admin_url

    @admin_url.setter
    def admin_url(self, admin_url):
        """Sets the admin_url of this JanusStream.


        :param admin_url: The admin_url of this JanusStream.  # noqa: E501
        :type admin_url: str
        """
        if self.local_vars_configuration.client_side_validation and admin_url is None:  # noqa: E501
            raise ValueError("Invalid value for `admin_url`, must not be `None`")  # noqa: E501

        self._admin_url = admin_url

    @property
    def rtp_domain(self):
        """Gets the rtp_domain of this JanusStream.  # noqa: E501


        :return: The rtp_domain of this JanusStream.  # noqa: E501
        :rtype: str
        """
        return self._rtp_domain

    @rtp_domain.setter
    def rtp_domain(self, rtp_domain):
        """Sets the rtp_domain of this JanusStream.


        :param rtp_domain: The rtp_domain of this JanusStream.  # noqa: E501
        :type rtp_domain: str
        """
        if self.local_vars_configuration.client_side_validation and rtp_domain is None:  # noqa: E501
            raise ValueError("Invalid value for `rtp_domain`, must not be `None`")  # noqa: E501

        self._rtp_domain = rtp_domain

    @property
    def websocket_url(self):
        """Gets the websocket_url of this JanusStream.  # noqa: E501


        :return: The websocket_url of this JanusStream.  # noqa: E501
        :rtype: str
        """
        return self._websocket_url

    @websocket_url.setter
    def websocket_url(self, websocket_url):
        """Sets the websocket_url of this JanusStream.


        :param websocket_url: The websocket_url of this JanusStream.  # noqa: E501
        :type websocket_url: str
        """
        if self.local_vars_configuration.client_side_validation and websocket_url is None:  # noqa: E501
            raise ValueError("Invalid value for `websocket_url`, must not be `None`")  # noqa: E501

        self._websocket_url = websocket_url

    @property
    def created_dt(self):
        """Gets the created_dt of this JanusStream.  # noqa: E501


        :return: The created_dt of this JanusStream.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this JanusStream.


        :param created_dt: The created_dt of this JanusStream.  # noqa: E501
        :type created_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `created_dt`, must not be `None`")  # noqa: E501

        self._created_dt = created_dt

    @property
    def updated_dt(self):
        """Gets the updated_dt of this JanusStream.  # noqa: E501


        :return: The updated_dt of this JanusStream.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this JanusStream.


        :param updated_dt: The updated_dt of this JanusStream.  # noqa: E501
        :type updated_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_dt`, must not be `None`")  # noqa: E501

        self._updated_dt = updated_dt

    @property
    def config_type(self):
        """Gets the config_type of this JanusStream.  # noqa: E501


        :return: The config_type of this JanusStream.  # noqa: E501
        :rtype: JanusConfigType
        """
        return self._config_type

    @config_type.setter
    def config_type(self, config_type):
        """Sets the config_type of this JanusStream.


        :param config_type: The config_type of this JanusStream.  # noqa: E501
        :type config_type: JanusConfigType
        """

        self._config_type = config_type

    @property
    def active(self):
        """Gets the active of this JanusStream.  # noqa: E501


        :return: The active of this JanusStream.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this JanusStream.


        :param active: The active of this JanusStream.  # noqa: E501
        :type active: bool
        """

        self._active = active

    @property
    def secret(self):
        """Gets the secret of this JanusStream.  # noqa: E501


        :return: The secret of this JanusStream.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this JanusStream.


        :param secret: The secret of this JanusStream.  # noqa: E501
        :type secret: str
        """
        if (self.local_vars_configuration.client_side_validation and
                secret is not None and len(secret) > 255):
            raise ValueError("Invalid value for `secret`, length must be less than or equal to `255`")  # noqa: E501

        self._secret = secret

    @property
    def pin(self):
        """Gets the pin of this JanusStream.  # noqa: E501


        :return: The pin of this JanusStream.  # noqa: E501
        :rtype: str
        """
        return self._pin

    @pin.setter
    def pin(self, pin):
        """Sets the pin of this JanusStream.


        :param pin: The pin of this JanusStream.  # noqa: E501
        :type pin: str
        """
        if (self.local_vars_configuration.client_side_validation and
                pin is not None and len(pin) > 255):
            raise ValueError("Invalid value for `pin`, length must be less than or equal to `255`")  # noqa: E501

        self._pin = pin

    @property
    def info(self):
        """Gets the info of this JanusStream.  # noqa: E501


        :return: The info of this JanusStream.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this JanusStream.


        :param info: The info of this JanusStream.  # noqa: E501
        :type info: dict(str, object)
        """

        self._info = info

    @property
    def port(self):
        """Gets the port of this JanusStream.  # noqa: E501


        :return: The port of this JanusStream.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this JanusStream.


        :param port: The port of this JanusStream.  # noqa: E501
        :type port: int
        """
        if self.local_vars_configuration.client_side_validation and port is None:  # noqa: E501
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def device(self):
        """Gets the device of this JanusStream.  # noqa: E501


        :return: The device of this JanusStream.  # noqa: E501
        :rtype: int
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this JanusStream.


        :param device: The device of this JanusStream.  # noqa: E501
        :type device: int
        """
        if self.local_vars_configuration.client_side_validation and device is None:  # noqa: E501
            raise ValueError("Invalid value for `device`, must not be `None`")  # noqa: E501

        self._device = device

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JanusStream):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JanusStream):
            return True

        return self.to_dict() != other.to_dict()
