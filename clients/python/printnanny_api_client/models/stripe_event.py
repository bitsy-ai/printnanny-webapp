# coding: utf-8

"""
    printnanny-api-client

    Official API client library for printnanny.ai  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Contact: leigh@printnanny.ai
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from printnanny_api_client.configuration import Configuration


class StripeEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'djstripe_id': 'int',
        'djstripe_created': 'datetime',
        'djstripe_updated': 'datetime',
        'id': 'str',
        'livemode': 'bool',
        'created': 'datetime',
        'metadata': 'dict(str, object)',
        'description': 'str',
        'api_version': 'str',
        'data': 'dict(str, object)',
        'request_id': 'str',
        'idempotency_key': 'str',
        'type': 'str',
        'djstripe_owner_account': 'str'
    }

    attribute_map = {
        'djstripe_id': 'djstripe_id',
        'djstripe_created': 'djstripe_created',
        'djstripe_updated': 'djstripe_updated',
        'id': 'id',
        'livemode': 'livemode',
        'created': 'created',
        'metadata': 'metadata',
        'description': 'description',
        'api_version': 'api_version',
        'data': 'data',
        'request_id': 'request_id',
        'idempotency_key': 'idempotency_key',
        'type': 'type',
        'djstripe_owner_account': 'djstripe_owner_account'
    }

    def __init__(self, djstripe_id=None, djstripe_created=None, djstripe_updated=None, id=None, livemode=None, created=None, metadata=None, description=None, api_version=None, data=None, request_id=None, idempotency_key=None, type=None, djstripe_owner_account=None, local_vars_configuration=None):  # noqa: E501
        """StripeEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._djstripe_id = None
        self._djstripe_created = None
        self._djstripe_updated = None
        self._id = None
        self._livemode = None
        self._created = None
        self._metadata = None
        self._description = None
        self._api_version = None
        self._data = None
        self._request_id = None
        self._idempotency_key = None
        self._type = None
        self._djstripe_owner_account = None
        self.discriminator = None

        self.djstripe_id = djstripe_id
        self.djstripe_created = djstripe_created
        self.djstripe_updated = djstripe_updated
        self.id = id
        self.livemode = livemode
        self.created = created
        self.metadata = metadata
        self.description = description
        if api_version is not None:
            self.api_version = api_version
        self.data = data
        if request_id is not None:
            self.request_id = request_id
        if idempotency_key is not None:
            self.idempotency_key = idempotency_key
        self.type = type
        self.djstripe_owner_account = djstripe_owner_account

    @property
    def djstripe_id(self):
        """Gets the djstripe_id of this StripeEvent.  # noqa: E501


        :return: The djstripe_id of this StripeEvent.  # noqa: E501
        :rtype: int
        """
        return self._djstripe_id

    @djstripe_id.setter
    def djstripe_id(self, djstripe_id):
        """Sets the djstripe_id of this StripeEvent.


        :param djstripe_id: The djstripe_id of this StripeEvent.  # noqa: E501
        :type djstripe_id: int
        """
        if self.local_vars_configuration.client_side_validation and djstripe_id is None:  # noqa: E501
            raise ValueError("Invalid value for `djstripe_id`, must not be `None`")  # noqa: E501

        self._djstripe_id = djstripe_id

    @property
    def djstripe_created(self):
        """Gets the djstripe_created of this StripeEvent.  # noqa: E501


        :return: The djstripe_created of this StripeEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._djstripe_created

    @djstripe_created.setter
    def djstripe_created(self, djstripe_created):
        """Sets the djstripe_created of this StripeEvent.


        :param djstripe_created: The djstripe_created of this StripeEvent.  # noqa: E501
        :type djstripe_created: datetime
        """
        if self.local_vars_configuration.client_side_validation and djstripe_created is None:  # noqa: E501
            raise ValueError("Invalid value for `djstripe_created`, must not be `None`")  # noqa: E501

        self._djstripe_created = djstripe_created

    @property
    def djstripe_updated(self):
        """Gets the djstripe_updated of this StripeEvent.  # noqa: E501


        :return: The djstripe_updated of this StripeEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._djstripe_updated

    @djstripe_updated.setter
    def djstripe_updated(self, djstripe_updated):
        """Sets the djstripe_updated of this StripeEvent.


        :param djstripe_updated: The djstripe_updated of this StripeEvent.  # noqa: E501
        :type djstripe_updated: datetime
        """
        if self.local_vars_configuration.client_side_validation and djstripe_updated is None:  # noqa: E501
            raise ValueError("Invalid value for `djstripe_updated`, must not be `None`")  # noqa: E501

        self._djstripe_updated = djstripe_updated

    @property
    def id(self):
        """Gets the id of this StripeEvent.  # noqa: E501


        :return: The id of this StripeEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StripeEvent.


        :param id: The id of this StripeEvent.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) > 255):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")  # noqa: E501

        self._id = id

    @property
    def livemode(self):
        """Gets the livemode of this StripeEvent.  # noqa: E501

        Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.  # noqa: E501

        :return: The livemode of this StripeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._livemode

    @livemode.setter
    def livemode(self, livemode):
        """Sets the livemode of this StripeEvent.

        Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.  # noqa: E501

        :param livemode: The livemode of this StripeEvent.  # noqa: E501
        :type livemode: bool
        """

        self._livemode = livemode

    @property
    def created(self):
        """Gets the created of this StripeEvent.  # noqa: E501

        The datetime this object was created in stripe.  # noqa: E501

        :return: The created of this StripeEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this StripeEvent.

        The datetime this object was created in stripe.  # noqa: E501

        :param created: The created of this StripeEvent.  # noqa: E501
        :type created: datetime
        """

        self._created = created

    @property
    def metadata(self):
        """Gets the metadata of this StripeEvent.  # noqa: E501

        A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.  # noqa: E501

        :return: The metadata of this StripeEvent.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this StripeEvent.

        A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.  # noqa: E501

        :param metadata: The metadata of this StripeEvent.  # noqa: E501
        :type metadata: dict(str, object)
        """

        self._metadata = metadata

    @property
    def description(self):
        """Gets the description of this StripeEvent.  # noqa: E501

        A description of this object.  # noqa: E501

        :return: The description of this StripeEvent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StripeEvent.

        A description of this object.  # noqa: E501

        :param description: The description of this StripeEvent.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def api_version(self):
        """Gets the api_version of this StripeEvent.  # noqa: E501

        the API version at which the event data was rendered. Blank for old entries only, all new entries will have this value  # noqa: E501

        :return: The api_version of this StripeEvent.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this StripeEvent.

        the API version at which the event data was rendered. Blank for old entries only, all new entries will have this value  # noqa: E501

        :param api_version: The api_version of this StripeEvent.  # noqa: E501
        :type api_version: str
        """
        if (self.local_vars_configuration.client_side_validation and
                api_version is not None and len(api_version) > 15):
            raise ValueError("Invalid value for `api_version`, length must be less than or equal to `15`")  # noqa: E501

        self._api_version = api_version

    @property
    def data(self):
        """Gets the data of this StripeEvent.  # noqa: E501

        data received at webhook. data should be considered to be garbage until validity check is run and valid flag is set  # noqa: E501

        :return: The data of this StripeEvent.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this StripeEvent.

        data received at webhook. data should be considered to be garbage until validity check is run and valid flag is set  # noqa: E501

        :param data: The data of this StripeEvent.  # noqa: E501
        :type data: dict(str, object)
        """
        if self.local_vars_configuration.client_side_validation and data is None:  # noqa: E501
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def request_id(self):
        """Gets the request_id of this StripeEvent.  # noqa: E501

        Information about the request that triggered this event, for traceability purposes. If empty string then this is an old entry without that data. If Null then this is not an old entry, but a Stripe 'automated' event with no associated request.  # noqa: E501

        :return: The request_id of this StripeEvent.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this StripeEvent.

        Information about the request that triggered this event, for traceability purposes. If empty string then this is an old entry without that data. If Null then this is not an old entry, but a Stripe 'automated' event with no associated request.  # noqa: E501

        :param request_id: The request_id of this StripeEvent.  # noqa: E501
        :type request_id: str
        """
        if (self.local_vars_configuration.client_side_validation and
                request_id is not None and len(request_id) > 50):
            raise ValueError("Invalid value for `request_id`, length must be less than or equal to `50`")  # noqa: E501

        self._request_id = request_id

    @property
    def idempotency_key(self):
        """Gets the idempotency_key of this StripeEvent.  # noqa: E501


        :return: The idempotency_key of this StripeEvent.  # noqa: E501
        :rtype: str
        """
        return self._idempotency_key

    @idempotency_key.setter
    def idempotency_key(self, idempotency_key):
        """Sets the idempotency_key of this StripeEvent.


        :param idempotency_key: The idempotency_key of this StripeEvent.  # noqa: E501
        :type idempotency_key: str
        """

        self._idempotency_key = idempotency_key

    @property
    def type(self):
        """Gets the type of this StripeEvent.  # noqa: E501

        Stripe's event description code  # noqa: E501

        :return: The type of this StripeEvent.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StripeEvent.

        Stripe's event description code  # noqa: E501

        :param type: The type of this StripeEvent.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                type is not None and len(type) > 250):
            raise ValueError("Invalid value for `type`, length must be less than or equal to `250`")  # noqa: E501

        self._type = type

    @property
    def djstripe_owner_account(self):
        """Gets the djstripe_owner_account of this StripeEvent.  # noqa: E501

        The Stripe Account this object belongs to.  # noqa: E501

        :return: The djstripe_owner_account of this StripeEvent.  # noqa: E501
        :rtype: str
        """
        return self._djstripe_owner_account

    @djstripe_owner_account.setter
    def djstripe_owner_account(self, djstripe_owner_account):
        """Sets the djstripe_owner_account of this StripeEvent.

        The Stripe Account this object belongs to.  # noqa: E501

        :param djstripe_owner_account: The djstripe_owner_account of this StripeEvent.  # noqa: E501
        :type djstripe_owner_account: str
        """

        self._djstripe_owner_account = djstripe_owner_account

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StripeEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StripeEvent):
            return True

        return self.to_dict() != other.to_dict()
