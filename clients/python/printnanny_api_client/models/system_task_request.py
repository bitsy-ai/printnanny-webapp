# coding: utf-8

"""
    printnanny-api-client

    Official API client library for print-nanny.com  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Contact: leigh@print-nanny.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from printnanny_api_client.configuration import Configuration


class SystemTaskRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'msg': 'str',
        'wiki_url': 'str',
        'status': 'SystemTaskStatus',
        'type': 'SystemTaskType',
        'ansible_facts': 'dict(str, object)',
        'device': 'int'
    }

    attribute_map = {
        'msg': 'msg',
        'wiki_url': 'wiki_url',
        'status': 'status',
        'type': 'type',
        'ansible_facts': 'ansible_facts',
        'device': 'device'
    }

    def __init__(self, msg=None, wiki_url=None, status=None, type=None, ansible_facts=None, device=None, local_vars_configuration=None):  # noqa: E501
        """SystemTaskRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._msg = None
        self._wiki_url = None
        self._status = None
        self._type = None
        self._ansible_facts = None
        self._device = None
        self.discriminator = None

        self.msg = msg
        self.wiki_url = wiki_url
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if ansible_facts is not None:
            self.ansible_facts = ansible_facts
        self.device = device

    @property
    def msg(self):
        """Gets the msg of this SystemTaskRequest.  # noqa: E501


        :return: The msg of this SystemTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this SystemTaskRequest.


        :param msg: The msg of this SystemTaskRequest.  # noqa: E501
        :type msg: str
        """
        if (self.local_vars_configuration.client_side_validation and
                msg is not None and len(msg) > 1024):
            raise ValueError("Invalid value for `msg`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                msg is not None and len(msg) < 1):
            raise ValueError("Invalid value for `msg`, length must be greater than or equal to `1`")  # noqa: E501

        self._msg = msg

    @property
    def wiki_url(self):
        """Gets the wiki_url of this SystemTaskRequest.  # noqa: E501


        :return: The wiki_url of this SystemTaskRequest.  # noqa: E501
        :rtype: str
        """
        return self._wiki_url

    @wiki_url.setter
    def wiki_url(self, wiki_url):
        """Sets the wiki_url of this SystemTaskRequest.


        :param wiki_url: The wiki_url of this SystemTaskRequest.  # noqa: E501
        :type wiki_url: str
        """
        if (self.local_vars_configuration.client_side_validation and
                wiki_url is not None and len(wiki_url) > 1024):
            raise ValueError("Invalid value for `wiki_url`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                wiki_url is not None and len(wiki_url) < 1):
            raise ValueError("Invalid value for `wiki_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._wiki_url = wiki_url

    @property
    def status(self):
        """Gets the status of this SystemTaskRequest.  # noqa: E501


        :return: The status of this SystemTaskRequest.  # noqa: E501
        :rtype: SystemTaskStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SystemTaskRequest.


        :param status: The status of this SystemTaskRequest.  # noqa: E501
        :type status: SystemTaskStatus
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this SystemTaskRequest.  # noqa: E501


        :return: The type of this SystemTaskRequest.  # noqa: E501
        :rtype: SystemTaskType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SystemTaskRequest.


        :param type: The type of this SystemTaskRequest.  # noqa: E501
        :type type: SystemTaskType
        """

        self._type = type

    @property
    def ansible_facts(self):
        """Gets the ansible_facts of this SystemTaskRequest.  # noqa: E501


        :return: The ansible_facts of this SystemTaskRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._ansible_facts

    @ansible_facts.setter
    def ansible_facts(self, ansible_facts):
        """Sets the ansible_facts of this SystemTaskRequest.


        :param ansible_facts: The ansible_facts of this SystemTaskRequest.  # noqa: E501
        :type ansible_facts: dict(str, object)
        """

        self._ansible_facts = ansible_facts

    @property
    def device(self):
        """Gets the device of this SystemTaskRequest.  # noqa: E501


        :return: The device of this SystemTaskRequest.  # noqa: E501
        :rtype: int
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this SystemTaskRequest.


        :param device: The device of this SystemTaskRequest.  # noqa: E501
        :type device: int
        """
        if self.local_vars_configuration.client_side_validation and device is None:  # noqa: E501
            raise ValueError("Invalid value for `device`, must not be `None`")  # noqa: E501

        self._device = device

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemTaskRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SystemTaskRequest):
            return True

        return self.to_dict() != other.to_dict()
