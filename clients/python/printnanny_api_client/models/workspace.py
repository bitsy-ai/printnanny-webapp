# coding: utf-8

"""
    printnanny-api-client

    Official API client library for printnanny.ai  # noqa: E501

    The version of the OpenAPI document: 0.135.0
    Contact: leigh@printnanny.ai
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from printnanny_api_client.configuration import Configuration


class Workspace(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'users': 'list[User]',
        'owner': 'WorkspaceOwner',
        'pending_invites': 'list[WorkspaceInvite]',
        'name': 'str',
        'is_active': 'bool',
        'created': 'datetime',
        'modified': 'datetime',
        'slug': 'str',
        'description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'users': 'users',
        'owner': 'owner',
        'pending_invites': 'pending_invites',
        'name': 'name',
        'is_active': 'is_active',
        'created': 'created',
        'modified': 'modified',
        'slug': 'slug',
        'description': 'description'
    }

    def __init__(self, id=None, users=None, owner=None, pending_invites=None, name=None, is_active=None, created=None, modified=None, slug=None, description=None, local_vars_configuration=None):  # noqa: E501
        """Workspace - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._users = None
        self._owner = None
        self._pending_invites = None
        self._name = None
        self._is_active = None
        self._created = None
        self._modified = None
        self._slug = None
        self._description = None
        self.discriminator = None

        self.id = id
        self.users = users
        self.owner = owner
        self.pending_invites = pending_invites
        self.name = name
        if is_active is not None:
            self.is_active = is_active
        self.created = created
        self.modified = modified
        self.slug = slug
        self.description = description

    @property
    def id(self):
        """Gets the id of this Workspace.  # noqa: E501


        :return: The id of this Workspace.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Workspace.


        :param id: The id of this Workspace.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def users(self):
        """Gets the users of this Workspace.  # noqa: E501


        :return: The users of this Workspace.  # noqa: E501
        :rtype: list[User]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Workspace.


        :param users: The users of this Workspace.  # noqa: E501
        :type users: list[User]
        """
        if self.local_vars_configuration.client_side_validation and users is None:  # noqa: E501
            raise ValueError("Invalid value for `users`, must not be `None`")  # noqa: E501

        self._users = users

    @property
    def owner(self):
        """Gets the owner of this Workspace.  # noqa: E501


        :return: The owner of this Workspace.  # noqa: E501
        :rtype: WorkspaceOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Workspace.


        :param owner: The owner of this Workspace.  # noqa: E501
        :type owner: WorkspaceOwner
        """

        self._owner = owner

    @property
    def pending_invites(self):
        """Gets the pending_invites of this Workspace.  # noqa: E501


        :return: The pending_invites of this Workspace.  # noqa: E501
        :rtype: list[WorkspaceInvite]
        """
        return self._pending_invites

    @pending_invites.setter
    def pending_invites(self, pending_invites):
        """Sets the pending_invites of this Workspace.


        :param pending_invites: The pending_invites of this Workspace.  # noqa: E501
        :type pending_invites: list[WorkspaceInvite]
        """
        if self.local_vars_configuration.client_side_validation and pending_invites is None:  # noqa: E501
            raise ValueError("Invalid value for `pending_invites`, must not be `None`")  # noqa: E501

        self._pending_invites = pending_invites

    @property
    def name(self):
        """Gets the name of this Workspace.  # noqa: E501

        The name of the organization  # noqa: E501

        :return: The name of this Workspace.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Workspace.

        The name of the organization  # noqa: E501

        :param name: The name of this Workspace.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501

        self._name = name

    @property
    def is_active(self):
        """Gets the is_active of this Workspace.  # noqa: E501


        :return: The is_active of this Workspace.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Workspace.


        :param is_active: The is_active of this Workspace.  # noqa: E501
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def created(self):
        """Gets the created of this Workspace.  # noqa: E501


        :return: The created of this Workspace.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Workspace.


        :param created: The created of this Workspace.  # noqa: E501
        :type created: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this Workspace.  # noqa: E501


        :return: The modified of this Workspace.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Workspace.


        :param modified: The modified of this Workspace.  # noqa: E501
        :type modified: datetime
        """
        if self.local_vars_configuration.client_side_validation and modified is None:  # noqa: E501
            raise ValueError("Invalid value for `modified`, must not be `None`")  # noqa: E501

        self._modified = modified

    @property
    def slug(self):
        """Gets the slug of this Workspace.  # noqa: E501

        The name in all lowercase, suitable for URL identification  # noqa: E501

        :return: The slug of this Workspace.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Workspace.

        The name in all lowercase, suitable for URL identification  # noqa: E501

        :param slug: The slug of this Workspace.  # noqa: E501
        :type slug: str
        """
        if self.local_vars_configuration.client_side_validation and slug is None:  # noqa: E501
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                slug is not None and len(slug) > 200):
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug)):  # noqa: E501
            raise ValueError(r"Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")  # noqa: E501

        self._slug = slug

    @property
    def description(self):
        """Gets the description of this Workspace.  # noqa: E501


        :return: The description of this Workspace.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Workspace.


        :param description: The description of this Workspace.  # noqa: E501
        :type description: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 255):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501

        self._description = description

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Workspace):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Workspace):
            return True

        return self.to_dict() != other.to_dict()
