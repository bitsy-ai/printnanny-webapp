# coding: utf-8

"""
    printnanny-api-client

    Official API client library forprintnanny.ai print-nanny.com  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Contact: leigh@printnanny.ai
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from printnanny_api_client.configuration import Configuration


class Nested(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'password': 'str',
        'is_serviceuser': 'bool',
        'is_superuser': 'bool',
        'is_staff': 'bool',
        'is_active': 'bool',
        'date_joined': 'datetime',
        'last_login': 'datetime',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'groups': 'list[int]',
        'user_permissions': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'password': 'password',
        'is_serviceuser': 'is_serviceuser',
        'is_superuser': 'is_superuser',
        'is_staff': 'is_staff',
        'is_active': 'is_active',
        'date_joined': 'date_joined',
        'last_login': 'last_login',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email': 'email',
        'groups': 'groups',
        'user_permissions': 'user_permissions'
    }

    def __init__(self, id=None, password=None, is_serviceuser=None, is_superuser=None, is_staff=None, is_active=None, date_joined=None, last_login=None, first_name=None, last_name=None, email=None, groups=None, user_permissions=None, local_vars_configuration=None):  # noqa: E501
        """Nested - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._password = None
        self._is_serviceuser = None
        self._is_superuser = None
        self._is_staff = None
        self._is_active = None
        self._date_joined = None
        self._last_login = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._groups = None
        self._user_permissions = None
        self.discriminator = None

        self.id = id
        self.password = password
        if is_serviceuser is not None:
            self.is_serviceuser = is_serviceuser
        if is_superuser is not None:
            self.is_superuser = is_superuser
        if is_staff is not None:
            self.is_staff = is_staff
        if is_active is not None:
            self.is_active = is_active
        if date_joined is not None:
            self.date_joined = date_joined
        if last_login is not None:
            self.last_login = last_login
        self.first_name = first_name
        self.last_name = last_name
        self.email = email
        if groups is not None:
            self.groups = groups
        if user_permissions is not None:
            self.user_permissions = user_permissions

    @property
    def id(self):
        """Gets the id of this Nested.  # noqa: E501


        :return: The id of this Nested.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Nested.


        :param id: The id of this Nested.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def password(self):
        """Gets the password of this Nested.  # noqa: E501


        :return: The password of this Nested.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Nested.


        :param password: The password of this Nested.  # noqa: E501
        :type password: str
        """
        if self.local_vars_configuration.client_side_validation and password is None:  # noqa: E501
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                password is not None and len(password) > 128):
            raise ValueError("Invalid value for `password`, length must be less than or equal to `128`")  # noqa: E501

        self._password = password

    @property
    def is_serviceuser(self):
        """Gets the is_serviceuser of this Nested.  # noqa: E501


        :return: The is_serviceuser of this Nested.  # noqa: E501
        :rtype: bool
        """
        return self._is_serviceuser

    @is_serviceuser.setter
    def is_serviceuser(self, is_serviceuser):
        """Sets the is_serviceuser of this Nested.


        :param is_serviceuser: The is_serviceuser of this Nested.  # noqa: E501
        :type is_serviceuser: bool
        """

        self._is_serviceuser = is_serviceuser

    @property
    def is_superuser(self):
        """Gets the is_superuser of this Nested.  # noqa: E501


        :return: The is_superuser of this Nested.  # noqa: E501
        :rtype: bool
        """
        return self._is_superuser

    @is_superuser.setter
    def is_superuser(self, is_superuser):
        """Sets the is_superuser of this Nested.


        :param is_superuser: The is_superuser of this Nested.  # noqa: E501
        :type is_superuser: bool
        """

        self._is_superuser = is_superuser

    @property
    def is_staff(self):
        """Gets the is_staff of this Nested.  # noqa: E501


        :return: The is_staff of this Nested.  # noqa: E501
        :rtype: bool
        """
        return self._is_staff

    @is_staff.setter
    def is_staff(self, is_staff):
        """Sets the is_staff of this Nested.


        :param is_staff: The is_staff of this Nested.  # noqa: E501
        :type is_staff: bool
        """

        self._is_staff = is_staff

    @property
    def is_active(self):
        """Gets the is_active of this Nested.  # noqa: E501


        :return: The is_active of this Nested.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Nested.


        :param is_active: The is_active of this Nested.  # noqa: E501
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def date_joined(self):
        """Gets the date_joined of this Nested.  # noqa: E501


        :return: The date_joined of this Nested.  # noqa: E501
        :rtype: datetime
        """
        return self._date_joined

    @date_joined.setter
    def date_joined(self, date_joined):
        """Sets the date_joined of this Nested.


        :param date_joined: The date_joined of this Nested.  # noqa: E501
        :type date_joined: datetime
        """

        self._date_joined = date_joined

    @property
    def last_login(self):
        """Gets the last_login of this Nested.  # noqa: E501


        :return: The last_login of this Nested.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this Nested.


        :param last_login: The last_login of this Nested.  # noqa: E501
        :type last_login: datetime
        """

        self._last_login = last_login

    @property
    def first_name(self):
        """Gets the first_name of this Nested.  # noqa: E501


        :return: The first_name of this Nested.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Nested.


        :param first_name: The first_name of this Nested.  # noqa: E501
        :type first_name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                first_name is not None and len(first_name) > 30):
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `30`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Nested.  # noqa: E501


        :return: The last_name of this Nested.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Nested.


        :param last_name: The last_name of this Nested.  # noqa: E501
        :type last_name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                last_name is not None and len(last_name) > 30):
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `30`")  # noqa: E501

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this Nested.  # noqa: E501


        :return: The email of this Nested.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Nested.


        :param email: The email of this Nested.  # noqa: E501
        :type email: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                email is not None and len(email) > 254):
            raise ValueError("Invalid value for `email`, length must be less than or equal to `254`")  # noqa: E501

        self._email = email

    @property
    def groups(self):
        """Gets the groups of this Nested.  # noqa: E501

        The groups this user belongs to. A user will get all permissions granted to each of their groups.  # noqa: E501

        :return: The groups of this Nested.  # noqa: E501
        :rtype: list[int]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this Nested.

        The groups this user belongs to. A user will get all permissions granted to each of their groups.  # noqa: E501

        :param groups: The groups of this Nested.  # noqa: E501
        :type groups: list[int]
        """

        self._groups = groups

    @property
    def user_permissions(self):
        """Gets the user_permissions of this Nested.  # noqa: E501

        Specific permissions for this user.  # noqa: E501

        :return: The user_permissions of this Nested.  # noqa: E501
        :rtype: list[int]
        """
        return self._user_permissions

    @user_permissions.setter
    def user_permissions(self, user_permissions):
        """Sets the user_permissions of this Nested.

        Specific permissions for this user.  # noqa: E501

        :param user_permissions: The user_permissions of this Nested.  # noqa: E501
        :type user_permissions: list[int]
        """

        self._user_permissions = user_permissions

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Nested):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Nested):
            return True

        return self.to_dict() != other.to_dict()
