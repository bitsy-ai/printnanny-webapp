# coding: utf-8

"""
    printnanny-api-client

    Official API client library for printnanny.ai  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Contact: leigh@printnanny.ai
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import printnanny_api_client
from printnanny_api_client.models.stripe_next_invoice import StripeNextInvoice  # noqa: E501
from printnanny_api_client.rest import ApiException

class TestStripeNextInvoice(unittest.TestCase):
    """StripeNextInvoice unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test StripeNextInvoice
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = printnanny_api_client.models.stripe_next_invoice.StripeNextInvoice()  # noqa: E501
        if include_optional :
            return StripeNextInvoice(
                djstripe_id = 56, 
                djstripe_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                djstripe_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                livemode = True, 
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                metadata = {
                    'key' : null
                    }, 
                description = '', 
                account_country = '', 
                account_name = '', 
                amount_due = '-8072', 
                amount_paid = '-8072', 
                amount_remaining = '-8072', 
                application_fee_amount = '-8072', 
                attempt_count = -2147483648, 
                attempted = True, 
                auto_advance = True, 
                billing_reason = None, 
                collection_method = None, 
                currency = '', 
                customer_address = {
                    'key' : null
                    }, 
                customer_email = '', 
                customer_name = '', 
                customer_phone = '', 
                customer_shipping = {
                    'key' : null
                    }, 
                customer_tax_exempt = None, 
                discount = {
                    'key' : null
                    }, 
                due_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                ending_balance = -9223372036854775808, 
                footer = '', 
                hosted_invoice_url = '', 
                invoice_pdf = '', 
                next_payment_attempt = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                number = '', 
                paid = True, 
                period_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                period_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                post_payment_credit_notes_amount = -9223372036854775808, 
                pre_payment_credit_notes_amount = -9223372036854775808, 
                receipt_number = '', 
                starting_balance = -9223372036854775808, 
                statement_descriptor = '', 
                status = None, 
                status_transitions = {
                    'key' : null
                    }, 
                subscription_proration_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                subtotal = '-8072', 
                tax = '-8072', 
                tax_percent = '-807', 
                threshold_reason = {
                    'key' : null
                    }, 
                total = '-8072', 
                webhooks_delivered_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                djstripe_owner_account = '', 
                charge = 56, 
                customer = '', 
                default_payment_method = '', 
                payment_intent = 56, 
                subscription = '', 
                default_source = ''
            )
        else :
            return StripeNextInvoice(
                djstripe_id = 56,
                djstripe_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                djstripe_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                amount_due = '-8072',
                attempt_count = -2147483648,
                currency = '',
                period_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                period_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                starting_balance = -9223372036854775808,
                subtotal = '-8072',
                total = '-8072',
                customer = '',
        )

    def testStripeNextInvoice(self):
        """Test StripeNextInvoice"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
