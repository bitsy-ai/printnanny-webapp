/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Configuration {
    pub base_path: String,
    #[serde(skip_serializing_if="Option::is_none")]
    pub user_agent: Option<String>,
    #[serde(skip_serializing)]
    pub client: reqwest::Client,
    #[serde(skip_serializing_if="Option::is_none")]
    pub basic_auth: Option<BasicAuth>,
    #[serde(skip_serializing_if="Option::is_none")]
    pub oauth_access_token: Option<String>,
    #[serde(skip_serializing_if="Option::is_none")]
    pub bearer_access_token: Option<String>,
    #[serde(skip_serializing_if="Option::is_none")]
    pub api_key: Option<ApiKey>,
    // TODO: take an oauth2 token source, similar to the go one
}

pub type BasicAuth = (String, Option<String>);

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ApiKey {
    pub prefix: Option<String>,
    pub key: String,
}

impl Configuration {
    pub fn new() -> Configuration {
        Configuration::default()
    }
}

impl Default for Configuration {
    fn default() -> Self {
        Configuration {
            base_path: "http://localhost".to_owned(),
            user_agent: Some("OpenAPI-Generator/0.0.0/rust".to_owned()),
            client: reqwest::Client::new(),
            basic_auth: None,
            oauth_access_token: None,
            bearer_access_token: None,
            api_key: None,
        }
    }
}
