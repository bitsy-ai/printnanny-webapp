/*
 * printnanny-api-client
 *
 * Official API client library for printnanny.ai
 *
 * The version of the OpenAPI document: 0.124.7
 * Contact: leigh@printnanny.ai
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use bytes::Bytes;
use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`video_recordings_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VideoRecordingsCreateError {
    Status409(crate::models::ErrorDetail),
    Status400(crate::models::ErrorDetail),
    Status401(crate::models::ErrorDetail),
    Status403(crate::models::ErrorDetail),
    Status500(crate::models::ErrorDetail),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`video_recordings_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VideoRecordingsListError {
    Status400(crate::models::ErrorDetail),
    Status401(crate::models::ErrorDetail),
    Status403(crate::models::ErrorDetail),
    Status500(crate::models::ErrorDetail),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`video_recordings_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VideoRecordingsPartialUpdateError {
    Status409(crate::models::ErrorDetail),
    Status400(crate::models::ErrorDetail),
    Status401(crate::models::ErrorDetail),
    Status403(crate::models::ErrorDetail),
    Status500(crate::models::ErrorDetail),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`video_recordings_retrieve`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VideoRecordingsRetrieveError {
    Status404(crate::models::ErrorDetail),
    Status400(crate::models::ErrorDetail),
    Status401(crate::models::ErrorDetail),
    Status403(crate::models::ErrorDetail),
    Status500(crate::models::ErrorDetail),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`video_recordings_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VideoRecordingsUpdateError {
    Status409(crate::models::ErrorDetail),
    Status400(crate::models::ErrorDetail),
    Status401(crate::models::ErrorDetail),
    Status403(crate::models::ErrorDetail),
    Status500(crate::models::ErrorDetail),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`video_recordings_update_or_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VideoRecordingsUpdateOrCreateError {
    Status409(crate::models::ErrorDetail),
    Status400(crate::models::ErrorDetail),
    Status401(crate::models::ErrorDetail),
    Status403(crate::models::ErrorDetail),
    Status500(crate::models::ErrorDetail),
    Status404(crate::models::ErrorDetail),
    UnknownValue(serde_json::Value),
}


pub async fn video_recordings_create(configuration: &configuration::Configuration, id: Option<&str>, recording_start: Option<String>, recording_end: Option<String>, recording_status: Option<crate::models::RecordingStatusEnum>, cloud_sync_start: Option<String>, cloud_sync_end: Option<String>, cloud_sync_status: Option<crate::models::CloudSyncStatusEnum>, gcode_file_name: Option<&str>, mp4_file: Option<std::path::PathBuf>) -> Result<crate::models::VideoRecording, Error<VideoRecordingsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/video-recordings/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form = reqwest::multipart::Form::new();
    if let Some(local_var_param_value) = id {
        local_var_form = local_var_form.text("id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = recording_start {
        local_var_form = local_var_form.text("recording_start", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = recording_end {
        local_var_form = local_var_form.text("recording_end", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = recording_status {
        local_var_form = local_var_form.text("recording_status", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = cloud_sync_start {
        local_var_form = local_var_form.text("cloud_sync_start", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = cloud_sync_end {
        local_var_form = local_var_form.text("cloud_sync_end", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = cloud_sync_status {
        local_var_form = local_var_form.text("cloud_sync_status", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = gcode_file_name {
        local_var_form = local_var_form.text("gcode_file_name", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = mp4_file {
        let kind = infer::get_from_path(&local_var_param_value)?.unwrap();
        let filebytes = tokio::fs::read(&local_var_param_value).await?;
        let file_part = reqwest::multipart::Part::bytes(filebytes)
            .file_name(local_var_param_value.display().to_string())
            .mime_str(kind.mime_type())?;
        local_var_form = local_var_form.part("mp4_file", file_part);
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VideoRecordingsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn video_recordings_list(configuration: &configuration::Configuration, page: Option<i32>) -> Result<crate::models::PaginatedVideoRecordingList, Error<VideoRecordingsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/video-recordings/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VideoRecordingsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn video_recordings_partial_update(configuration: &configuration::Configuration, id: &str, id2: Option<&str>, recording_start: Option<String>, recording_end: Option<String>, recording_status: Option<crate::models::RecordingStatusEnum>, cloud_sync_start: Option<String>, cloud_sync_end: Option<String>, cloud_sync_status: Option<crate::models::CloudSyncStatusEnum>, gcode_file_name: Option<&str>, mp4_file: Option<std::path::PathBuf>) -> Result<crate::models::VideoRecording, Error<VideoRecordingsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/video-recordings/{id}/", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form = reqwest::multipart::Form::new();
    if let Some(local_var_param_value) = id2 {
        local_var_form = local_var_form.text("id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = recording_start {
        local_var_form = local_var_form.text("recording_start", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = recording_end {
        local_var_form = local_var_form.text("recording_end", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = recording_status {
        local_var_form = local_var_form.text("recording_status", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = cloud_sync_start {
        local_var_form = local_var_form.text("cloud_sync_start", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = cloud_sync_end {
        local_var_form = local_var_form.text("cloud_sync_end", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = cloud_sync_status {
        local_var_form = local_var_form.text("cloud_sync_status", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = gcode_file_name {
        local_var_form = local_var_form.text("gcode_file_name", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = mp4_file {
        let kind = infer::get_from_path(&local_var_param_value)?.unwrap();
        let filebytes = tokio::fs::read(&local_var_param_value).await?;
        let file_part = reqwest::multipart::Part::bytes(filebytes)
            .file_name(local_var_param_value.display().to_string())
            .mime_str(kind.mime_type())?;
        local_var_form = local_var_form.part("mp4_file", file_part);
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VideoRecordingsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn video_recordings_retrieve(configuration: &configuration::Configuration, id: &str) -> Result<crate::models::VideoRecording, Error<VideoRecordingsRetrieveError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/video-recordings/{id}/", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VideoRecordingsRetrieveError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn video_recordings_update(configuration: &configuration::Configuration, id: &str, id2: Option<&str>, recording_start: Option<String>, recording_end: Option<String>, recording_status: Option<crate::models::RecordingStatusEnum>, cloud_sync_start: Option<String>, cloud_sync_end: Option<String>, cloud_sync_status: Option<crate::models::CloudSyncStatusEnum>, gcode_file_name: Option<&str>, mp4_file: Option<std::path::PathBuf>) -> Result<crate::models::VideoRecording, Error<VideoRecordingsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/video-recordings/{id}/", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form = reqwest::multipart::Form::new();
    if let Some(local_var_param_value) = id2 {
        local_var_form = local_var_form.text("id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = recording_start {
        local_var_form = local_var_form.text("recording_start", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = recording_end {
        local_var_form = local_var_form.text("recording_end", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = recording_status {
        local_var_form = local_var_form.text("recording_status", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = cloud_sync_start {
        local_var_form = local_var_form.text("cloud_sync_start", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = cloud_sync_end {
        local_var_form = local_var_form.text("cloud_sync_end", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = cloud_sync_status {
        local_var_form = local_var_form.text("cloud_sync_status", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = gcode_file_name {
        local_var_form = local_var_form.text("gcode_file_name", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = mp4_file {
        let kind = infer::get_from_path(&local_var_param_value)?.unwrap();
        let filebytes = tokio::fs::read(&local_var_param_value).await?;
        let file_part = reqwest::multipart::Part::bytes(filebytes)
            .file_name(local_var_param_value.display().to_string())
            .mime_str(kind.mime_type())?;
        local_var_form = local_var_form.part("mp4_file", file_part);
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VideoRecordingsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn video_recordings_update_or_create(configuration: &configuration::Configuration, id: Option<&str>, recording_start: Option<String>, recording_end: Option<String>, recording_status: Option<crate::models::RecordingStatusEnum>, cloud_sync_start: Option<String>, cloud_sync_end: Option<String>, cloud_sync_status: Option<crate::models::CloudSyncStatusEnum>, gcode_file_name: Option<&str>, mp4_file: Option<std::path::PathBuf>) -> Result<crate::models::VideoRecording, Error<VideoRecordingsUpdateOrCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/video-recordings/update-or-create/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form = reqwest::multipart::Form::new();
    if let Some(local_var_param_value) = id {
        local_var_form = local_var_form.text("id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = recording_start {
        local_var_form = local_var_form.text("recording_start", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = recording_end {
        local_var_form = local_var_form.text("recording_end", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = recording_status {
        local_var_form = local_var_form.text("recording_status", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = cloud_sync_start {
        local_var_form = local_var_form.text("cloud_sync_start", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = cloud_sync_end {
        local_var_form = local_var_form.text("cloud_sync_end", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = cloud_sync_status {
        local_var_form = local_var_form.text("cloud_sync_status", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = gcode_file_name {
        local_var_form = local_var_form.text("gcode_file_name", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = mp4_file {
        let kind = infer::get_from_path(&local_var_param_value)?.unwrap();
        let filebytes = tokio::fs::read(&local_var_param_value).await?;
        let file_part = reqwest::multipart::Part::bytes(filebytes)
            .file_name(local_var_param_value.display().to_string())
            .mime_str(kind.mime_type())?;
        local_var_form = local_var_form.part("mp4_file", file_part);
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VideoRecordingsUpdateOrCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

