/*
 * printnanny-api-client
 *
 * Official API client library for print-nanny.com
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: leigh@print-nanny.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FileLocator {
    #[serde(rename = "INSTALL_PATH", skip_serializing_if = "Option::is_none")]
    pub INSTALL_PATH: Option<String>,
    #[serde(rename = "FACT_PATH", skip_serializing_if = "Option::is_none")]
    pub FACT_PATH: Option<String>,
    #[serde(rename = "BOOT_PATH", skip_serializing_if = "Option::is_none")]
    pub BOOT_PATH: Option<String>,
    #[serde(rename = "LICENSE_PATH", skip_serializing_if = "Option::is_none")]
    pub LICENSE_PATH: Option<String>,
    #[serde(rename = "DATA_PATH", skip_serializing_if = "Option::is_none")]
    pub DATA_PATH: Option<String>,
    #[serde(rename = "FACT_DEVICE_PATH", skip_serializing_if = "Option::is_none")]
    pub FACT_DEVICE_PATH: Option<String>,
    #[serde(rename = "FACT_LICENSE_PATH", skip_serializing_if = "Option::is_none")]
    pub FACT_LICENSE_PATH: Option<String>,
    #[serde(rename = "CA_CERTS", skip_serializing_if = "Option::is_none")]
    pub CA_CERTS: Option<String>,
    #[serde(rename = "LICENSE_ZIP_FILENAME", skip_serializing_if = "Option::is_none")]
    pub LICENSE_ZIP_FILENAME: Option<String>,
    #[serde(rename = "LICENSE_ZIP_PATH", skip_serializing_if = "Option::is_none")]
    pub LICENSE_ZIP_PATH: Option<String>,
    #[serde(rename = "KEY_PRIVATE_PKCS8_FILENAME", skip_serializing_if = "Option::is_none")]
    pub key_private_pkcs8_filename: Option<String>,
    #[serde(rename = "KEY_PRIVATE_SEC1_FILENAME", skip_serializing_if = "Option::is_none")]
    pub key_private_sec1_filename: Option<String>,
    #[serde(rename = "KEY_PUBLIC_FILENAME", skip_serializing_if = "Option::is_none")]
    pub KEY_PUBLIC_FILENAME: Option<String>,
    #[serde(rename = "KEY_PRIVATE_PKCS8_PATH", skip_serializing_if = "Option::is_none")]
    pub key_private_pkcs8_path: Option<String>,
    #[serde(rename = "KEY_PRIVATE_SEC1_PATH", skip_serializing_if = "Option::is_none")]
    pub key_private_sec1_path: Option<String>,
    #[serde(rename = "KEY_PUBLIC_PATH", skip_serializing_if = "Option::is_none")]
    pub KEY_PUBLIC_PATH: Option<String>,
    #[serde(rename = "CA_CERTS_FILENAME", skip_serializing_if = "Option::is_none")]
    pub CA_CERTS_FILENAME: Option<String>,
    #[serde(rename = "CA_CERTS_PATH", skip_serializing_if = "Option::is_none")]
    pub CA_CERTS_PATH: Option<String>,
}

impl FileLocator {
    pub fn new() -> FileLocator {
        FileLocator {
            INSTALL_PATH: None,
            FACT_PATH: None,
            BOOT_PATH: None,
            LICENSE_PATH: None,
            DATA_PATH: None,
            FACT_DEVICE_PATH: None,
            FACT_LICENSE_PATH: None,
            CA_CERTS: None,
            LICENSE_ZIP_FILENAME: None,
            LICENSE_ZIP_PATH: None,
            key_private_pkcs8_filename: None,
            key_private_sec1_filename: None,
            KEY_PUBLIC_FILENAME: None,
            key_private_pkcs8_path: None,
            key_private_sec1_path: None,
            KEY_PUBLIC_PATH: None,
            CA_CERTS_FILENAME: None,
            CA_CERTS_PATH: None,
        }
    }
}


