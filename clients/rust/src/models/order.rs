/*
 * printnanny-api-client
 *
 * Official API client library for printnanny.ai
 *
 * The version of the OpenAPI document: 0.107.3
 * Contact: leigh@printnanny.ai
 * Generated by: https://openapi-generator.tech
 */

/// Order : Djstripe's representation of Stripe Checkout model is missing a number of fields, like subtotal amount and shipping/tax charges  stripe_checkout_session_data is the raw JSON returned by stripe.checkout.Session.retrieve



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Order {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "created_dt")]
    pub created_dt: String,
    #[serde(rename = "products")]
    pub products: Vec<crate::models::Product>,
    #[serde(rename = "djstripe_customer")]
    pub djstripe_customer: Option<Box<crate::models::DjStripeCustomer>>,
    #[serde(rename = "djstripe_checkout_session")]
    pub djstripe_checkout_session: Option<Box<crate::models::DjStripeCheckoutSession>>,
    #[serde(rename = "djstripe_payment_intent")]
    pub djstripe_payment_intent: Option<Box<crate::models::DjStripePaymentIntent>>,
    #[serde(rename = "last_status")]
    pub last_status: Box<crate::models::OrderStatus>,
    #[serde(rename = "status_history")]
    pub status_history: Vec<crate::models::OrderStatus>,
    #[serde(rename = "email")]
    pub email: String,
    #[serde(rename = "stripe_checkout_redirect_url")]
    pub stripe_checkout_redirect_url: String,
    #[serde(rename = "stripe_checkout_session_data")]
    pub stripe_checkout_session_data: ::std::collections::HashMap<String, serde_json::Value>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<Box<crate::models::User>>,
}

impl Order {
    /// Djstripe's representation of Stripe Checkout model is missing a number of fields, like subtotal amount and shipping/tax charges  stripe_checkout_session_data is the raw JSON returned by stripe.checkout.Session.retrieve
    pub fn new(id: String, created_dt: String, products: Vec<crate::models::Product>, djstripe_customer: Option<crate::models::DjStripeCustomer>, djstripe_checkout_session: Option<crate::models::DjStripeCheckoutSession>, djstripe_payment_intent: Option<crate::models::DjStripePaymentIntent>, last_status: crate::models::OrderStatus, status_history: Vec<crate::models::OrderStatus>, email: String, stripe_checkout_redirect_url: String, stripe_checkout_session_data: ::std::collections::HashMap<String, serde_json::Value>) -> Order {
        Order {
            id,
            created_dt,
            products,
            djstripe_customer: djstripe_customer.map(Box::new),
            djstripe_checkout_session: djstripe_checkout_session.map(Box::new),
            djstripe_payment_intent: djstripe_payment_intent.map(Box::new),
            last_status: Box::new(last_status),
            status_history,
            email,
            stripe_checkout_redirect_url,
            stripe_checkout_session_data,
            user: None,
        }
    }
}


