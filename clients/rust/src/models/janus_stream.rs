/*
 * printnanny-api-client
 *
 * Official API client library forprintnanny.ai print-nanny.com
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: leigh@printnanny.ai
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct JanusStream {
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "admin_secret")]
    pub admin_secret: String,
    #[serde(rename = "created_dt")]
    pub created_dt: String,
    #[serde(rename = "updated_dt")]
    pub updated_dt: String,
    #[serde(rename = "config_type")]
    pub config_type: Option<Box<crate::models::JanusConfigType>>,
    #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(rename = "stream_secret", skip_serializing_if = "Option::is_none")]
    pub stream_secret: Option<String>,
    #[serde(rename = "stream_pin", skip_serializing_if = "Option::is_none")]
    pub stream_pin: Option<String>,
    #[serde(rename = "api_token", skip_serializing_if = "Option::is_none")]
    pub api_token: Option<String>,
    #[serde(rename = "rtp_port", skip_serializing_if = "Option::is_none")]
    pub rtp_port: Option<i32>,
    #[serde(rename = "device")]
    pub device: i32,
}

impl JanusStream {
    pub fn new(id: i32, admin_secret: String, created_dt: String, updated_dt: String, config_type: Option<crate::models::JanusConfigType>, device: i32) -> JanusStream {
        JanusStream {
            id,
            admin_secret,
            created_dt,
            updated_dt,
            config_type: config_type.map(Box::new),
            active: None,
            stream_secret: None,
            stream_pin: None,
            api_token: None,
            rtp_port: None,
            device,
        }
    }
}


