/*
 * printnanny-api-client
 *
 * Official API client library for printnanny.ai
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: leigh@printnanny.ai
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct StripeNextInvoice {
    #[serde(rename = "djstripe_id")]
    pub djstripe_id: i32,
    #[serde(rename = "djstripe_created")]
    pub djstripe_created: String,
    #[serde(rename = "djstripe_updated")]
    pub djstripe_updated: String,
    /// Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.
    #[serde(rename = "livemode", skip_serializing_if = "Option::is_none")]
    pub livemode: Option<bool>,
    /// The datetime this object was created in stripe.
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    /// A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<::std::collections::HashMap<String, serde_json::Value>>,
    /// A description of this object.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The country of the business associated with this invoice, most often the business creating the invoice.
    #[serde(rename = "account_country", skip_serializing_if = "Option::is_none")]
    pub account_country: Option<String>,
    /// The public name of the business associated with this invoice, most often the business creating the invoice.
    #[serde(rename = "account_name", skip_serializing_if = "Option::is_none")]
    pub account_name: Option<String>,
    /// Final amount due (as decimal) at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the amount_due may be 0. If there is a positive starting_balance for the invoice (the customer owes money), the amount_due will also take that into account. The charge that gets generated for the invoice will be for the amount specified in amount_due.
    #[serde(rename = "amount_due")]
    pub amount_due: String,
    /// The amount, (as decimal), that was paid.
    #[serde(rename = "amount_paid", skip_serializing_if = "Option::is_none")]
    pub amount_paid: Option<String>,
    /// The amount remaining, (as decimal), that is due.
    #[serde(rename = "amount_remaining", skip_serializing_if = "Option::is_none")]
    pub amount_remaining: Option<String>,
    /// The fee (as decimal) that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid.
    #[serde(rename = "application_fee_amount", skip_serializing_if = "Option::is_none")]
    pub application_fee_amount: Option<String>,
    /// Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.
    #[serde(rename = "attempt_count")]
    pub attempt_count: i32,
    /// Whether or not an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the ``invoice.created`` webhook, for example, so you might not want to display that invoice as unpaid to your users.
    #[serde(rename = "attempted", skip_serializing_if = "Option::is_none")]
    pub attempted: Option<bool>,
    /// Controls whether Stripe will perform automatic collection of the invoice. When false, the invoice's state will not automatically advance without an explicit action.
    #[serde(rename = "auto_advance", skip_serializing_if = "Option::is_none")]
    pub auto_advance: Option<bool>,
    /// Indicates the reason why the invoice was created. subscription_cycle indicates an invoice created by a subscription advancing into a new period. subscription_create indicates an invoice created due to creating a subscription. subscription_update indicates an invoice created due to updating a subscription. subscription is set for all old invoices to indicate either a change to a subscription or a period advancement. manual is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The upcoming value is reserved for simulated invoices per the upcoming invoice endpoint. subscription_threshold indicates an invoice created due to a billing threshold being reached.
    #[serde(rename = "billing_reason", skip_serializing_if = "Option::is_none")]
    pub billing_reason: Option<Box<crate::models::OneOfBillingReasonEnumBlankEnum>>,
    /// When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.
    #[serde(rename = "collection_method", skip_serializing_if = "Option::is_none")]
    pub collection_method: Option<Box<crate::models::OneOfCollectionMethodEnumNullEnum>>,
    /// Three-letter ISO currency code
    #[serde(rename = "currency")]
    pub currency: String,
    /// The customer's address. Until the invoice is finalized, this field will equal customer.address. Once the invoice is finalized, this field will no longer be updated.
    #[serde(rename = "customer_address", skip_serializing_if = "Option::is_none")]
    pub customer_address: Option<::std::collections::HashMap<String, serde_json::Value>>,
    /// The customer's email. Until the invoice is finalized, this field will equal customer.email. Once the invoice is finalized, this field will no longer be updated.
    #[serde(rename = "customer_email", skip_serializing_if = "Option::is_none")]
    pub customer_email: Option<String>,
    /// The customer's name. Until the invoice is finalized, this field will equal customer.name. Once the invoice is finalized, this field will no longer be updated.
    #[serde(rename = "customer_name", skip_serializing_if = "Option::is_none")]
    pub customer_name: Option<String>,
    /// The customer's phone number. Until the invoice is finalized, this field will equal customer.phone. Once the invoice is finalized, this field will no longer be updated.
    #[serde(rename = "customer_phone", skip_serializing_if = "Option::is_none")]
    pub customer_phone: Option<String>,
    /// The customer's shipping information. Until the invoice is finalized, this field will equal customer.shipping. Once the invoice is finalized, this field will no longer be updated.
    #[serde(rename = "customer_shipping", skip_serializing_if = "Option::is_none")]
    pub customer_shipping: Option<::std::collections::HashMap<String, serde_json::Value>>,
    /// The customer's tax exempt status. Until the invoice is finalized, this field will equal customer.tax_exempt. Once the invoice is finalized, this field will no longer be updated.
    #[serde(rename = "customer_tax_exempt", skip_serializing_if = "Option::is_none")]
    pub customer_tax_exempt: Option<Box<crate::models::CustomerTaxExemptEnum>>,
    /// Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis.
    #[serde(rename = "discount", skip_serializing_if = "Option::is_none")]
    pub discount: Option<::std::collections::HashMap<String, serde_json::Value>>,
    /// The date on which payment for this invoice is due. This value will be null for invoices where billing=charge_automatically.
    #[serde(rename = "due_date", skip_serializing_if = "Option::is_none")]
    pub due_date: Option<String>,
    /// Ending customer balance (in cents) after attempting to pay invoice. If the invoice has not been attempted yet, this will be null.
    #[serde(rename = "ending_balance", skip_serializing_if = "Option::is_none")]
    pub ending_balance: Option<i64>,
    /// Footer displayed on the invoice.
    #[serde(rename = "footer", skip_serializing_if = "Option::is_none")]
    pub footer: Option<String>,
    /// The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been frozen yet, this will be null.
    #[serde(rename = "hosted_invoice_url", skip_serializing_if = "Option::is_none")]
    pub hosted_invoice_url: Option<String>,
    /// The link to download the PDF for the invoice. If the invoice has not been frozen yet, this will be null.
    #[serde(rename = "invoice_pdf", skip_serializing_if = "Option::is_none")]
    pub invoice_pdf: Option<String>,
    /// The time at which payment will next be attempted.
    #[serde(rename = "next_payment_attempt", skip_serializing_if = "Option::is_none")]
    pub next_payment_attempt: Option<String>,
    /// A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified.
    #[serde(rename = "number", skip_serializing_if = "Option::is_none")]
    pub number: Option<String>,
    /// Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.
    #[serde(rename = "paid", skip_serializing_if = "Option::is_none")]
    pub paid: Option<bool>,
    /// End of the usage period during which invoice items were added to this invoice.
    #[serde(rename = "period_end")]
    pub period_end: String,
    /// Start of the usage period during which invoice items were added to this invoice.
    #[serde(rename = "period_start")]
    pub period_start: String,
    /// Total amount (in cents) of all post-payment credit notes issued for this invoice.
    #[serde(rename = "post_payment_credit_notes_amount", skip_serializing_if = "Option::is_none")]
    pub post_payment_credit_notes_amount: Option<i64>,
    /// Total amount (in cents) of all pre-payment credit notes issued for this invoice.
    #[serde(rename = "pre_payment_credit_notes_amount", skip_serializing_if = "Option::is_none")]
    pub pre_payment_credit_notes_amount: Option<i64>,
    /// This is the transaction number that appears on email receipts sent for this invoice.
    #[serde(rename = "receipt_number", skip_serializing_if = "Option::is_none")]
    pub receipt_number: Option<String>,
    /// Starting customer balance (in cents) before attempting to pay invoice. If the invoice has not been attempted yet, this will be the current customer balance.
    #[serde(rename = "starting_balance")]
    pub starting_balance: i64,
    /// An arbitrary string to be displayed on your customer's credit card statement. The statement description may not include <>\"' characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped. While most banks display this information consistently, some may display it incorrectly or not at all.
    #[serde(rename = "statement_descriptor", skip_serializing_if = "Option::is_none")]
    pub statement_descriptor: Option<String>,
    /// The status of the invoice, one of draft, open, paid, uncollectible, or void.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Box<crate::models::OneOfStripeNextInvoiceStatusEnumBlankEnum>>,
    #[serde(rename = "status_transitions", skip_serializing_if = "Option::is_none")]
    pub status_transitions: Option<::std::collections::HashMap<String, serde_json::Value>>,
    /// Only set for upcoming invoices that preview prorations. The time used to calculate prorations.
    #[serde(rename = "subscription_proration_date", skip_serializing_if = "Option::is_none")]
    pub subscription_proration_date: Option<String>,
    /// Total (as decimal) of all subscriptions, invoice items, and prorations on the invoice before any discount or tax is applied.
    #[serde(rename = "subtotal")]
    pub subtotal: String,
    /// The amount (as decimal) of tax included in the total, calculated from ``tax_percent`` and the subtotal. If no ``tax_percent`` is defined, this value will be null.
    #[serde(rename = "tax", skip_serializing_if = "Option::is_none")]
    pub tax: Option<String>,
    /// This percentage of the subtotal has been added to the total amount of the invoice, including invoice line items and discounts. This field is inherited from the subscription's ``tax_percent`` field, but can be changed before the invoice is paid. This field defaults to null.
    #[serde(rename = "tax_percent", skip_serializing_if = "Option::is_none")]
    pub tax_percent: Option<String>,
    /// If billing_reason is set to subscription_threshold this returns more information on which threshold rules triggered the invoice.
    #[serde(rename = "threshold_reason", skip_serializing_if = "Option::is_none")]
    pub threshold_reason: Option<::std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "total")]
    pub total: String,
    /// The time at which webhooks for this invoice were successfully delivered (if the invoice had no webhooks to deliver, this will match `date`). Invoice payment is delayed until webhooks are delivered, or until all webhook delivery attempts have been exhausted.
    #[serde(rename = "webhooks_delivered_at", skip_serializing_if = "Option::is_none")]
    pub webhooks_delivered_at: Option<String>,
    /// The Stripe Account this object belongs to.
    #[serde(rename = "djstripe_owner_account", skip_serializing_if = "Option::is_none")]
    pub djstripe_owner_account: Option<String>,
    /// The latest charge generated for this invoice, if any.
    #[serde(rename = "charge", skip_serializing_if = "Option::is_none")]
    pub charge: Option<i32>,
    /// The customer associated with this invoice.
    #[serde(rename = "customer")]
    pub customer: String,
    /// Default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings.
    #[serde(rename = "default_payment_method", skip_serializing_if = "Option::is_none")]
    pub default_payment_method: Option<String>,
    /// The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice.Note that voiding an invoice will cancel the PaymentIntent
    #[serde(rename = "payment_intent", skip_serializing_if = "Option::is_none")]
    pub payment_intent: Option<i32>,
    /// The subscription that this invoice was prepared for, if any.
    #[serde(rename = "subscription", skip_serializing_if = "Option::is_none")]
    pub subscription: Option<String>,
    /// The default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.
    #[serde(rename = "default_source", skip_serializing_if = "Option::is_none")]
    pub default_source: Option<String>,
}

impl StripeNextInvoice {
    pub fn new(djstripe_id: i32, djstripe_created: String, djstripe_updated: String, amount_due: String, attempt_count: i32, currency: String, period_end: String, period_start: String, starting_balance: i64, subtotal: String, total: String, customer: String) -> StripeNextInvoice {
        StripeNextInvoice {
            djstripe_id,
            djstripe_created,
            djstripe_updated,
            livemode: None,
            created: None,
            metadata: None,
            description: None,
            account_country: None,
            account_name: None,
            amount_due,
            amount_paid: None,
            amount_remaining: None,
            application_fee_amount: None,
            attempt_count,
            attempted: None,
            auto_advance: None,
            billing_reason: None,
            collection_method: None,
            currency,
            customer_address: None,
            customer_email: None,
            customer_name: None,
            customer_phone: None,
            customer_shipping: None,
            customer_tax_exempt: None,
            discount: None,
            due_date: None,
            ending_balance: None,
            footer: None,
            hosted_invoice_url: None,
            invoice_pdf: None,
            next_payment_attempt: None,
            number: None,
            paid: None,
            period_end,
            period_start,
            post_payment_credit_notes_amount: None,
            pre_payment_credit_notes_amount: None,
            receipt_number: None,
            starting_balance,
            statement_descriptor: None,
            status: None,
            status_transitions: None,
            subscription_proration_date: None,
            subtotal,
            tax: None,
            tax_percent: None,
            threshold_reason: None,
            total,
            webhooks_delivered_at: None,
            djstripe_owner_account: None,
            charge: None,
            customer,
            default_payment_method: None,
            payment_intent: None,
            subscription: None,
            default_source: None,
        }
    }
}


