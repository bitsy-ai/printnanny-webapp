/* tslint:disable */
/* eslint-disable */
/**
 * printnanny-api-client
 * Official API client library for printnanny.ai
 *
 * The version of the OpenAPI document: 0.98.0
 * Contact: leigh@printnanny.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Alert
 */
export interface Alert {
    /**
     * 
     * @type {number}
     * @memberof Alert
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    'time': string;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    'gcode_file': string;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    'print_progress': string;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    'time_elapsed': string;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    'time_remaining': string;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    'manage_device_url': string | null;
    /**
     * 
     * @type {number}
     * @memberof Alert
     */
    'user': number;
    /**
     * 
     * @type {number}
     * @memberof Alert
     */
    'octoprint_device'?: number | null;
    /**
     * 
     * @type {EventTypeEnum}
     * @memberof Alert
     */
    'event_type'?: EventTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof Alert
     */
    'seen'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Alert
     */
    'sent'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    'created_dt': string;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    'updated_dt': string;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    'message': string;
}
/**
 * Serializer used in POST /api/alerts/seen and POST /api/alerts/dismiss requests
 * @export
 * @interface AlertBulkResponse
 */
export interface AlertBulkResponse {
    /**
     * 
     * @type {number}
     * @memberof AlertBulkResponse
     */
    'received': number;
    /**
     * 
     * @type {number}
     * @memberof AlertBulkResponse
     */
    'updated': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AlertMethodsEnum = {
    Ui: 'UI',
    Email: 'EMAIL',
    Discord: 'DISCORD',
    Partner3Dgeeks: 'PARTNER_3DGEEKS'
} as const;

export type AlertMethodsEnum = typeof AlertMethodsEnum[keyof typeof AlertMethodsEnum];


/**
 * 
 * @export
 * @interface AlertRequest
 */
export interface AlertRequest {
    /**
     * 
     * @type {number}
     * @memberof AlertRequest
     */
    'octoprint_device'?: number | null;
    /**
     * 
     * @type {EventTypeEnum}
     * @memberof AlertRequest
     */
    'event_type'?: EventTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof AlertRequest
     */
    'seen'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AlertRequest
     */
    'sent'?: boolean;
}
/**
 * 
 * @export
 * @interface AlertSettings
 */
export interface AlertSettings {
    /**
     * 
     * @type {number}
     * @memberof AlertSettings
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof AlertSettings
     */
    'created_dt': string;
    /**
     * 
     * @type {string}
     * @memberof AlertSettings
     */
    'updated_dt': string;
    /**
     * 
     * @type {Array<AlertMethodsEnum>}
     * @memberof AlertSettings
     */
    'alert_methods'?: Array<AlertMethodsEnum>;
    /**
     * 
     * @type {Array<EventTypesEnum>}
     * @memberof AlertSettings
     */
    'event_types'?: Array<EventTypesEnum>;
    /**
     * Send notifications to a Discord channel. Please check out this guide to <a href=\'https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks\'>generate a webhook</a> url and paste it here.
     * @type {string}
     * @memberof AlertSettings
     */
    'discord_webhook'?: string | null;
    /**
     * Progress notification interval. Example: 25 will notify you at 25%, 50%, 75%, and 100% progress
     * @type {number}
     * @memberof AlertSettings
     */
    'print_progress_percent'?: number;
    /**
     * 
     * @type {number}
     * @memberof AlertSettings
     */
    'user': number;
}
/**
 * 
 * @export
 * @interface AlertSettingsRequest
 */
export interface AlertSettingsRequest {
    /**
     * 
     * @type {Array<AlertMethodsEnum>}
     * @memberof AlertSettingsRequest
     */
    'alert_methods'?: Array<AlertMethodsEnum>;
    /**
     * 
     * @type {Array<EventTypesEnum>}
     * @memberof AlertSettingsRequest
     */
    'event_types'?: Array<EventTypesEnum>;
    /**
     * Send notifications to a Discord channel. Please check out this guide to <a href=\'https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks\'>generate a webhook</a> url and paste it here.
     * @type {string}
     * @memberof AlertSettingsRequest
     */
    'discord_webhook'?: string | null;
    /**
     * Progress notification interval. Example: 25 will notify you at 25%, 50%, 75%, and 100% progress
     * @type {number}
     * @memberof AlertSettingsRequest
     */
    'print_progress_percent'?: number;
}
/**
 * 
 * @export
 * @interface BillingSummary
 */
export interface BillingSummary {
    /**
     * 
     * @type {StripeSubscription}
     * @memberof BillingSummary
     */
    'subscription': StripeSubscription;
    /**
     * 
     * @type {StripeCustomer}
     * @memberof BillingSummary
     */
    'customer': StripeCustomer;
    /**
     * 
     * @type {User}
     * @memberof BillingSummary
     */
    'user'?: User | null;
    /**
     * 
     * @type {string}
     * @memberof BillingSummary
     */
    'billing_portal_url': string;
}
/**
 * Abstract class inspired by DRF\'s own token serializer. Returns a user if valid, None or a message if not.
 * @export
 * @interface CallbackTokenAuthRequest
 */
export interface CallbackTokenAuthRequest {
    /**
     * 
     * @type {string}
     * @memberof CallbackTokenAuthRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CallbackTokenAuthRequest
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof CallbackTokenAuthRequest
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface CloudiotDevice
 */
export interface CloudiotDevice {
    /**
     * 
     * @type {number}
     * @memberof CloudiotDevice
     */
    'num_id': number;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'command_topic': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'event_topic': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'config_topic': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'state_topic': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'gcp_resource': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'gcp_project_id': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'gcp_region': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'gcp_cloudiot_pi_registry': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'mqtt_bridge_hostname': string;
    /**
     * 
     * @type {number}
     * @memberof CloudiotDevice
     */
    'mqtt_bridge_port': number;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'mqtt_client_id': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'created_dt': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'updated_dt': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof CloudiotDevice
     */
    'pi': number;
    /**
     * 
     * @type {number}
     * @memberof CloudiotDevice
     */
    'public_key': number;
}
/**
 * 
 * @export
 * @interface CloudiotDeviceRequest
 */
export interface CloudiotDeviceRequest {
    /**
     * 
     * @type {number}
     * @memberof CloudiotDeviceRequest
     */
    'public_key': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const CollectionMethodEnum = {
    ChargeAutomatically: 'charge_automatically',
    SendInvoice: 'send_invoice'
} as const;

export type CollectionMethodEnum = typeof CollectionMethodEnum[keyof typeof CollectionMethodEnum];


/**
 * 
 * @export
 * @interface Config
 */
export interface Config {
    /**
     * 
     * @type {PrintNannyApiConfig}
     * @memberof Config
     */
    'api': PrintNannyApiConfig;
    /**
     * 
     * @type {Pi}
     * @memberof Config
     */
    'pi': Pi;
}
/**
 * Generic auth response serializer
 * @export
 * @interface DetailResponse
 */
export interface DetailResponse {
    /**
     * 
     * @type {string}
     * @memberof DetailResponse
     */
    'detail': string;
}
/**
 * Abstract class that returns a callback token based on the field given Returns a token if valid, None or a message if not.
 * @export
 * @interface EmailAuthRequest
 */
export interface EmailAuthRequest {
    /**
     * 
     * @type {string}
     * @memberof EmailAuthRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface EmailWaitlist
 */
export interface EmailWaitlist {
    /**
     * 
     * @type {number}
     * @memberof EmailWaitlist
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof EmailWaitlist
     */
    'created_dt': string;
    /**
     * 
     * @type {string}
     * @memberof EmailWaitlist
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface EmailWaitlistRequest
 */
export interface EmailWaitlistRequest {
    /**
     * 
     * @type {string}
     * @memberof EmailWaitlistRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const EndBehaviorEnum = {
    Cancel: 'cancel',
    Release: 'release'
} as const;

export type EndBehaviorEnum = typeof EndBehaviorEnum[keyof typeof EndBehaviorEnum];


/**
 * 
 * @export
 * @interface ErrorDetail
 */
export interface ErrorDetail {
    /**
     * 
     * @type {string}
     * @memberof ErrorDetail
     */
    'detail': string;
    /**
     * 
     * @type {string}
     * @memberof ErrorDetail
     */
    'code': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const EventSource = {
    Octoprint: 'octoprint',
    PrintnannyOs: 'printnanny_os',
    PrintnannyWebapp: 'printnanny_webapp',
    Mainsail: 'mainsail'
} as const;

export type EventSource = typeof EventSource[keyof typeof EventSource];


/**
 * 
 * @export
 * @enum {string}
 */

export const EventTypeEnum = {
    PrintQuality: 'PrintQuality',
    PrintStatus: 'PrintStatus',
    PrintNannyWebapp: 'PrintNannyWebapp',
    PrintProgress: 'PrintProgress',
    PrintDone: 'PrintDone',
    PrintFailed: 'PrintFailed',
    PrintPaused: 'PrintPaused',
    PrintResumed: 'PrintResumed',
    PrintStarted: 'PrintStarted',
    PrintCancelled: 'PrintCancelled'
} as const;

export type EventTypeEnum = typeof EventTypeEnum[keyof typeof EventTypeEnum];


/**
 * 
 * @export
 * @enum {string}
 */

export const EventTypesEnum = {
    PrintQuality: 'PrintQuality',
    PrintStatus: 'PrintStatus'
} as const;

export type EventTypesEnum = typeof EventTypesEnum[keyof typeof EventTypesEnum];


/**
 * 
 * @export
 * @interface GcodeFile
 */
export interface GcodeFile {
    /**
     * 
     * @type {number}
     * @memberof GcodeFile
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof GcodeFile
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GcodeFile
     */
    'file': string;
    /**
     * 
     * @type {string}
     * @memberof GcodeFile
     */
    'hash': string;
    /**
     * 
     * @type {string}
     * @memberof GcodeFile
     */
    'created_dt': string;
    /**
     * 
     * @type {number}
     * @memberof GcodeFile
     */
    'user': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const IntervalEnum = {
    Day: 'day',
    Month: 'month',
    Week: 'week',
    Year: 'year'
} as const;

export type IntervalEnum = typeof IntervalEnum[keyof typeof IntervalEnum];


/**
 * 
 * @export
 * @enum {string}
 */

export const JanusConfigType = {
    Cloud: 'cloud',
    Edge: 'edge'
} as const;

export type JanusConfigType = typeof JanusConfigType[keyof typeof JanusConfigType];


/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface OctoPrintBackup
 */
export interface OctoPrintBackup {
    /**
     * 
     * @type {number}
     * @memberof OctoPrintBackup
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintBackup
     */
    'deleted': string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintBackup
     */
    'created_dt': string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintBackup
     */
    'hostname': string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintBackup
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintBackup
     */
    'octoprint_version': string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintBackup
     */
    'file': string;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintBackup
     */
    'user': number;
}
/**
 * 
 * @export
 * @interface OctoPrintEvent
 */
export interface OctoPrintEvent {
    /**
     * 
     * @type {number}
     * @memberof OctoPrintEvent
     */
    'id': number;
    /**
     * 
     * @type {OctoPrintEventModel}
     * @memberof OctoPrintEvent
     */
    'model': OctoPrintEventModel;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintEvent
     */
    'created_dt': string;
    /**
     * 
     * @type {EventSource}
     * @memberof OctoPrintEvent
     */
    'source': EventSource;
    /**
     * 
     * @type {OctoPrintEventName}
     * @memberof OctoPrintEvent
     */
    'event_name': OctoPrintEventName;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof OctoPrintEvent
     */
    'payload'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof OctoPrintEvent
     */
    'polymorphic_ctype': number;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintEvent
     */
    'user': number;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintEvent
     */
    'octoprint_server': number;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintEvent
     */
    'pi': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const OctoPrintEventModel = {
    OctoPrintEvent: 'OctoPrintEvent'
} as const;

export type OctoPrintEventModel = typeof OctoPrintEventModel[keyof typeof OctoPrintEventModel];


/**
 * 
 * @export
 * @enum {string}
 */

export const OctoPrintEventName = {
    Startup: 'Startup',
    Shutdown: 'Shutdown',
    PrintProgress: 'PrintProgress',
    Connecting: 'Connecting',
    Connected: 'Connected',
    Disconnecting: 'Disconnecting',
    Disconnected: 'Disconnected',
    Error: 'Error',
    PrintStarted: 'PrintStarted',
    PrintFailed: 'PrintFailed',
    PrintDone: 'PrintDone',
    PrintCancelling: 'PrintCancelling',
    PrintCancelled: 'PrintCancelled',
    PrintPaused: 'PrintPaused',
    PrintResumed: 'PrintResumed'
} as const;

export type OctoPrintEventName = typeof OctoPrintEventName[keyof typeof OctoPrintEventName];


/**
 * 
 * @export
 * @interface OctoPrintEventRequest
 */
export interface OctoPrintEventRequest {
    /**
     * 
     * @type {OctoPrintEventModel}
     * @memberof OctoPrintEventRequest
     */
    'model': OctoPrintEventModel;
    /**
     * 
     * @type {EventSource}
     * @memberof OctoPrintEventRequest
     */
    'source': EventSource;
    /**
     * 
     * @type {OctoPrintEventName}
     * @memberof OctoPrintEventRequest
     */
    'event_name': OctoPrintEventName;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof OctoPrintEventRequest
     */
    'payload'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof OctoPrintEventRequest
     */
    'octoprint_server': number;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintEventRequest
     */
    'pi': number;
}
/**
 * 
 * @export
 * @interface OctoPrintServer
 */
export interface OctoPrintServer {
    /**
     * 
     * @type {number}
     * @memberof OctoPrintServer
     */
    'id': number;
    /**
     * 
     * @type {OctoPrintSettings}
     * @memberof OctoPrintServer
     */
    'settings': OctoPrintSettings;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintServer
     */
    'octoprint_version'?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintServer
     */
    'pip_version'?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintServer
     */
    'python_version'?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintServer
     */
    'printnanny_plugin_version'?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintServer
     */
    'created_dt': string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintServer
     */
    'updated_dt': string;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintServer
     */
    'user': number;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintServer
     */
    'pi': number;
}
/**
 * 
 * @export
 * @interface OctoPrintServerRequest
 */
export interface OctoPrintServerRequest {
    /**
     * 
     * @type {string}
     * @memberof OctoPrintServerRequest
     */
    'octoprint_version'?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintServerRequest
     */
    'pip_version'?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintServerRequest
     */
    'python_version'?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintServerRequest
     */
    'printnanny_plugin_version'?: string;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintServerRequest
     */
    'pi': number;
}
/**
 * 
 * @export
 * @interface OctoPrintSettings
 */
export interface OctoPrintSettings {
    /**
     * 
     * @type {number}
     * @memberof OctoPrintSettings
     */
    'id': number;
    /**
     * Start OctoPrint service
     * @type {boolean}
     * @memberof OctoPrintSettings
     */
    'octoprint_enabled'?: boolean;
    /**
     * Send OctoPrint events related to print job status/progress to PrintNanny Cloud https://docs.octoprint.org/en/master/events/index.html
     * @type {boolean}
     * @memberof OctoPrintSettings
     */
    'events_enabled'?: boolean;
    /**
     * Sync Gcode files to/from PrintNanny Cloud
     * @type {boolean}
     * @memberof OctoPrintSettings
     */
    'sync_gcode'?: boolean;
    /**
     * Sync Printer Profiles to/from PrintNanny Cloud
     * @type {boolean}
     * @memberof OctoPrintSettings
     */
    'sync_printer_profiles'?: boolean;
    /**
     * Upload OctoPrint backups to PrintNanny Cloud
     * @type {boolean}
     * @memberof OctoPrintSettings
     */
    'sync_backups'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintSettings
     */
    'auto_backup'?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintSettings
     */
    'updated_dt': string;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintSettings
     */
    'octoprint_server': number;
}
/**
 * 
 * @export
 * @interface OctoPrintSettingsRequest
 */
export interface OctoPrintSettingsRequest {
    /**
     * Start OctoPrint service
     * @type {boolean}
     * @memberof OctoPrintSettingsRequest
     */
    'octoprint_enabled'?: boolean;
    /**
     * Send OctoPrint events related to print job status/progress to PrintNanny Cloud https://docs.octoprint.org/en/master/events/index.html
     * @type {boolean}
     * @memberof OctoPrintSettingsRequest
     */
    'events_enabled'?: boolean;
    /**
     * Sync Gcode files to/from PrintNanny Cloud
     * @type {boolean}
     * @memberof OctoPrintSettingsRequest
     */
    'sync_gcode'?: boolean;
    /**
     * Sync Printer Profiles to/from PrintNanny Cloud
     * @type {boolean}
     * @memberof OctoPrintSettingsRequest
     */
    'sync_printer_profiles'?: boolean;
    /**
     * Upload OctoPrint backups to PrintNanny Cloud
     * @type {boolean}
     * @memberof OctoPrintSettingsRequest
     */
    'sync_backups'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintSettingsRequest
     */
    'auto_backup'?: string;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintSettingsRequest
     */
    'octoprint_server': number;
}
/**
 * 
 * @export
 * @interface OctoPrinterProfile
 */
export interface OctoPrinterProfile {
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfile
     */
    'id': number;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfile
     */
    'axes_e_inverted'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfile
     */
    'axes_e_speed'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfile
     */
    'axes_x_speed'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfile
     */
    'axes_x_inverted'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfile
     */
    'axes_y_inverted'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfile
     */
    'axes_y_speed'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfile
     */
    'axes_z_inverted'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfile
     */
    'axes_z_speed'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfile
     */
    'extruder_count'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfile
     */
    'extruder_nozzle_diameter'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfile
     */
    'extruder_shared_nozzle'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfile
     */
    'heated_bed'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfile
     */
    'heated_chamber'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfile
     */
    'model'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfile
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfile
     */
    'octoprint_key': string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof OctoPrinterProfile
     */
    'volume_custom_box'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfile
     */
    'volume_depth'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfile
     */
    'volume_formfactor'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfile
     */
    'volume_height'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfile
     */
    'volume_origin'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfile
     */
    'volume_width'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfile
     */
    'created_dt': string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfile
     */
    'updated_dt': string;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfile
     */
    'user': number;
}
/**
 * 
 * @export
 * @interface OctoPrinterProfileRequest
 */
export interface OctoPrinterProfileRequest {
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfileRequest
     */
    'axes_e_inverted'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfileRequest
     */
    'axes_e_speed'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfileRequest
     */
    'axes_x_speed'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfileRequest
     */
    'axes_x_inverted'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfileRequest
     */
    'axes_y_inverted'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfileRequest
     */
    'axes_y_speed'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfileRequest
     */
    'axes_z_inverted'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfileRequest
     */
    'axes_z_speed'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfileRequest
     */
    'extruder_count'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfileRequest
     */
    'extruder_nozzle_diameter'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfileRequest
     */
    'extruder_shared_nozzle'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfileRequest
     */
    'heated_bed'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfileRequest
     */
    'heated_chamber'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfileRequest
     */
    'model'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfileRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfileRequest
     */
    'octoprint_key': string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof OctoPrinterProfileRequest
     */
    'volume_custom_box'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfileRequest
     */
    'volume_depth'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfileRequest
     */
    'volume_formfactor'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfileRequest
     */
    'volume_height'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfileRequest
     */
    'volume_origin'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfileRequest
     */
    'volume_width'?: number | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const OsEdition = {
    OctoprintLite: 'octoprint_lite'
} as const;

export type OsEdition = typeof OsEdition[keyof typeof OsEdition];


/**
 * 
 * @export
 * @interface PaginatedAlertList
 */
export interface PaginatedAlertList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedAlertList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedAlertList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedAlertList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Alert>}
     * @memberof PaginatedAlertList
     */
    'results'?: Array<Alert>;
}
/**
 * 
 * @export
 * @interface PaginatedCloudiotDeviceList
 */
export interface PaginatedCloudiotDeviceList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedCloudiotDeviceList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCloudiotDeviceList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCloudiotDeviceList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<CloudiotDevice>}
     * @memberof PaginatedCloudiotDeviceList
     */
    'results'?: Array<CloudiotDevice>;
}
/**
 * 
 * @export
 * @interface PaginatedGcodeFileList
 */
export interface PaginatedGcodeFileList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedGcodeFileList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedGcodeFileList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedGcodeFileList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<GcodeFile>}
     * @memberof PaginatedGcodeFileList
     */
    'results'?: Array<GcodeFile>;
}
/**
 * 
 * @export
 * @interface PaginatedOctoPrintBackupList
 */
export interface PaginatedOctoPrintBackupList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedOctoPrintBackupList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOctoPrintBackupList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOctoPrintBackupList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<OctoPrintBackup>}
     * @memberof PaginatedOctoPrintBackupList
     */
    'results'?: Array<OctoPrintBackup>;
}
/**
 * 
 * @export
 * @interface PaginatedOctoPrintServerList
 */
export interface PaginatedOctoPrintServerList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedOctoPrintServerList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOctoPrintServerList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOctoPrintServerList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<OctoPrintServer>}
     * @memberof PaginatedOctoPrintServerList
     */
    'results'?: Array<OctoPrintServer>;
}
/**
 * 
 * @export
 * @interface PaginatedOctoPrintSettingsList
 */
export interface PaginatedOctoPrintSettingsList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedOctoPrintSettingsList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOctoPrintSettingsList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOctoPrintSettingsList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<OctoPrintSettings>}
     * @memberof PaginatedOctoPrintSettingsList
     */
    'results'?: Array<OctoPrintSettings>;
}
/**
 * 
 * @export
 * @interface PaginatedOctoPrinterProfileList
 */
export interface PaginatedOctoPrinterProfileList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedOctoPrinterProfileList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOctoPrinterProfileList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOctoPrinterProfileList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<OctoPrinterProfile>}
     * @memberof PaginatedOctoPrinterProfileList
     */
    'results'?: Array<OctoPrinterProfile>;
}
/**
 * 
 * @export
 * @interface PaginatedPiList
 */
export interface PaginatedPiList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPiList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPiList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPiList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Pi>}
     * @memberof PaginatedPiList
     */
    'results'?: Array<Pi>;
}
/**
 * 
 * @export
 * @interface PaginatedPiSettingsList
 */
export interface PaginatedPiSettingsList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPiSettingsList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPiSettingsList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPiSettingsList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<PiSettings>}
     * @memberof PaginatedPiSettingsList
     */
    'results'?: Array<PiSettings>;
}
/**
 * 
 * @export
 * @interface PaginatedPolymorphicCommandList
 */
export interface PaginatedPolymorphicCommandList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPolymorphicCommandList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPolymorphicCommandList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPolymorphicCommandList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<PolymorphicCommand>}
     * @memberof PaginatedPolymorphicCommandList
     */
    'results'?: Array<PolymorphicCommand>;
}
/**
 * 
 * @export
 * @interface PaginatedPolymorphicEventList
 */
export interface PaginatedPolymorphicEventList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPolymorphicEventList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPolymorphicEventList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPolymorphicEventList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<PolymorphicEvent>}
     * @memberof PaginatedPolymorphicEventList
     */
    'results'?: Array<PolymorphicEvent>;
}
/**
 * 
 * @export
 * @interface PaginatedPublicKeyList
 */
export interface PaginatedPublicKeyList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPublicKeyList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPublicKeyList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPublicKeyList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<PublicKey>}
     * @memberof PaginatedPublicKeyList
     */
    'results'?: Array<PublicKey>;
}
/**
 * 
 * @export
 * @interface PaginatedSystemInfoList
 */
export interface PaginatedSystemInfoList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedSystemInfoList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSystemInfoList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSystemInfoList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<SystemInfo>}
     * @memberof PaginatedSystemInfoList
     */
    'results'?: Array<SystemInfo>;
}
/**
 * 
 * @export
 * @interface PaginatedWebrtcStreamList
 */
export interface PaginatedWebrtcStreamList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedWebrtcStreamList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedWebrtcStreamList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedWebrtcStreamList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<WebrtcStream>}
     * @memberof PaginatedWebrtcStreamList
     */
    'results'?: Array<WebrtcStream>;
}
/**
 * 
 * @export
 * @interface PasswordChangeRequest
 */
export interface PasswordChangeRequest {
    /**
     * 
     * @type {string}
     * @memberof PasswordChangeRequest
     */
    'new_password1': string;
    /**
     * 
     * @type {string}
     * @memberof PasswordChangeRequest
     */
    'new_password2': string;
}
/**
 * Serializer for confirming a password reset attempt.
 * @export
 * @interface PasswordResetConfirmRequest
 */
export interface PasswordResetConfirmRequest {
    /**
     * 
     * @type {string}
     * @memberof PasswordResetConfirmRequest
     */
    'new_password1': string;
    /**
     * 
     * @type {string}
     * @memberof PasswordResetConfirmRequest
     */
    'new_password2': string;
    /**
     * 
     * @type {string}
     * @memberof PasswordResetConfirmRequest
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof PasswordResetConfirmRequest
     */
    'token': string;
}
/**
 * Serializer for requesting a password reset e-mail.
 * @export
 * @interface PasswordResetRequest
 */
export interface PasswordResetRequest {
    /**
     * 
     * @type {string}
     * @memberof PasswordResetRequest
     */
    'email': string;
}
/**
 * Serializer used in POST /api/alerts/seen and POST /api/alerts/dismiss requests
 * @export
 * @interface PatchedAlertBulkRequestRequest
 */
export interface PatchedAlertBulkRequestRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedAlertBulkRequestRequest
     */
    'ids'?: Array<number>;
}
/**
 * 
 * @export
 * @interface PatchedAlertRequest
 */
export interface PatchedAlertRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedAlertRequest
     */
    'octoprint_device'?: number | null;
    /**
     * 
     * @type {EventTypeEnum}
     * @memberof PatchedAlertRequest
     */
    'event_type'?: EventTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedAlertRequest
     */
    'seen'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedAlertRequest
     */
    'sent'?: boolean;
}
/**
 * 
 * @export
 * @interface PatchedAlertSettingsRequest
 */
export interface PatchedAlertSettingsRequest {
    /**
     * 
     * @type {Array<AlertMethodsEnum>}
     * @memberof PatchedAlertSettingsRequest
     */
    'alert_methods'?: Array<AlertMethodsEnum>;
    /**
     * 
     * @type {Array<EventTypesEnum>}
     * @memberof PatchedAlertSettingsRequest
     */
    'event_types'?: Array<EventTypesEnum>;
    /**
     * Send notifications to a Discord channel. Please check out this guide to <a href=\'https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks\'>generate a webhook</a> url and paste it here.
     * @type {string}
     * @memberof PatchedAlertSettingsRequest
     */
    'discord_webhook'?: string | null;
    /**
     * Progress notification interval. Example: 25 will notify you at 25%, 50%, 75%, and 100% progress
     * @type {number}
     * @memberof PatchedAlertSettingsRequest
     */
    'print_progress_percent'?: number;
}
/**
 * 
 * @export
 * @interface PatchedCloudiotDeviceRequest
 */
export interface PatchedCloudiotDeviceRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedCloudiotDeviceRequest
     */
    'public_key'?: number;
}
/**
 * 
 * @export
 * @interface PatchedOctoPrintServerRequest
 */
export interface PatchedOctoPrintServerRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrintServerRequest
     */
    'octoprint_version'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrintServerRequest
     */
    'pip_version'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrintServerRequest
     */
    'python_version'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrintServerRequest
     */
    'printnanny_plugin_version'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrintServerRequest
     */
    'pi'?: number;
}
/**
 * 
 * @export
 * @interface PatchedOctoPrintSettingsRequest
 */
export interface PatchedOctoPrintSettingsRequest {
    /**
     * Start OctoPrint service
     * @type {boolean}
     * @memberof PatchedOctoPrintSettingsRequest
     */
    'octoprint_enabled'?: boolean;
    /**
     * Send OctoPrint events related to print job status/progress to PrintNanny Cloud https://docs.octoprint.org/en/master/events/index.html
     * @type {boolean}
     * @memberof PatchedOctoPrintSettingsRequest
     */
    'events_enabled'?: boolean;
    /**
     * Sync Gcode files to/from PrintNanny Cloud
     * @type {boolean}
     * @memberof PatchedOctoPrintSettingsRequest
     */
    'sync_gcode'?: boolean;
    /**
     * Sync Printer Profiles to/from PrintNanny Cloud
     * @type {boolean}
     * @memberof PatchedOctoPrintSettingsRequest
     */
    'sync_printer_profiles'?: boolean;
    /**
     * Upload OctoPrint backups to PrintNanny Cloud
     * @type {boolean}
     * @memberof PatchedOctoPrintSettingsRequest
     */
    'sync_backups'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrintSettingsRequest
     */
    'auto_backup'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrintSettingsRequest
     */
    'octoprint_server'?: number;
}
/**
 * 
 * @export
 * @interface PatchedOctoPrinterProfileRequest
 */
export interface PatchedOctoPrinterProfileRequest {
    /**
     * 
     * @type {boolean}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'axes_e_inverted'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'axes_e_speed'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'axes_x_speed'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'axes_x_inverted'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'axes_y_inverted'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'axes_y_speed'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'axes_z_inverted'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'axes_z_speed'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'extruder_count'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'extruder_nozzle_diameter'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'extruder_shared_nozzle'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'heated_bed'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'heated_chamber'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'model'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'octoprint_key'?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'volume_custom_box'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'volume_depth'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'volume_formfactor'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'volume_height'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'volume_origin'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'volume_width'?: number | null;
}
/**
 * 
 * @export
 * @interface PatchedPiRequest
 */
export interface PatchedPiRequest {
    /**
     * 
     * @type {SbcEnum}
     * @memberof PatchedPiRequest
     */
    'sbc'?: SbcEnum;
    /**
     * 
     * @type {OsEdition}
     * @memberof PatchedPiRequest
     */
    'edition'?: OsEdition;
    /**
     * Please enter the hostname you set in the Raspberry Pi Imager\'s Advanced Options menu (without .local extension)
     * @type {string}
     * @memberof PatchedPiRequest
     */
    'hostname'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedPiRequest
     */
    'fqdn'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedPiRequest
     */
    'favorite'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedPiRequest
     */
    'setup_finished'?: boolean;
}
/**
 * 
 * @export
 * @interface PatchedPiSettingsRequest
 */
export interface PatchedPiSettingsRequest {
    /**
     * Send camera stream to PrintNanny Cloud
     * @type {boolean}
     * @memberof PatchedPiSettingsRequest
     */
    'cloud_video_enabled'?: boolean;
    /**
     * Send telemetry and performance profiling data to PrintNanny Cloud
     * @type {boolean}
     * @memberof PatchedPiSettingsRequest
     */
    'telemetry_enabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PatchedPiSettingsRequest
     */
    'pi'?: number;
}
/**
 * 
 * @export
 * @interface PatchedPublicKeyRequest
 */
export interface PatchedPublicKeyRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedPublicKeyRequest
     */
    'pem'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedPublicKeyRequest
     */
    'cipher'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedPublicKeyRequest
     */
    'length'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedPublicKeyRequest
     */
    'fingerprint'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedPublicKeyRequest
     */
    'pi'?: number;
}
/**
 * 
 * @export
 * @interface PatchedSystemInfoRequest
 */
export interface PatchedSystemInfoRequest {
    /**
     * Populated from /etc/machine-id
     * @type {string}
     * @memberof PatchedSystemInfoRequest
     */
    'machine_id'?: string;
    /**
     * Populated from /proc/cpuinfo REVISION
     * @type {string}
     * @memberof PatchedSystemInfoRequest
     */
    'revision'?: string;
    /**
     * Populated from /proc/cpuinfo MODEL
     * @type {string}
     * @memberof PatchedSystemInfoRequest
     */
    'model'?: string;
    /**
     * Populated from /proc/cpuinfo SERIAL
     * @type {string}
     * @memberof PatchedSystemInfoRequest
     */
    'serial'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedSystemInfoRequest
     */
    'cores'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedSystemInfoRequest
     */
    'ram'?: number;
    /**
     * PrintNanny OS VERSION_ID from /etc/os-release
     * @type {string}
     * @memberof PatchedSystemInfoRequest
     */
    'os_version_id'?: string;
    /**
     * PrintNanny OS BUILD_ID from /etc/os-release
     * @type {string}
     * @memberof PatchedSystemInfoRequest
     */
    'os_build_id'?: string;
    /**
     * PrintNanny OS VARIANT_ID from /etc/os-release
     * @type {string}
     * @memberof PatchedSystemInfoRequest
     */
    'os_variant_id'?: string;
    /**
     * Full contents of /etc/os-release in key:value format
     * @type {{ [key: string]: any; }}
     * @memberof PatchedSystemInfoRequest
     */
    'os_release_json'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof PatchedSystemInfoRequest
     */
    'pi'?: number;
}
/**
 * 
 * @export
 * @interface PatchedUserRequest
 */
export interface PatchedUserRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedUserRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedUserRequest
     */
    'first_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedUserRequest
     */
    'last_name'?: string | null;
}
/**
 * 
 * @export
 * @interface PatchedWebrtcStreamRequest
 */
export interface PatchedWebrtcStreamRequest {
    /**
     * 
     * @type {boolean}
     * @memberof PatchedWebrtcStreamRequest
     */
    'active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedWebrtcStreamRequest
     */
    'stream_secret'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedWebrtcStreamRequest
     */
    'stream_pin'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedWebrtcStreamRequest
     */
    'api_token'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedWebrtcStreamRequest
     */
    'rtp_port'?: number;
}
/**
 * 
 * @export
 * @interface Pi
 */
export interface Pi {
    /**
     * 
     * @type {number}
     * @memberof Pi
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Pi
     */
    'last_boot': string;
    /**
     * 
     * @type {AlertSettings}
     * @memberof Pi
     */
    'alert_settings': AlertSettings;
    /**
     * 
     * @type {PiSettings}
     * @memberof Pi
     */
    'settings': PiSettings;
    /**
     * 
     * @type {CloudiotDevice}
     * @memberof Pi
     */
    'cloudiot_device': CloudiotDevice;
    /**
     * 
     * @type {User}
     * @memberof Pi
     */
    'user': User;
    /**
     * 
     * @type {SystemInfo}
     * @memberof Pi
     */
    'system_info': SystemInfo;
    /**
     * 
     * @type {PublicKey}
     * @memberof Pi
     */
    'public_key': PublicKey;
    /**
     * 
     * @type {WebrtcStream}
     * @memberof Pi
     */
    'webrtc_edge': WebrtcStream;
    /**
     * 
     * @type {WebrtcStream}
     * @memberof Pi
     */
    'webrtc_cloud': WebrtcStream;
    /**
     * 
     * @type {OctoPrintServer}
     * @memberof Pi
     */
    'octoprint_server': OctoPrintServer;
    /**
     * 
     * @type {PiUrls}
     * @memberof Pi
     */
    'urls': PiUrls;
    /**
     * 
     * @type {SbcEnum}
     * @memberof Pi
     */
    'sbc'?: SbcEnum;
    /**
     * 
     * @type {OsEdition}
     * @memberof Pi
     */
    'edition'?: OsEdition;
    /**
     * 
     * @type {string}
     * @memberof Pi
     */
    'created_dt': string;
    /**
     * Please enter the hostname you set in the Raspberry Pi Imager\'s Advanced Options menu (without .local extension)
     * @type {string}
     * @memberof Pi
     */
    'hostname'?: string;
    /**
     * 
     * @type {string}
     * @memberof Pi
     */
    'fqdn'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Pi
     */
    'favorite'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Pi
     */
    'setup_finished'?: boolean;
}
/**
 * 
 * @export
 * @interface PiRequest
 */
export interface PiRequest {
    /**
     * 
     * @type {SbcEnum}
     * @memberof PiRequest
     */
    'sbc'?: SbcEnum;
    /**
     * 
     * @type {OsEdition}
     * @memberof PiRequest
     */
    'edition'?: OsEdition;
    /**
     * Please enter the hostname you set in the Raspberry Pi Imager\'s Advanced Options menu (without .local extension)
     * @type {string}
     * @memberof PiRequest
     */
    'hostname'?: string;
    /**
     * 
     * @type {string}
     * @memberof PiRequest
     */
    'fqdn'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PiRequest
     */
    'favorite'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PiRequest
     */
    'setup_finished'?: boolean;
}
/**
 * 
 * @export
 * @interface PiSettings
 */
export interface PiSettings {
    /**
     * 
     * @type {number}
     * @memberof PiSettings
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PiSettings
     */
    'updated_dt': string;
    /**
     * Send camera stream to PrintNanny Cloud
     * @type {boolean}
     * @memberof PiSettings
     */
    'cloud_video_enabled'?: boolean;
    /**
     * Send telemetry and performance profiling data to PrintNanny Cloud
     * @type {boolean}
     * @memberof PiSettings
     */
    'telemetry_enabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PiSettings
     */
    'pi': number;
}
/**
 * 
 * @export
 * @interface PiSettingsRequest
 */
export interface PiSettingsRequest {
    /**
     * Send camera stream to PrintNanny Cloud
     * @type {boolean}
     * @memberof PiSettingsRequest
     */
    'cloud_video_enabled'?: boolean;
    /**
     * Send telemetry and performance profiling data to PrintNanny Cloud
     * @type {boolean}
     * @memberof PiSettingsRequest
     */
    'telemetry_enabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PiSettingsRequest
     */
    'pi': number;
}
/**
 * 
 * @export
 * @interface PiUrls
 */
export interface PiUrls {
    /**
     * 
     * @type {string}
     * @memberof PiUrls
     */
    'swupdate': string;
    /**
     * 
     * @type {string}
     * @memberof PiUrls
     */
    'octoprint': string;
}
/**
 * @type PolymorphicCommand
 * @export
 */
export type PolymorphicCommand = WebRTCCommand;

/**
 * @type PolymorphicCommandCreateRequest
 * @export
 */
export type PolymorphicCommandCreateRequest = WebRTCCommandCreateRequest;

/**
 * @type PolymorphicEvent
 * @export
 */
export type PolymorphicEvent = OctoPrintEvent | TestEvent | WebRTCCommand | WebRTCEvent;

/**
 * @type PolymorphicEventCreateRequest
 * @export
 */
export type PolymorphicEventCreateRequest = OctoPrintEventRequest | TestEventRequest | WebRTCCommandCreateRequest | WebRTCEventRequest;

/**
 * 
 * @export
 * @interface PrintNannyApiConfig
 */
export interface PrintNannyApiConfig {
    /**
     * 
     * @type {string}
     * @memberof PrintNannyApiConfig
     */
    'bearer_access_token': string | null;
    /**
     * 
     * @type {string}
     * @memberof PrintNannyApiConfig
     */
    'base_path': string;
    /**
     * 
     * @type {string}
     * @memberof PrintNannyApiConfig
     */
    'static_url': string;
    /**
     * 
     * @type {string}
     * @memberof PrintNannyApiConfig
     */
    'dashboard_url': string;
}
/**
 * 
 * @export
 * @interface PublicKey
 */
export interface PublicKey {
    /**
     * 
     * @type {number}
     * @memberof PublicKey
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PublicKey
     */
    'pem': string;
    /**
     * 
     * @type {string}
     * @memberof PublicKey
     */
    'cipher': string;
    /**
     * 
     * @type {number}
     * @memberof PublicKey
     */
    'length': number;
    /**
     * 
     * @type {string}
     * @memberof PublicKey
     */
    'fingerprint': string;
    /**
     * 
     * @type {string}
     * @memberof PublicKey
     */
    'created_dt': string;
    /**
     * 
     * @type {string}
     * @memberof PublicKey
     */
    'updated_dt': string;
    /**
     * 
     * @type {number}
     * @memberof PublicKey
     */
    'pi': number;
}
/**
 * 
 * @export
 * @interface PublicKeyRequest
 */
export interface PublicKeyRequest {
    /**
     * 
     * @type {string}
     * @memberof PublicKeyRequest
     */
    'pem': string;
    /**
     * 
     * @type {string}
     * @memberof PublicKeyRequest
     */
    'cipher': string;
    /**
     * 
     * @type {number}
     * @memberof PublicKeyRequest
     */
    'length': number;
    /**
     * 
     * @type {string}
     * @memberof PublicKeyRequest
     */
    'fingerprint': string;
    /**
     * 
     * @type {number}
     * @memberof PublicKeyRequest
     */
    'pi': number;
}
/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'password1': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'password2': string;
}
/**
 * 
 * @export
 * @interface ResendEmailVerificationRequest
 */
export interface ResendEmailVerificationRequest {
    /**
     * 
     * @type {string}
     * @memberof ResendEmailVerificationRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface RestAuthDetail
 */
export interface RestAuthDetail {
    /**
     * 
     * @type {string}
     * @memberof RestAuthDetail
     */
    'detail': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const SbcEnum = {
    Rpi4: 'rpi_4'
} as const;

export type SbcEnum = typeof SbcEnum[keyof typeof SbcEnum];


/**
 * 
 * @export
 * @interface StripeCustomer
 */
export interface StripeCustomer {
    /**
     * 
     * @type {number}
     * @memberof StripeCustomer
     */
    'djstripe_id': number;
    /**
     * 
     * @type {string}
     * @memberof StripeCustomer
     */
    'djstripe_created': string;
    /**
     * 
     * @type {string}
     * @memberof StripeCustomer
     */
    'djstripe_updated': string;
    /**
     * 
     * @type {string}
     * @memberof StripeCustomer
     */
    'id': string;
    /**
     * Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.
     * @type {boolean}
     * @memberof StripeCustomer
     */
    'livemode'?: boolean | null;
    /**
     * The datetime this object was created in stripe.
     * @type {string}
     * @memberof StripeCustomer
     */
    'created'?: string | null;
    /**
     * A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.
     * @type {{ [key: string]: any; }}
     * @memberof StripeCustomer
     */
    'metadata'?: { [key: string]: any; } | null;
    /**
     * A description of this object.
     * @type {string}
     * @memberof StripeCustomer
     */
    'description'?: string | null;
    /**
     * The customer\'s address.
     * @type {{ [key: string]: any; }}
     * @memberof StripeCustomer
     */
    'address'?: { [key: string]: any; } | null;
    /**
     * Current balance (in cents), if any, being stored on the customer\'s account. If negative, the customer has credit to apply to the next invoice. If positive, the customer has an amount owed that will be added to the next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account for recurring billing purposes (i.e., subscriptions, invoices, invoice items).
     * @type {number}
     * @memberof StripeCustomer
     */
    'balance'?: number | null;
    /**
     * The currency the customer can be charged in for recurring billing purposes
     * @type {string}
     * @memberof StripeCustomer
     */
    'currency'?: string;
    /**
     * Whether or not the latest charge for the customer\'s latest invoice has failed.
     * @type {boolean}
     * @memberof StripeCustomer
     */
    'delinquent'?: boolean | null;
    /**
     * Whether the Customer instance has been deleted upstream in Stripe or not.
     * @type {boolean}
     * @memberof StripeCustomer
     */
    'deleted'?: boolean | null;
    /**
     * If a coupon is present, the date at which it was applied.
     * @type {string}
     * @memberof StripeCustomer
     */
    'coupon_start': string;
    /**
     * If a coupon is present and has a limited duration, the date that the discount will end.
     * @type {string}
     * @memberof StripeCustomer
     */
    'coupon_end': string;
    /**
     * 
     * @type {string}
     * @memberof StripeCustomer
     */
    'email'?: string;
    /**
     * The prefix for the customer used to generate unique invoice numbers.
     * @type {string}
     * @memberof StripeCustomer
     */
    'invoice_prefix'?: string;
    /**
     * The customer\'s default invoice settings.
     * @type {{ [key: string]: any; }}
     * @memberof StripeCustomer
     */
    'invoice_settings'?: { [key: string]: any; } | null;
    /**
     * The customer\'s full name or business name.
     * @type {string}
     * @memberof StripeCustomer
     */
    'name'?: string;
    /**
     * The customer\'s phone number.
     * @type {string}
     * @memberof StripeCustomer
     */
    'phone'?: string;
    /**
     * The customer\'s preferred locales (languages), ordered by preference.
     * @type {{ [key: string]: any; }}
     * @memberof StripeCustomer
     */
    'preferred_locales'?: { [key: string]: any; } | null;
    /**
     * Shipping information associated with the customer.
     * @type {{ [key: string]: any; }}
     * @memberof StripeCustomer
     */
    'shipping'?: { [key: string]: any; } | null;
    /**
     * Describes the customer\'s tax exemption status. When set to reverse, invoice and receipt PDFs include the text \"Reverse charge\".
     * @type {TaxExemptEnum}
     * @memberof StripeCustomer
     */
    'tax_exempt'?: TaxExemptEnum;
    /**
     * 
     * @type {string}
     * @memberof StripeCustomer
     */
    'date_purged': string;
    /**
     * The Stripe Account this object belongs to.
     * @type {string}
     * @memberof StripeCustomer
     */
    'djstripe_owner_account': string | null;
    /**
     * 
     * @type {string}
     * @memberof StripeCustomer
     */
    'default_source'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof StripeCustomer
     */
    'coupon'?: number | null;
    /**
     * default payment method used for subscriptions and invoices for the customer.
     * @type {string}
     * @memberof StripeCustomer
     */
    'default_payment_method'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof StripeCustomer
     */
    'subscriber': number | null;
}
/**
 * 
 * @export
 * @interface StripePaymentMethod
 */
export interface StripePaymentMethod {
    /**
     * 
     * @type {number}
     * @memberof StripePaymentMethod
     */
    'djstripe_id': number;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentMethod
     */
    'djstripe_created': string;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentMethod
     */
    'djstripe_updated': string;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentMethod
     */
    'id': string;
    /**
     * Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.
     * @type {boolean}
     * @memberof StripePaymentMethod
     */
    'livemode'?: boolean | null;
    /**
     * The datetime this object was created in stripe.
     * @type {string}
     * @memberof StripePaymentMethod
     */
    'created'?: string | null;
    /**
     * A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'metadata'?: { [key: string]: any; } | null;
    /**
     * Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'billing_details': { [key: string]: any; };
    /**
     * The type of the PaymentMethod.
     * @type {TypeEnum}
     * @memberof StripePaymentMethod
     */
    'type': TypeEnum;
    /**
     * Additional information for payment methods of type `acss_debit`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'acss_debit'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `afterpay_clearpay`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'afterpay_clearpay'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `alipay`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'alipay'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `au_becs_debit`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'au_becs_debit'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `bacs_debit`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'bacs_debit'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `bancontact`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'bancontact'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `boleto`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'boleto'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `card`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'card'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `card_present`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'card_present'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `eps`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'eps'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `fpx`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'fpx'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `giropay`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'giropay'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `grabpay`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'grabpay'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `ideal`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'ideal'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `interac_present`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'interac_present'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `oxxo`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'oxxo'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `p24`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'p24'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `sepa_debit`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'sepa_debit'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `sofort`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'sofort'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `wechat_pay`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'wechat_pay'?: { [key: string]: any; } | null;
    /**
     * The Stripe Account this object belongs to.
     * @type {string}
     * @memberof StripePaymentMethod
     */
    'djstripe_owner_account'?: string | null;
    /**
     * Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.
     * @type {string}
     * @memberof StripePaymentMethod
     */
    'customer'?: string | null;
}
/**
 * 
 * @export
 * @interface StripePlan
 */
export interface StripePlan {
    /**
     * 
     * @type {number}
     * @memberof StripePlan
     */
    'djstripe_id': number;
    /**
     * 
     * @type {string}
     * @memberof StripePlan
     */
    'djstripe_created': string;
    /**
     * 
     * @type {string}
     * @memberof StripePlan
     */
    'djstripe_updated': string;
    /**
     * 
     * @type {string}
     * @memberof StripePlan
     */
    'id': string;
    /**
     * Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.
     * @type {boolean}
     * @memberof StripePlan
     */
    'livemode'?: boolean | null;
    /**
     * The datetime this object was created in stripe.
     * @type {string}
     * @memberof StripePlan
     */
    'created'?: string | null;
    /**
     * A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.
     * @type {{ [key: string]: any; }}
     * @memberof StripePlan
     */
    'metadata'?: { [key: string]: any; } | null;
    /**
     * A description of this object.
     * @type {string}
     * @memberof StripePlan
     */
    'description'?: string | null;
    /**
     * Whether the plan can be used for new purchases.
     * @type {boolean}
     * @memberof StripePlan
     */
    'active': boolean;
    /**
     * Amount (as decimal) to be charged on the interval specified.
     * @type {string}
     * @memberof StripePlan
     */
    'amount'?: string | null;
    /**
     * The unit amount in cents to be charged, represented as a decimal string with at most 12 decimal places.
     * @type {string}
     * @memberof StripePlan
     */
    'amount_decimal'?: string | null;
    /**
     * Three-letter ISO currency code
     * @type {string}
     * @memberof StripePlan
     */
    'currency': string;
    /**
     * The frequency with which a subscription should be billed.
     * @type {IntervalEnum}
     * @memberof StripePlan
     */
    'interval': IntervalEnum;
    /**
     * The number of intervals (specified in the interval property) between each subscription billing.
     * @type {number}
     * @memberof StripePlan
     */
    'interval_count'?: number | null;
    /**
     * A brief description of the plan, hidden from customers.
     * @type {string}
     * @memberof StripePlan
     */
    'nickname'?: string;
    /**
     * Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`.
     * @type {{ [key: string]: any; }}
     * @memberof StripePlan
     */
    'tiers'?: { [key: string]: any; } | null;
    /**
     * Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`.
     * @type {{ [key: string]: any; }}
     * @memberof StripePlan
     */
    'transform_usage'?: { [key: string]: any; } | null;
    /**
     * Number of trial period days granted when subscribing a customer to this plan. Null if the plan has no trial period.
     * @type {number}
     * @memberof StripePlan
     */
    'trial_period_days'?: number | null;
    /**
     * Configures how the quantity per period should be determined, can be either `metered` or `licensed`. `licensed` will automatically bill the `quantity` set for a plan when adding it to a subscription, `metered` will aggregate the total usage based on usage records. Defaults to `licensed`.
     * @type {UsageTypeEnum}
     * @memberof StripePlan
     */
    'usage_type'?: UsageTypeEnum;
    /**
     * The Stripe Account this object belongs to.
     * @type {string}
     * @memberof StripePlan
     */
    'djstripe_owner_account'?: string | null;
    /**
     * The product whose pricing this plan determines.
     * @type {string}
     * @memberof StripePlan
     */
    'product'?: string | null;
}
/**
 * 
 * @export
 * @interface StripeSubscription
 */
export interface StripeSubscription {
    /**
     * 
     * @type {number}
     * @memberof StripeSubscription
     */
    'djstripe_id': number;
    /**
     * 
     * @type {StripePlan}
     * @memberof StripeSubscription
     */
    'plan': StripePlan;
    /**
     * 
     * @type {StripePaymentMethod}
     * @memberof StripeSubscription
     */
    'default_payment_method': StripePaymentMethod;
    /**
     * 
     * @type {StripeSubscriptionSchedule}
     * @memberof StripeSubscription
     */
    'schedule': StripeSubscriptionSchedule;
    /**
     * 
     * @type {boolean}
     * @memberof StripeSubscription
     */
    'is_period_current': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StripeSubscription
     */
    'is_status_current': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StripeSubscription
     */
    'is_status_temporarily_current': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StripeSubscription
     */
    'is_valid': boolean;
    /**
     * 
     * @type {string}
     * @memberof StripeSubscription
     */
    'djstripe_created': string;
    /**
     * 
     * @type {string}
     * @memberof StripeSubscription
     */
    'djstripe_updated': string;
    /**
     * 
     * @type {string}
     * @memberof StripeSubscription
     */
    'id': string;
    /**
     * Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.
     * @type {boolean}
     * @memberof StripeSubscription
     */
    'livemode'?: boolean | null;
    /**
     * The datetime this object was created in stripe.
     * @type {string}
     * @memberof StripeSubscription
     */
    'created'?: string | null;
    /**
     * A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.
     * @type {{ [key: string]: any; }}
     * @memberof StripeSubscription
     */
    'metadata'?: { [key: string]: any; } | null;
    /**
     * A description of this object.
     * @type {string}
     * @memberof StripeSubscription
     */
    'description'?: string | null;
    /**
     * A positive decimal that represents the fee percentage of the subscription invoice amount that will be transferred to the application owner\'s Stripe account each billing period.
     * @type {string}
     * @memberof StripeSubscription
     */
    'application_fee_percent'?: string | null;
    /**
     * Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
     * @type {string}
     * @memberof StripeSubscription
     */
    'billing_cycle_anchor'?: string | null;
    /**
     * Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period.
     * @type {{ [key: string]: any; }}
     * @memberof StripeSubscription
     */
    'billing_thresholds'?: { [key: string]: any; } | null;
    /**
     * A date in the future at which the subscription will automatically get canceled.
     * @type {string}
     * @memberof StripeSubscription
     */
    'cancel_at'?: string | null;
    /**
     * If the subscription has been canceled with the ``at_period_end`` flag set to true, ``cancel_at_period_end`` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.
     * @type {boolean}
     * @memberof StripeSubscription
     */
    'cancel_at_period_end'?: boolean;
    /**
     * If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with ``cancel_at_period_end``, canceled_at will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
     * @type {string}
     * @memberof StripeSubscription
     */
    'canceled_at'?: string | null;
    /**
     * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
     * @type {CollectionMethodEnum}
     * @memberof StripeSubscription
     */
    'collection_method': CollectionMethodEnum;
    /**
     * End of the current period for which the subscription has been invoiced. At the end of this period, a new invoice will be created.
     * @type {string}
     * @memberof StripeSubscription
     */
    'current_period_end': string;
    /**
     * Start of the current period for which the subscription has been invoiced.
     * @type {string}
     * @memberof StripeSubscription
     */
    'current_period_start': string;
    /**
     * Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `billing=charge_automatically`.
     * @type {number}
     * @memberof StripeSubscription
     */
    'days_until_due'?: number | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof StripeSubscription
     */
    'discount'?: { [key: string]: any; } | null;
    /**
     * If the subscription has ended (either because it was canceled or because the customer was switched to a subscription to a new plan), the date the subscription ended.
     * @type {string}
     * @memberof StripeSubscription
     */
    'ended_at'?: string | null;
    /**
     * Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at pending_invoice_item_interval.
     * @type {string}
     * @memberof StripeSubscription
     */
    'next_pending_invoice_item_invoice'?: string | null;
    /**
     * Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling Create an invoice for the given subscription at the specified interval.
     * @type {{ [key: string]: any; }}
     * @memberof StripeSubscription
     */
    'pending_invoice_item_interval'?: { [key: string]: any; } | null;
    /**
     * If specified, pending updates that will be applied to the subscription once the latest_invoice has been paid.
     * @type {{ [key: string]: any; }}
     * @memberof StripeSubscription
     */
    'pending_update'?: { [key: string]: any; } | null;
    /**
     * The quantity applied to this subscription. This value will be `null` for multi-plan subscriptions
     * @type {number}
     * @memberof StripeSubscription
     */
    'quantity'?: number | null;
    /**
     * Date when the subscription was first created. The date might differ from the created date due to backdating.
     * @type {string}
     * @memberof StripeSubscription
     */
    'start_date'?: string | null;
    /**
     * The status of this subscription.
     * @type {StripeSubscriptionStatusEnum}
     * @memberof StripeSubscription
     */
    'status': StripeSubscriptionStatusEnum;
    /**
     * If the subscription has a trial, the end of that trial.
     * @type {string}
     * @memberof StripeSubscription
     */
    'trial_end'?: string | null;
    /**
     * If the subscription has a trial, the beginning of that trial.
     * @type {string}
     * @memberof StripeSubscription
     */
    'trial_start'?: string | null;
    /**
     * The Stripe Account this object belongs to.
     * @type {string}
     * @memberof StripeSubscription
     */
    'djstripe_owner_account'?: string | null;
    /**
     * The customer associated with this subscription.
     * @type {string}
     * @memberof StripeSubscription
     */
    'customer': string;
    /**
     * The default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer\'s default source.
     * @type {string}
     * @memberof StripeSubscription
     */
    'default_source'?: string | null;
    /**
     * The most recent invoice this subscription has generated.
     * @type {string}
     * @memberof StripeSubscription
     */
    'latest_invoice'?: string | null;
    /**
     * We can use this SetupIntent to collect user authentication when creating a subscription without immediate payment or updating a subscription\'s payment method, allowing you to optimize for off-session payments.
     * @type {string}
     * @memberof StripeSubscription
     */
    'pending_setup_intent'?: string | null;
    /**
     * The tax rates that will apply to any subscription item that does not have tax_rates set. Invoices created will have their default_tax_rates populated from the subscription.
     * @type {Array<number>}
     * @memberof StripeSubscription
     */
    'default_tax_rates'?: Array<number>;
}
/**
 * 
 * @export
 * @interface StripeSubscriptionSchedule
 */
export interface StripeSubscriptionSchedule {
    /**
     * 
     * @type {number}
     * @memberof StripeSubscriptionSchedule
     */
    'djstripe_id': number;
    /**
     * 
     * @type {string}
     * @memberof StripeSubscriptionSchedule
     */
    'djstripe_created': string;
    /**
     * 
     * @type {string}
     * @memberof StripeSubscriptionSchedule
     */
    'djstripe_updated': string;
    /**
     * 
     * @type {string}
     * @memberof StripeSubscriptionSchedule
     */
    'id': string;
    /**
     * Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.
     * @type {boolean}
     * @memberof StripeSubscriptionSchedule
     */
    'livemode'?: boolean | null;
    /**
     * The datetime this object was created in stripe.
     * @type {string}
     * @memberof StripeSubscriptionSchedule
     */
    'created'?: string | null;
    /**
     * A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.
     * @type {{ [key: string]: any; }}
     * @memberof StripeSubscriptionSchedule
     */
    'metadata'?: { [key: string]: any; } | null;
    /**
     * A description of this object.
     * @type {string}
     * @memberof StripeSubscriptionSchedule
     */
    'description'?: string | null;
    /**
     * Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period.
     * @type {{ [key: string]: any; }}
     * @memberof StripeSubscriptionSchedule
     */
    'billing_thresholds'?: { [key: string]: any; } | null;
    /**
     * Time at which the subscription schedule was canceled.
     * @type {string}
     * @memberof StripeSubscriptionSchedule
     */
    'canceled_at'?: string | null;
    /**
     * Time at which the subscription schedule was completed.
     * @type {string}
     * @memberof StripeSubscriptionSchedule
     */
    'completed_at'?: string | null;
    /**
     * Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`.
     * @type {{ [key: string]: any; }}
     * @memberof StripeSubscriptionSchedule
     */
    'current_phase'?: { [key: string]: any; } | null;
    /**
     * Object representing the subscription schedule\'s default settings.
     * @type {{ [key: string]: any; }}
     * @memberof StripeSubscriptionSchedule
     */
    'default_settings'?: { [key: string]: any; } | null;
    /**
     * Behavior of the subscription schedule and underlying subscription when it ends.
     * @type {EndBehaviorEnum}
     * @memberof StripeSubscriptionSchedule
     */
    'end_behavior': EndBehaviorEnum;
    /**
     * Configuration for the subscription schedule\'s phases.
     * @type {{ [key: string]: any; }}
     * @memberof StripeSubscriptionSchedule
     */
    'phases'?: { [key: string]: any; } | null;
    /**
     * Time at which the subscription schedule was released.
     * @type {string}
     * @memberof StripeSubscriptionSchedule
     */
    'released_at'?: string | null;
    /**
     * The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`.
     * @type {StripeSubscriptionScheduleStatusEnum}
     * @memberof StripeSubscriptionSchedule
     */
    'status': StripeSubscriptionScheduleStatusEnum;
    /**
     * The Stripe Account this object belongs to.
     * @type {string}
     * @memberof StripeSubscriptionSchedule
     */
    'djstripe_owner_account'?: string | null;
    /**
     * The customer who owns the subscription schedule.
     * @type {number}
     * @memberof StripeSubscriptionSchedule
     */
    'customer': number;
    /**
     * The subscription once managed by this subscription schedule (if it is released).
     * @type {number}
     * @memberof StripeSubscriptionSchedule
     */
    'released_subscription'?: number | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const StripeSubscriptionScheduleStatusEnum = {
    Active: 'active',
    Canceled: 'canceled',
    Completed: 'completed',
    NotStarted: 'not_started',
    Released: 'released'
} as const;

export type StripeSubscriptionScheduleStatusEnum = typeof StripeSubscriptionScheduleStatusEnum[keyof typeof StripeSubscriptionScheduleStatusEnum];


/**
 * 
 * @export
 * @enum {string}
 */

export const StripeSubscriptionStatusEnum = {
    Active: 'active',
    Canceled: 'canceled',
    Incomplete: 'incomplete',
    IncompleteExpired: 'incomplete_expired',
    PastDue: 'past_due',
    Trialing: 'trialing',
    Unpaid: 'unpaid'
} as const;

export type StripeSubscriptionStatusEnum = typeof StripeSubscriptionStatusEnum[keyof typeof StripeSubscriptionStatusEnum];


/**
 * 
 * @export
 * @interface SystemInfo
 */
export interface SystemInfo {
    /**
     * 
     * @type {number}
     * @memberof SystemInfo
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof SystemInfo
     */
    'created_dt': string;
    /**
     * 
     * @type {string}
     * @memberof SystemInfo
     */
    'updated_dt': string;
    /**
     * Populated from /etc/machine-id
     * @type {string}
     * @memberof SystemInfo
     */
    'machine_id': string;
    /**
     * Populated from /proc/cpuinfo REVISION
     * @type {string}
     * @memberof SystemInfo
     */
    'revision': string;
    /**
     * Populated from /proc/cpuinfo MODEL
     * @type {string}
     * @memberof SystemInfo
     */
    'model': string;
    /**
     * Populated from /proc/cpuinfo SERIAL
     * @type {string}
     * @memberof SystemInfo
     */
    'serial': string;
    /**
     * 
     * @type {number}
     * @memberof SystemInfo
     */
    'cores': number;
    /**
     * 
     * @type {number}
     * @memberof SystemInfo
     */
    'ram': number;
    /**
     * PrintNanny OS VERSION_ID from /etc/os-release
     * @type {string}
     * @memberof SystemInfo
     */
    'os_version_id': string;
    /**
     * PrintNanny OS BUILD_ID from /etc/os-release
     * @type {string}
     * @memberof SystemInfo
     */
    'os_build_id': string;
    /**
     * PrintNanny OS VARIANT_ID from /etc/os-release
     * @type {string}
     * @memberof SystemInfo
     */
    'os_variant_id': string;
    /**
     * Full contents of /etc/os-release in key:value format
     * @type {{ [key: string]: any; }}
     * @memberof SystemInfo
     */
    'os_release_json'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof SystemInfo
     */
    'pi': number;
}
/**
 * 
 * @export
 * @interface SystemInfoRequest
 */
export interface SystemInfoRequest {
    /**
     * Populated from /etc/machine-id
     * @type {string}
     * @memberof SystemInfoRequest
     */
    'machine_id': string;
    /**
     * Populated from /proc/cpuinfo REVISION
     * @type {string}
     * @memberof SystemInfoRequest
     */
    'revision': string;
    /**
     * Populated from /proc/cpuinfo MODEL
     * @type {string}
     * @memberof SystemInfoRequest
     */
    'model': string;
    /**
     * Populated from /proc/cpuinfo SERIAL
     * @type {string}
     * @memberof SystemInfoRequest
     */
    'serial': string;
    /**
     * 
     * @type {number}
     * @memberof SystemInfoRequest
     */
    'cores': number;
    /**
     * 
     * @type {number}
     * @memberof SystemInfoRequest
     */
    'ram': number;
    /**
     * PrintNanny OS VERSION_ID from /etc/os-release
     * @type {string}
     * @memberof SystemInfoRequest
     */
    'os_version_id': string;
    /**
     * PrintNanny OS BUILD_ID from /etc/os-release
     * @type {string}
     * @memberof SystemInfoRequest
     */
    'os_build_id': string;
    /**
     * PrintNanny OS VARIANT_ID from /etc/os-release
     * @type {string}
     * @memberof SystemInfoRequest
     */
    'os_variant_id': string;
    /**
     * Full contents of /etc/os-release in key:value format
     * @type {{ [key: string]: any; }}
     * @memberof SystemInfoRequest
     */
    'os_release_json'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof SystemInfoRequest
     */
    'pi': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const TaxExemptEnum = {
    Exempt: 'exempt',
    None: 'none',
    Reverse: 'reverse'
} as const;

export type TaxExemptEnum = typeof TaxExemptEnum[keyof typeof TaxExemptEnum];


/**
 * 
 * @export
 * @interface TestEvent
 */
export interface TestEvent {
    /**
     * 
     * @type {number}
     * @memberof TestEvent
     */
    'id': number;
    /**
     * 
     * @type {TestEventModel}
     * @memberof TestEvent
     */
    'model': TestEventModel;
    /**
     * 
     * @type {string}
     * @memberof TestEvent
     */
    'created_dt': string;
    /**
     * 
     * @type {EventSource}
     * @memberof TestEvent
     */
    'source': EventSource;
    /**
     * 
     * @type {TestEventName}
     * @memberof TestEvent
     */
    'event_name': TestEventName;
    /**
     * 
     * @type {number}
     * @memberof TestEvent
     */
    'polymorphic_ctype': number;
    /**
     * 
     * @type {number}
     * @memberof TestEvent
     */
    'user': number;
    /**
     * 
     * @type {number}
     * @memberof TestEvent
     */
    'pi': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const TestEventModel = {
    TestEvent: 'TestEvent'
} as const;

export type TestEventModel = typeof TestEventModel[keyof typeof TestEventModel];


/**
 * 
 * @export
 * @enum {string}
 */

export const TestEventName = {
    Ping: 'mqtt_ping',
    Pong: 'mqtt_pong'
} as const;

export type TestEventName = typeof TestEventName[keyof typeof TestEventName];


/**
 * 
 * @export
 * @interface TestEventRequest
 */
export interface TestEventRequest {
    /**
     * 
     * @type {TestEventModel}
     * @memberof TestEventRequest
     */
    'model': TestEventModel;
    /**
     * 
     * @type {EventSource}
     * @memberof TestEventRequest
     */
    'source': EventSource;
    /**
     * 
     * @type {TestEventName}
     * @memberof TestEventRequest
     */
    'event_name': TestEventName;
    /**
     * 
     * @type {number}
     * @memberof TestEventRequest
     */
    'pi': number;
}
/**
 * Serializer for Token model.
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'key': string;
}
/**
 * Our default response serializer.
 * @export
 * @interface TokenResponse
 */
export interface TokenResponse {
    /**
     * 
     * @type {string}
     * @memberof TokenResponse
     */
    'token': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const TypeEnum = {
    AcssDebit: 'acss_debit',
    AfterpayClearpay: 'afterpay_clearpay',
    Alipay: 'alipay',
    AuBecsDebit: 'au_becs_debit',
    BacsDebit: 'bacs_debit',
    Bancontact: 'bancontact',
    Boleto: 'boleto',
    Card: 'card',
    CardPresent: 'card_present',
    Eps: 'eps',
    Fpx: 'fpx',
    Giropay: 'giropay',
    Grabpay: 'grabpay',
    Ideal: 'ideal',
    InteracPresent: 'interac_present',
    Klarna: 'klarna',
    Oxxo: 'oxxo',
    P24: 'p24',
    SepaDebit: 'sepa_debit',
    Sofort: 'sofort',
    WechatPay: 'wechat_pay'
} as const;

export type TypeEnum = typeof TypeEnum[keyof typeof TypeEnum];


/**
 * 
 * @export
 * @enum {string}
 */

export const UsageTypeEnum = {
    Licensed: 'licensed',
    Metered: 'metered'
} as const;

export type UsageTypeEnum = typeof UsageTypeEnum[keyof typeof UsageTypeEnum];


/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'first_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'last_name'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'is_beta_tester': boolean;
}
/**
 * 
 * @export
 * @interface UserRequest
 */
export interface UserRequest {
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    'first_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    'last_name'?: string | null;
}
/**
 * 
 * @export
 * @interface VerifyEmailRequest
 */
export interface VerifyEmailRequest {
    /**
     * 
     * @type {string}
     * @memberof VerifyEmailRequest
     */
    'key': string;
}
/**
 * 
 * @export
 * @interface WebRTCCommand
 */
export interface WebRTCCommand {
    /**
     * 
     * @type {number}
     * @memberof WebRTCCommand
     */
    'id': number;
    /**
     * 
     * @type {WebrtcStream}
     * @memberof WebRTCCommand
     */
    'stream': WebrtcStream;
    /**
     * 
     * @type {WebRTCCommandModel}
     * @memberof WebRTCCommand
     */
    'model': WebRTCCommandModel;
    /**
     * 
     * @type {string}
     * @memberof WebRTCCommand
     */
    'created_dt': string;
    /**
     * 
     * @type {EventSource}
     * @memberof WebRTCCommand
     */
    'source': EventSource;
    /**
     * 
     * @type {WebRTCCommandName}
     * @memberof WebRTCCommand
     */
    'event_name': WebRTCCommandName;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof WebRTCCommand
     */
    'data'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof WebRTCCommand
     */
    'polymorphic_ctype': number;
    /**
     * 
     * @type {number}
     * @memberof WebRTCCommand
     */
    'user': number;
    /**
     * 
     * @type {number}
     * @memberof WebRTCCommand
     */
    'pi': number;
}
/**
 * 
 * @export
 * @interface WebRTCCommandCreateRequest
 */
export interface WebRTCCommandCreateRequest {
    /**
     * 
     * @type {WebRTCCommandModel}
     * @memberof WebRTCCommandCreateRequest
     */
    'model': WebRTCCommandModel;
    /**
     * 
     * @type {EventSource}
     * @memberof WebRTCCommandCreateRequest
     */
    'source': EventSource;
    /**
     * 
     * @type {WebRTCCommandName}
     * @memberof WebRTCCommandCreateRequest
     */
    'event_name': WebRTCCommandName;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof WebRTCCommandCreateRequest
     */
    'data'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof WebRTCCommandCreateRequest
     */
    'pi': number;
    /**
     * 
     * @type {number}
     * @memberof WebRTCCommandCreateRequest
     */
    'stream': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const WebRTCCommandModel = {
    WebRtcCommand: 'WebRTCCommand'
} as const;

export type WebRTCCommandModel = typeof WebRTCCommandModel[keyof typeof WebRTCCommandModel];


/**
 * 
 * @export
 * @enum {string}
 */

export const WebRTCCommandName = {
    Start: 'stream_start',
    Stop: 'stream_stop'
} as const;

export type WebRTCCommandName = typeof WebRTCCommandName[keyof typeof WebRTCCommandName];


/**
 * 
 * @export
 * @interface WebRTCEvent
 */
export interface WebRTCEvent {
    /**
     * 
     * @type {number}
     * @memberof WebRTCEvent
     */
    'id': number;
    /**
     * 
     * @type {WebRTCEventModel}
     * @memberof WebRTCEvent
     */
    'model': WebRTCEventModel;
    /**
     * 
     * @type {string}
     * @memberof WebRTCEvent
     */
    'created_dt': string;
    /**
     * 
     * @type {EventSource}
     * @memberof WebRTCEvent
     */
    'source': EventSource;
    /**
     * 
     * @type {WebRTCEventName}
     * @memberof WebRTCEvent
     */
    'event_name': WebRTCEventName;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof WebRTCEvent
     */
    'data'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof WebRTCEvent
     */
    'polymorphic_ctype': number;
    /**
     * 
     * @type {number}
     * @memberof WebRTCEvent
     */
    'user': number;
    /**
     * 
     * @type {number}
     * @memberof WebRTCEvent
     */
    'pi': number;
    /**
     * 
     * @type {number}
     * @memberof WebRTCEvent
     */
    'stream': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const WebRTCEventModel = {
    WebRtcEvent: 'WebRTCEvent'
} as const;

export type WebRTCEventModel = typeof WebRTCEventModel[keyof typeof WebRTCEventModel];


/**
 * 
 * @export
 * @enum {string}
 */

export const WebRTCEventName = {
    StartSuccess: 'stream_start_success',
    StartError: 'stream_start_error',
    StopSuccess: 'stream_stop_success',
    StopError: 'stream_stop_error'
} as const;

export type WebRTCEventName = typeof WebRTCEventName[keyof typeof WebRTCEventName];


/**
 * 
 * @export
 * @interface WebRTCEventRequest
 */
export interface WebRTCEventRequest {
    /**
     * 
     * @type {WebRTCEventModel}
     * @memberof WebRTCEventRequest
     */
    'model': WebRTCEventModel;
    /**
     * 
     * @type {EventSource}
     * @memberof WebRTCEventRequest
     */
    'source': EventSource;
    /**
     * 
     * @type {WebRTCEventName}
     * @memberof WebRTCEventRequest
     */
    'event_name': WebRTCEventName;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof WebRTCEventRequest
     */
    'data'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof WebRTCEventRequest
     */
    'pi': number;
    /**
     * 
     * @type {number}
     * @memberof WebRTCEventRequest
     */
    'stream': number;
}
/**
 * 
 * @export
 * @interface WebrtcStream
 */
export interface WebrtcStream {
    /**
     * 
     * @type {string}
     * @memberof WebrtcStream
     */
    'created_dt': string;
    /**
     * 
     * @type {string}
     * @memberof WebrtcStream
     */
    'updated_dt': string;
    /**
     * 
     * @type {JanusConfigType}
     * @memberof WebrtcStream
     */
    'config_type': JanusConfigType;
    /**
     * 
     * @type {boolean}
     * @memberof WebrtcStream
     */
    'active'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof WebrtcStream
     */
    'pi': number;
    /**
     * 
     * @type {string}
     * @memberof WebrtcStream
     */
    'stream_secret'?: string;
    /**
     * 
     * @type {string}
     * @memberof WebrtcStream
     */
    'stream_pin'?: string;
    /**
     * 
     * @type {string}
     * @memberof WebrtcStream
     */
    'api_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof WebrtcStream
     */
    'admin_secret': string;
    /**
     * 
     * @type {number}
     * @memberof WebrtcStream
     */
    'rtp_port'?: number;
    /**
     * 
     * @type {string}
     * @memberof WebrtcStream
     */
    'rtp_domain': string;
    /**
     * 
     * @type {number}
     * @memberof WebrtcStream
     */
    'pt': number;
    /**
     * 
     * @type {string}
     * @memberof WebrtcStream
     */
    'rtpmap': string;
    /**
     * 
     * @type {number}
     * @memberof WebrtcStream
     */
    'admin_port': number;
    /**
     * 
     * @type {string}
     * @memberof WebrtcStream
     */
    'admin_url': string;
    /**
     * 
     * @type {number}
     * @memberof WebrtcStream
     */
    'api_port': number;
    /**
     * 
     * @type {string}
     * @memberof WebrtcStream
     */
    'api_url': string;
    /**
     * 
     * @type {string}
     * @memberof WebrtcStream
     */
    'api_domain': string;
    /**
     * 
     * @type {number}
     * @memberof WebrtcStream
     */
    'ws_port': number;
    /**
     * 
     * @type {string}
     * @memberof WebrtcStream
     */
    'ws_url': string;
}
/**
 * 
 * @export
 * @interface WebrtcStreamRequest
 */
export interface WebrtcStreamRequest {
    /**
     * 
     * @type {boolean}
     * @memberof WebrtcStreamRequest
     */
    'active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WebrtcStreamRequest
     */
    'stream_secret'?: string;
    /**
     * 
     * @type {string}
     * @memberof WebrtcStreamRequest
     */
    'stream_pin'?: string;
    /**
     * 
     * @type {string}
     * @memberof WebrtcStreamRequest
     */
    'api_token'?: string;
    /**
     * 
     * @type {number}
     * @memberof WebrtcStreamRequest
     */
    'rtp_port'?: number;
}

/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
         * @param {EmailAuthRequest} emailAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accounts2faAuthEmailCreate: async (emailAuthRequest: EmailAuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailAuthRequest' is not null or undefined
            assertParamExists('accounts2faAuthEmailCreate', 'emailAuthRequest', emailAuthRequest)
            const localVarPath = `/accounts/2fa-auth/email/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailAuthRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is a duplicate of rest_framework\'s own ObtainAuthToken method. Instead, this returns an Auth Token based on our callback token and source.
         * @param {CallbackTokenAuthRequest} callbackTokenAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accounts2faAuthTokenCreate: async (callbackTokenAuthRequest: CallbackTokenAuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'callbackTokenAuthRequest' is not null or undefined
            assertParamExists('accounts2faAuthTokenCreate', 'callbackTokenAuthRequest', callbackTokenAuthRequest)
            const localVarPath = `/accounts/2fa-auth/token/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(callbackTokenAuthRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {EmailWaitlistRequest} emailWaitlistRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsEmailWaitlistCreate: async (emailWaitlistRequest: EmailWaitlistRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailWaitlistRequest' is not null or undefined
            assertParamExists('accountsEmailWaitlistCreate', 'emailWaitlistRequest', emailWaitlistRequest)
            const localVarPath = `/api/accounts/email-waitlist/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailWaitlistRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsLoginCreate: async (loginRequest: LoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('accountsLoginCreate', 'loginRequest', loginRequest)
            const localVarPath = `/api/accounts/login/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsLogoutCreate: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts/logout/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
         * @param {PasswordChangeRequest} passwordChangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsPasswordChangeCreate: async (passwordChangeRequest: PasswordChangeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordChangeRequest' is not null or undefined
            assertParamExists('accountsPasswordChangeCreate', 'passwordChangeRequest', passwordChangeRequest)
            const localVarPath = `/api/accounts/password/change/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordChangeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Password reset e-mail link is confirmed, therefore this resets the user\'s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
         * @param {PasswordResetConfirmRequest} passwordResetConfirmRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsPasswordResetConfirmCreate: async (passwordResetConfirmRequest: PasswordResetConfirmRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordResetConfirmRequest' is not null or undefined
            assertParamExists('accountsPasswordResetConfirmCreate', 'passwordResetConfirmRequest', passwordResetConfirmRequest)
            const localVarPath = `/api/accounts/password/reset/confirm/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordResetConfirmRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
         * @param {PasswordResetRequest} passwordResetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsPasswordResetCreate: async (passwordResetRequest: PasswordResetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordResetRequest' is not null or undefined
            assertParamExists('accountsPasswordResetCreate', 'passwordResetRequest', passwordResetRequest)
            const localVarPath = `/api/accounts/password/reset/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordResetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsRegistrationCreate: async (registerRequest: RegisterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequest' is not null or undefined
            assertParamExists('accountsRegistrationCreate', 'registerRequest', registerRequest)
            const localVarPath = `/api/accounts/registration/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResendEmailVerificationRequest} resendEmailVerificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsRegistrationResendEmailCreate: async (resendEmailVerificationRequest: ResendEmailVerificationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resendEmailVerificationRequest' is not null or undefined
            assertParamExists('accountsRegistrationResendEmailCreate', 'resendEmailVerificationRequest', resendEmailVerificationRequest)
            const localVarPath = `/api/accounts/registration/resend-email/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resendEmailVerificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VerifyEmailRequest} verifyEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsRegistrationVerifyEmailCreate: async (verifyEmailRequest: VerifyEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyEmailRequest' is not null or undefined
            assertParamExists('accountsRegistrationVerifyEmailCreate', 'verifyEmailRequest', verifyEmailRequest)
            const localVarPath = `/api/accounts/registration/verify-email/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyEmailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @param {PatchedUserRequest} [patchedUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUserPartialUpdate: async (patchedUserRequest?: PatchedUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts/user/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUserRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts/user/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUserUpdate: async (userRequest: UserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRequest' is not null or undefined
            assertParamExists('accountsUserUpdate', 'userRequest', userRequest)
            const localVarPath = `/api/accounts/user/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
         * @param {EmailAuthRequest} emailAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accounts2faAuthEmailCreate(emailAuthRequest: EmailAuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accounts2faAuthEmailCreate(emailAuthRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This is a duplicate of rest_framework\'s own ObtainAuthToken method. Instead, this returns an Auth Token based on our callback token and source.
         * @param {CallbackTokenAuthRequest} callbackTokenAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accounts2faAuthTokenCreate(callbackTokenAuthRequest: CallbackTokenAuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accounts2faAuthTokenCreate(callbackTokenAuthRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {EmailWaitlistRequest} emailWaitlistRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsEmailWaitlistCreate(emailWaitlistRequest: EmailWaitlistRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailWaitlist>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsEmailWaitlistCreate(emailWaitlistRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsLoginCreate(loginRequest: LoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsLoginCreate(loginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsLogoutCreate(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestAuthDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsLogoutCreate(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
         * @param {PasswordChangeRequest} passwordChangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsPasswordChangeCreate(passwordChangeRequest: PasswordChangeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestAuthDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsPasswordChangeCreate(passwordChangeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Password reset e-mail link is confirmed, therefore this resets the user\'s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
         * @param {PasswordResetConfirmRequest} passwordResetConfirmRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsPasswordResetConfirmCreate(passwordResetConfirmRequest: PasswordResetConfirmRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestAuthDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsPasswordResetConfirmCreate(passwordResetConfirmRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
         * @param {PasswordResetRequest} passwordResetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsPasswordResetCreate(passwordResetRequest: PasswordResetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestAuthDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsPasswordResetCreate(passwordResetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsRegistrationCreate(registerRequest: RegisterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsRegistrationCreate(registerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResendEmailVerificationRequest} resendEmailVerificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsRegistrationResendEmailCreate(resendEmailVerificationRequest: ResendEmailVerificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestAuthDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsRegistrationResendEmailCreate(resendEmailVerificationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {VerifyEmailRequest} verifyEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsRegistrationVerifyEmailCreate(verifyEmailRequest: VerifyEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestAuthDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsRegistrationVerifyEmailCreate(verifyEmailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @param {PatchedUserRequest} [patchedUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUserPartialUpdate(patchedUserRequest?: PatchedUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUserPartialUpdate(patchedUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUserRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUserRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUserUpdate(userRequest: UserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUserUpdate(userRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
         * @param {EmailAuthRequest} emailAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accounts2faAuthEmailCreate(emailAuthRequest: EmailAuthRequest, options?: any): AxiosPromise<DetailResponse> {
            return localVarFp.accounts2faAuthEmailCreate(emailAuthRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This is a duplicate of rest_framework\'s own ObtainAuthToken method. Instead, this returns an Auth Token based on our callback token and source.
         * @param {CallbackTokenAuthRequest} callbackTokenAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accounts2faAuthTokenCreate(callbackTokenAuthRequest: CallbackTokenAuthRequest, options?: any): AxiosPromise<TokenResponse> {
            return localVarFp.accounts2faAuthTokenCreate(callbackTokenAuthRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {EmailWaitlistRequest} emailWaitlistRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsEmailWaitlistCreate(emailWaitlistRequest: EmailWaitlistRequest, options?: any): AxiosPromise<EmailWaitlist> {
            return localVarFp.accountsEmailWaitlistCreate(emailWaitlistRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsLoginCreate(loginRequest: LoginRequest, options?: any): AxiosPromise<Token> {
            return localVarFp.accountsLoginCreate(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsLogoutCreate(options?: any): AxiosPromise<RestAuthDetail> {
            return localVarFp.accountsLogoutCreate(options).then((request) => request(axios, basePath));
        },
        /**
         * Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
         * @param {PasswordChangeRequest} passwordChangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsPasswordChangeCreate(passwordChangeRequest: PasswordChangeRequest, options?: any): AxiosPromise<RestAuthDetail> {
            return localVarFp.accountsPasswordChangeCreate(passwordChangeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Password reset e-mail link is confirmed, therefore this resets the user\'s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
         * @param {PasswordResetConfirmRequest} passwordResetConfirmRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsPasswordResetConfirmCreate(passwordResetConfirmRequest: PasswordResetConfirmRequest, options?: any): AxiosPromise<RestAuthDetail> {
            return localVarFp.accountsPasswordResetConfirmCreate(passwordResetConfirmRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
         * @param {PasswordResetRequest} passwordResetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsPasswordResetCreate(passwordResetRequest: PasswordResetRequest, options?: any): AxiosPromise<RestAuthDetail> {
            return localVarFp.accountsPasswordResetCreate(passwordResetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsRegistrationCreate(registerRequest: RegisterRequest, options?: any): AxiosPromise<Token> {
            return localVarFp.accountsRegistrationCreate(registerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResendEmailVerificationRequest} resendEmailVerificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsRegistrationResendEmailCreate(resendEmailVerificationRequest: ResendEmailVerificationRequest, options?: any): AxiosPromise<RestAuthDetail> {
            return localVarFp.accountsRegistrationResendEmailCreate(resendEmailVerificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VerifyEmailRequest} verifyEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsRegistrationVerifyEmailCreate(verifyEmailRequest: VerifyEmailRequest, options?: any): AxiosPromise<RestAuthDetail> {
            return localVarFp.accountsRegistrationVerifyEmailCreate(verifyEmailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @param {PatchedUserRequest} [patchedUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUserPartialUpdate(patchedUserRequest?: PatchedUserRequest, options?: any): AxiosPromise<User> {
            return localVarFp.accountsUserPartialUpdate(patchedUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUserRetrieve(options?: any): AxiosPromise<User> {
            return localVarFp.accountsUserRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUserUpdate(userRequest: UserRequest, options?: any): AxiosPromise<User> {
            return localVarFp.accountsUserUpdate(userRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountsApi - interface
 * @export
 * @interface AccountsApi
 */
export interface AccountsApiInterface {
    /**
     * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
     * @param {EmailAuthRequest} emailAuthRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accounts2faAuthEmailCreate(emailAuthRequest: EmailAuthRequest, options?: AxiosRequestConfig): AxiosPromise<DetailResponse>;

    /**
     * This is a duplicate of rest_framework\'s own ObtainAuthToken method. Instead, this returns an Auth Token based on our callback token and source.
     * @param {CallbackTokenAuthRequest} callbackTokenAuthRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accounts2faAuthTokenCreate(callbackTokenAuthRequest: CallbackTokenAuthRequest, options?: AxiosRequestConfig): AxiosPromise<TokenResponse>;

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {EmailWaitlistRequest} emailWaitlistRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsEmailWaitlistCreate(emailWaitlistRequest: EmailWaitlistRequest, options?: AxiosRequestConfig): AxiosPromise<EmailWaitlist>;

    /**
     * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsLoginCreate(loginRequest: LoginRequest, options?: AxiosRequestConfig): AxiosPromise<Token>;

    /**
     * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsLogoutCreate(options?: AxiosRequestConfig): AxiosPromise<RestAuthDetail>;

    /**
     * Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
     * @param {PasswordChangeRequest} passwordChangeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsPasswordChangeCreate(passwordChangeRequest: PasswordChangeRequest, options?: AxiosRequestConfig): AxiosPromise<RestAuthDetail>;

    /**
     * Password reset e-mail link is confirmed, therefore this resets the user\'s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
     * @param {PasswordResetConfirmRequest} passwordResetConfirmRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsPasswordResetConfirmCreate(passwordResetConfirmRequest: PasswordResetConfirmRequest, options?: AxiosRequestConfig): AxiosPromise<RestAuthDetail>;

    /**
     * Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
     * @param {PasswordResetRequest} passwordResetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsPasswordResetCreate(passwordResetRequest: PasswordResetRequest, options?: AxiosRequestConfig): AxiosPromise<RestAuthDetail>;

    /**
     * 
     * @param {RegisterRequest} registerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsRegistrationCreate(registerRequest: RegisterRequest, options?: AxiosRequestConfig): AxiosPromise<Token>;

    /**
     * 
     * @param {ResendEmailVerificationRequest} resendEmailVerificationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsRegistrationResendEmailCreate(resendEmailVerificationRequest: ResendEmailVerificationRequest, options?: AxiosRequestConfig): AxiosPromise<RestAuthDetail>;

    /**
     * 
     * @param {VerifyEmailRequest} verifyEmailRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsRegistrationVerifyEmailCreate(verifyEmailRequest: VerifyEmailRequest, options?: AxiosRequestConfig): AxiosPromise<RestAuthDetail>;

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     * @param {PatchedUserRequest} [patchedUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUserPartialUpdate(patchedUserRequest?: PatchedUserRequest, options?: AxiosRequestConfig): AxiosPromise<User>;

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUserRetrieve(options?: AxiosRequestConfig): AxiosPromise<User>;

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     * @param {UserRequest} userRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUserUpdate(userRequest: UserRequest, options?: AxiosRequestConfig): AxiosPromise<User>;

}

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI implements AccountsApiInterface {
    /**
     * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
     * @param {EmailAuthRequest} emailAuthRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accounts2faAuthEmailCreate(emailAuthRequest: EmailAuthRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accounts2faAuthEmailCreate(emailAuthRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This is a duplicate of rest_framework\'s own ObtainAuthToken method. Instead, this returns an Auth Token based on our callback token and source.
     * @param {CallbackTokenAuthRequest} callbackTokenAuthRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accounts2faAuthTokenCreate(callbackTokenAuthRequest: CallbackTokenAuthRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accounts2faAuthTokenCreate(callbackTokenAuthRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {EmailWaitlistRequest} emailWaitlistRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsEmailWaitlistCreate(emailWaitlistRequest: EmailWaitlistRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsEmailWaitlistCreate(emailWaitlistRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsLoginCreate(loginRequest: LoginRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsLoginCreate(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsLogoutCreate(options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsLogoutCreate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
     * @param {PasswordChangeRequest} passwordChangeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsPasswordChangeCreate(passwordChangeRequest: PasswordChangeRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsPasswordChangeCreate(passwordChangeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Password reset e-mail link is confirmed, therefore this resets the user\'s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
     * @param {PasswordResetConfirmRequest} passwordResetConfirmRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsPasswordResetConfirmCreate(passwordResetConfirmRequest: PasswordResetConfirmRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsPasswordResetConfirmCreate(passwordResetConfirmRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
     * @param {PasswordResetRequest} passwordResetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsPasswordResetCreate(passwordResetRequest: PasswordResetRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsPasswordResetCreate(passwordResetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterRequest} registerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsRegistrationCreate(registerRequest: RegisterRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsRegistrationCreate(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResendEmailVerificationRequest} resendEmailVerificationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsRegistrationResendEmailCreate(resendEmailVerificationRequest: ResendEmailVerificationRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsRegistrationResendEmailCreate(resendEmailVerificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VerifyEmailRequest} verifyEmailRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsRegistrationVerifyEmailCreate(verifyEmailRequest: VerifyEmailRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsRegistrationVerifyEmailCreate(verifyEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     * @param {PatchedUserRequest} [patchedUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUserPartialUpdate(patchedUserRequest?: PatchedUserRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUserPartialUpdate(patchedUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUserRetrieve(options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUserRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     * @param {UserRequest} userRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUserUpdate(userRequest: UserRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUserUpdate(userRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AlertSettingsApi - axios parameter creator
 * @export
 */
export const AlertSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AlertSettingsRequest} [alertSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertSettingsCreate: async (alertSettingsRequest?: AlertSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/alert-settings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(alertSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertSettingsList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/alert-settings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert settings.
         * @param {PatchedAlertSettingsRequest} [patchedAlertSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertSettingsPartialUpdate: async (id: number, patchedAlertSettingsRequest?: PatchedAlertSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('alertSettingsPartialUpdate', 'id', id)
            const localVarPath = `/api/alert-settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedAlertSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert settings.
         * @param {AlertSettingsRequest} [alertSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertSettingsUpdate: async (id: number, alertSettingsRequest?: AlertSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('alertSettingsUpdate', 'id', id)
            const localVarPath = `/api/alert-settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(alertSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlertSettingsApi - functional programming interface
 * @export
 */
export const AlertSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AlertSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AlertSettingsRequest} [alertSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertSettingsCreate(alertSettingsRequest?: AlertSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertSettingsCreate(alertSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertSettingsList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertSettingsList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert settings.
         * @param {PatchedAlertSettingsRequest} [patchedAlertSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertSettingsPartialUpdate(id: number, patchedAlertSettingsRequest?: PatchedAlertSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertSettingsPartialUpdate(id, patchedAlertSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert settings.
         * @param {AlertSettingsRequest} [alertSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertSettingsUpdate(id: number, alertSettingsRequest?: AlertSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertSettingsUpdate(id, alertSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AlertSettingsApi - factory interface
 * @export
 */
export const AlertSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AlertSettingsApiFp(configuration)
    return {
        /**
         * 
         * @param {AlertSettingsRequest} [alertSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertSettingsCreate(alertSettingsRequest?: AlertSettingsRequest, options?: any): AxiosPromise<AlertSettings> {
            return localVarFp.alertSettingsCreate(alertSettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertSettingsList(options?: any): AxiosPromise<AlertSettings> {
            return localVarFp.alertSettingsList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert settings.
         * @param {PatchedAlertSettingsRequest} [patchedAlertSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertSettingsPartialUpdate(id: number, patchedAlertSettingsRequest?: PatchedAlertSettingsRequest, options?: any): AxiosPromise<AlertSettings> {
            return localVarFp.alertSettingsPartialUpdate(id, patchedAlertSettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert settings.
         * @param {AlertSettingsRequest} [alertSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertSettingsUpdate(id: number, alertSettingsRequest?: AlertSettingsRequest, options?: any): AxiosPromise<AlertSettings> {
            return localVarFp.alertSettingsUpdate(id, alertSettingsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AlertSettingsApi - interface
 * @export
 * @interface AlertSettingsApi
 */
export interface AlertSettingsApiInterface {
    /**
     * 
     * @param {AlertSettingsRequest} [alertSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApiInterface
     */
    alertSettingsCreate(alertSettingsRequest?: AlertSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<AlertSettings>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApiInterface
     */
    alertSettingsList(options?: AxiosRequestConfig): AxiosPromise<AlertSettings>;

    /**
     * 
     * @param {number} id A unique integer value identifying this alert settings.
     * @param {PatchedAlertSettingsRequest} [patchedAlertSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApiInterface
     */
    alertSettingsPartialUpdate(id: number, patchedAlertSettingsRequest?: PatchedAlertSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<AlertSettings>;

    /**
     * 
     * @param {number} id A unique integer value identifying this alert settings.
     * @param {AlertSettingsRequest} [alertSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApiInterface
     */
    alertSettingsUpdate(id: number, alertSettingsRequest?: AlertSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<AlertSettings>;

}

/**
 * AlertSettingsApi - object-oriented interface
 * @export
 * @class AlertSettingsApi
 * @extends {BaseAPI}
 */
export class AlertSettingsApi extends BaseAPI implements AlertSettingsApiInterface {
    /**
     * 
     * @param {AlertSettingsRequest} [alertSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApi
     */
    public alertSettingsCreate(alertSettingsRequest?: AlertSettingsRequest, options?: AxiosRequestConfig) {
        return AlertSettingsApiFp(this.configuration).alertSettingsCreate(alertSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApi
     */
    public alertSettingsList(options?: AxiosRequestConfig) {
        return AlertSettingsApiFp(this.configuration).alertSettingsList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this alert settings.
     * @param {PatchedAlertSettingsRequest} [patchedAlertSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApi
     */
    public alertSettingsPartialUpdate(id: number, patchedAlertSettingsRequest?: PatchedAlertSettingsRequest, options?: AxiosRequestConfig) {
        return AlertSettingsApiFp(this.configuration).alertSettingsPartialUpdate(id, patchedAlertSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this alert settings.
     * @param {AlertSettingsRequest} [alertSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApi
     */
    public alertSettingsUpdate(id: number, alertSettingsRequest?: AlertSettingsRequest, options?: AxiosRequestConfig) {
        return AlertSettingsApiFp(this.configuration).alertSettingsUpdate(id, alertSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AlertsApi - axios parameter creator
 * @export
 */
export const AlertsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AlertRequest} [alertRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsCreate: async (alertRequest?: AlertRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/alerts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(alertRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/alerts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert message.
         * @param {PatchedAlertRequest} [patchedAlertRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsPartialUpdate: async (id: number, patchedAlertRequest?: PatchedAlertRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('alertsPartialUpdate', 'id', id)
            const localVarPath = `/api/alerts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedAlertRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsRecent: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/alerts/recent/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('alertsRetrieve', 'id', id)
            const localVarPath = `/api/alerts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PatchedAlertBulkRequestRequest} [patchedAlertBulkRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsSeen: async (patchedAlertBulkRequestRequest?: PatchedAlertBulkRequestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/alerts/seen/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedAlertBulkRequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsUnread: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/alerts/unread/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert message.
         * @param {AlertRequest} [alertRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsUpdate: async (id: number, alertRequest?: AlertRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('alertsUpdate', 'id', id)
            const localVarPath = `/api/alerts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(alertRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlertsApi - functional programming interface
 * @export
 */
export const AlertsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AlertsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AlertRequest} [alertRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertsCreate(alertRequest?: AlertRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Alert>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertsCreate(alertRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertsList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedAlertList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertsList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert message.
         * @param {PatchedAlertRequest} [patchedAlertRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertsPartialUpdate(id: number, patchedAlertRequest?: PatchedAlertRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Alert>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertsPartialUpdate(id, patchedAlertRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertsRecent(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertBulkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertsRecent(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Alert>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PatchedAlertBulkRequestRequest} [patchedAlertBulkRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertsSeen(patchedAlertBulkRequestRequest?: PatchedAlertBulkRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertBulkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertsSeen(patchedAlertBulkRequestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertsUnread(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertBulkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertsUnread(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert message.
         * @param {AlertRequest} [alertRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertsUpdate(id: number, alertRequest?: AlertRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Alert>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertsUpdate(id, alertRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AlertsApi - factory interface
 * @export
 */
export const AlertsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AlertsApiFp(configuration)
    return {
        /**
         * 
         * @param {AlertRequest} [alertRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsCreate(alertRequest?: AlertRequest, options?: any): AxiosPromise<Alert> {
            return localVarFp.alertsCreate(alertRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsList(page?: number, options?: any): AxiosPromise<PaginatedAlertList> {
            return localVarFp.alertsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert message.
         * @param {PatchedAlertRequest} [patchedAlertRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsPartialUpdate(id: number, patchedAlertRequest?: PatchedAlertRequest, options?: any): AxiosPromise<Alert> {
            return localVarFp.alertsPartialUpdate(id, patchedAlertRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsRecent(options?: any): AxiosPromise<AlertBulkResponse> {
            return localVarFp.alertsRecent(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsRetrieve(id: number, options?: any): AxiosPromise<Alert> {
            return localVarFp.alertsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PatchedAlertBulkRequestRequest} [patchedAlertBulkRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsSeen(patchedAlertBulkRequestRequest?: PatchedAlertBulkRequestRequest, options?: any): AxiosPromise<AlertBulkResponse> {
            return localVarFp.alertsSeen(patchedAlertBulkRequestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsUnread(options?: any): AxiosPromise<AlertBulkResponse> {
            return localVarFp.alertsUnread(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert message.
         * @param {AlertRequest} [alertRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsUpdate(id: number, alertRequest?: AlertRequest, options?: any): AxiosPromise<Alert> {
            return localVarFp.alertsUpdate(id, alertRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AlertsApi - interface
 * @export
 * @interface AlertsApi
 */
export interface AlertsApiInterface {
    /**
     * 
     * @param {AlertRequest} [alertRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    alertsCreate(alertRequest?: AlertRequest, options?: AxiosRequestConfig): AxiosPromise<Alert>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    alertsList(page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedAlertList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this alert message.
     * @param {PatchedAlertRequest} [patchedAlertRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    alertsPartialUpdate(id: number, patchedAlertRequest?: PatchedAlertRequest, options?: AxiosRequestConfig): AxiosPromise<Alert>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    alertsRecent(options?: AxiosRequestConfig): AxiosPromise<AlertBulkResponse>;

    /**
     * 
     * @param {number} id A unique integer value identifying this alert message.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    alertsRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<Alert>;

    /**
     * 
     * @param {PatchedAlertBulkRequestRequest} [patchedAlertBulkRequestRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    alertsSeen(patchedAlertBulkRequestRequest?: PatchedAlertBulkRequestRequest, options?: AxiosRequestConfig): AxiosPromise<AlertBulkResponse>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    alertsUnread(options?: AxiosRequestConfig): AxiosPromise<AlertBulkResponse>;

    /**
     * 
     * @param {number} id A unique integer value identifying this alert message.
     * @param {AlertRequest} [alertRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    alertsUpdate(id: number, alertRequest?: AlertRequest, options?: AxiosRequestConfig): AxiosPromise<Alert>;

}

/**
 * AlertsApi - object-oriented interface
 * @export
 * @class AlertsApi
 * @extends {BaseAPI}
 */
export class AlertsApi extends BaseAPI implements AlertsApiInterface {
    /**
     * 
     * @param {AlertRequest} [alertRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public alertsCreate(alertRequest?: AlertRequest, options?: AxiosRequestConfig) {
        return AlertsApiFp(this.configuration).alertsCreate(alertRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public alertsList(page?: number, options?: AxiosRequestConfig) {
        return AlertsApiFp(this.configuration).alertsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this alert message.
     * @param {PatchedAlertRequest} [patchedAlertRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public alertsPartialUpdate(id: number, patchedAlertRequest?: PatchedAlertRequest, options?: AxiosRequestConfig) {
        return AlertsApiFp(this.configuration).alertsPartialUpdate(id, patchedAlertRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public alertsRecent(options?: AxiosRequestConfig) {
        return AlertsApiFp(this.configuration).alertsRecent(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this alert message.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public alertsRetrieve(id: number, options?: AxiosRequestConfig) {
        return AlertsApiFp(this.configuration).alertsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PatchedAlertBulkRequestRequest} [patchedAlertBulkRequestRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public alertsSeen(patchedAlertBulkRequestRequest?: PatchedAlertBulkRequestRequest, options?: AxiosRequestConfig) {
        return AlertsApiFp(this.configuration).alertsSeen(patchedAlertBulkRequestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public alertsUnread(options?: AxiosRequestConfig) {
        return AlertsApiFp(this.configuration).alertsUnread(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this alert message.
     * @param {AlertRequest} [alertRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public alertsUpdate(id: number, alertRequest?: AlertRequest, options?: AxiosRequestConfig) {
        return AlertsApiFp(this.configuration).alertsUpdate(id, alertRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BillingApi - axios parameter creator
 * @export
 */
export const BillingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billingSummaryRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/billing/summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BillingApi - functional programming interface
 * @export
 */
export const BillingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BillingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async billingSummaryRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BillingSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.billingSummaryRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BillingApi - factory interface
 * @export
 */
export const BillingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BillingApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billingSummaryRetrieve(options?: any): AxiosPromise<BillingSummary> {
            return localVarFp.billingSummaryRetrieve(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BillingApi - interface
 * @export
 * @interface BillingApi
 */
export interface BillingApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    billingSummaryRetrieve(options?: AxiosRequestConfig): AxiosPromise<BillingSummary>;

}

/**
 * BillingApi - object-oriented interface
 * @export
 * @class BillingApi
 * @extends {BaseAPI}
 */
export class BillingApi extends BaseAPI implements BillingApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    public billingSummaryRetrieve(options?: AxiosRequestConfig) {
        return BillingApiFp(this.configuration).billingSummaryRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CommandsApi - axios parameter creator
 * @export
 */
export const CommandsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generic events viewset
         * @param {PolymorphicCommandCreateRequest} [polymorphicCommandCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsCreate: async (polymorphicCommandCreateRequest?: PolymorphicCommandCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/commands/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(polymorphicCommandCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generic events viewset
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/commands/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generic events viewset
         * @param {number} id A unique integer value identifying this event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commandsRetrieve', 'id', id)
            const localVarPath = `/api/commands/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommandsApi - functional programming interface
 * @export
 */
export const CommandsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommandsApiAxiosParamCreator(configuration)
    return {
        /**
         * Generic events viewset
         * @param {PolymorphicCommandCreateRequest} [polymorphicCommandCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commandsCreate(polymorphicCommandCreateRequest?: PolymorphicCommandCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolymorphicCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commandsCreate(polymorphicCommandCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generic events viewset
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commandsList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPolymorphicCommandList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commandsList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generic events viewset
         * @param {number} id A unique integer value identifying this event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commandsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolymorphicCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commandsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CommandsApi - factory interface
 * @export
 */
export const CommandsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommandsApiFp(configuration)
    return {
        /**
         * Generic events viewset
         * @param {PolymorphicCommandCreateRequest} [polymorphicCommandCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsCreate(polymorphicCommandCreateRequest?: PolymorphicCommandCreateRequest, options?: any): AxiosPromise<PolymorphicCommand> {
            return localVarFp.commandsCreate(polymorphicCommandCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Generic events viewset
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsList(page?: number, options?: any): AxiosPromise<PaginatedPolymorphicCommandList> {
            return localVarFp.commandsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Generic events viewset
         * @param {number} id A unique integer value identifying this event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsRetrieve(id: number, options?: any): AxiosPromise<PolymorphicCommand> {
            return localVarFp.commandsRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommandsApi - interface
 * @export
 * @interface CommandsApi
 */
export interface CommandsApiInterface {
    /**
     * Generic events viewset
     * @param {PolymorphicCommandCreateRequest} [polymorphicCommandCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandsApiInterface
     */
    commandsCreate(polymorphicCommandCreateRequest?: PolymorphicCommandCreateRequest, options?: AxiosRequestConfig): AxiosPromise<PolymorphicCommand>;

    /**
     * Generic events viewset
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandsApiInterface
     */
    commandsList(page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedPolymorphicCommandList>;

    /**
     * Generic events viewset
     * @param {number} id A unique integer value identifying this event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandsApiInterface
     */
    commandsRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<PolymorphicCommand>;

}

/**
 * CommandsApi - object-oriented interface
 * @export
 * @class CommandsApi
 * @extends {BaseAPI}
 */
export class CommandsApi extends BaseAPI implements CommandsApiInterface {
    /**
     * Generic events viewset
     * @param {PolymorphicCommandCreateRequest} [polymorphicCommandCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandsApi
     */
    public commandsCreate(polymorphicCommandCreateRequest?: PolymorphicCommandCreateRequest, options?: AxiosRequestConfig) {
        return CommandsApiFp(this.configuration).commandsCreate(polymorphicCommandCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generic events viewset
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandsApi
     */
    public commandsList(page?: number, options?: AxiosRequestConfig) {
        return CommandsApiFp(this.configuration).commandsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generic events viewset
     * @param {number} id A unique integer value identifying this event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandsApi
     */
    public commandsRetrieve(id: number, options?: AxiosRequestConfig) {
        return CommandsApiFp(this.configuration).commandsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DevicesApi - axios parameter creator
 * @export
 */
export const DevicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} piId 
         * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudiotDeviceUpdateOrCreate: async (piId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('cloudiotDeviceUpdateOrCreate', 'piId', piId)
            // verify required parameter 'cloudiotDeviceRequest' is not null or undefined
            assertParamExists('cloudiotDeviceUpdateOrCreate', 'cloudiotDeviceRequest', cloudiotDeviceRequest)
            const localVarPath = `/api/pis/{pi_id}/cloudiot/update-or-create/`
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cloudiotDeviceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} piId 
         * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisCloudiotCreate: async (piId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisCloudiotCreate', 'piId', piId)
            // verify required parameter 'cloudiotDeviceRequest' is not null or undefined
            assertParamExists('pisCloudiotCreate', 'cloudiotDeviceRequest', cloudiotDeviceRequest)
            const localVarPath = `/api/pis/{pi_id}/cloudiot/`
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cloudiotDeviceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} piId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisCloudiotList: async (piId: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisCloudiotList', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/cloudiot/`
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {number} piId 
         * @param {PatchedCloudiotDeviceRequest} [patchedCloudiotDeviceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisCloudiotPartialUpdate: async (id: string, piId: number, patchedCloudiotDeviceRequest?: PatchedCloudiotDeviceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pisCloudiotPartialUpdate', 'id', id)
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisCloudiotPartialUpdate', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/cloudiot/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedCloudiotDeviceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} piId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisCloudiotRetrieve: async (id: number, piId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pisCloudiotRetrieve', 'id', id)
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisCloudiotRetrieve', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/cloudiot/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {number} piId 
         * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisCloudiotUpdate: async (id: string, piId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pisCloudiotUpdate', 'id', id)
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisCloudiotUpdate', 'piId', piId)
            // verify required parameter 'cloudiotDeviceRequest' is not null or undefined
            assertParamExists('pisCloudiotUpdate', 'cloudiotDeviceRequest', cloudiotDeviceRequest)
            const localVarPath = `/api/pis/{pi_id}/cloudiot/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cloudiotDeviceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} piId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisConfigDownloadRetrieve: async (piId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisConfigDownloadRetrieve', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/config/download/`
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {PiRequest} [piRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisCreate: async (piRequest?: PiRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pis/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(piRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} id A unique integer value identifying this pi.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pisDestroy', 'id', id)
            const localVarPath = `/api/pis/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pis/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} id A unique integer value identifying this pi.
         * @param {PatchedPiRequest} [patchedPiRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisPartialUpdate: async (id: number, patchedPiRequest?: PatchedPiRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pisPartialUpdate', 'id', id)
            const localVarPath = `/api/pis/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedPiRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} piId 
         * @param {PublicKeyRequest} publicKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisPublicKeysCreate: async (piId: number, publicKeyRequest: PublicKeyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisPublicKeysCreate', 'piId', piId)
            // verify required parameter 'publicKeyRequest' is not null or undefined
            assertParamExists('pisPublicKeysCreate', 'publicKeyRequest', publicKeyRequest)
            const localVarPath = `/api/pis/{pi_id}/public-keys/`
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(publicKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} piId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisPublicKeysList: async (piId: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisPublicKeysList', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/public-keys/`
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this public key.
         * @param {number} piId 
         * @param {PatchedPublicKeyRequest} [patchedPublicKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisPublicKeysPartialUpdate: async (id: number, piId: number, patchedPublicKeyRequest?: PatchedPublicKeyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pisPublicKeysPartialUpdate', 'id', id)
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisPublicKeysPartialUpdate', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/public-keys/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedPublicKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this public key.
         * @param {number} piId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisPublicKeysRetrieve: async (id: number, piId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pisPublicKeysRetrieve', 'id', id)
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisPublicKeysRetrieve', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/public-keys/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this public key.
         * @param {number} piId 
         * @param {PublicKeyRequest} publicKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisPublicKeysUpdate: async (id: number, piId: number, publicKeyRequest: PublicKeyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pisPublicKeysUpdate', 'id', id)
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisPublicKeysUpdate', 'piId', piId)
            // verify required parameter 'publicKeyRequest' is not null or undefined
            assertParamExists('pisPublicKeysUpdate', 'publicKeyRequest', publicKeyRequest)
            const localVarPath = `/api/pis/{pi_id}/public-keys/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(publicKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} id A unique integer value identifying this pi.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pisRetrieve', 'id', id)
            const localVarPath = `/api/pis/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} piId 
         * @param {PiSettingsRequest} piSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisSettingsCreate: async (piId: number, piSettingsRequest: PiSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisSettingsCreate', 'piId', piId)
            // verify required parameter 'piSettingsRequest' is not null or undefined
            assertParamExists('pisSettingsCreate', 'piSettingsRequest', piSettingsRequest)
            const localVarPath = `/api/pis/{pi_id}/settings/`
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(piSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} piId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisSettingsList: async (piId: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisSettingsList', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/settings/`
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this pi settings.
         * @param {number} piId 
         * @param {PatchedPiSettingsRequest} [patchedPiSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisSettingsPartialUpdate: async (id: number, piId: number, patchedPiSettingsRequest?: PatchedPiSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pisSettingsPartialUpdate', 'id', id)
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisSettingsPartialUpdate', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedPiSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this pi settings.
         * @param {number} piId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisSettingsRetrieve: async (id: number, piId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pisSettingsRetrieve', 'id', id)
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisSettingsRetrieve', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this pi settings.
         * @param {number} piId 
         * @param {PiSettingsRequest} piSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisSettingsUpdate: async (id: number, piId: number, piSettingsRequest: PiSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pisSettingsUpdate', 'id', id)
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisSettingsUpdate', 'piId', piId)
            // verify required parameter 'piSettingsRequest' is not null or undefined
            assertParamExists('pisSettingsUpdate', 'piSettingsRequest', piSettingsRequest)
            const localVarPath = `/api/pis/{pi_id}/settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(piSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} piId 
         * @param {SystemInfoRequest} systemInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisSystemInfoCreate: async (piId: number, systemInfoRequest: SystemInfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisSystemInfoCreate', 'piId', piId)
            // verify required parameter 'systemInfoRequest' is not null or undefined
            assertParamExists('pisSystemInfoCreate', 'systemInfoRequest', systemInfoRequest)
            const localVarPath = `/api/pis/{pi_id}/system-info/`
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(systemInfoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} piId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisSystemInfoList: async (piId: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisSystemInfoList', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/system-info/`
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system info.
         * @param {number} piId 
         * @param {PatchedSystemInfoRequest} [patchedSystemInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisSystemInfoPartialUpdate: async (id: number, piId: number, patchedSystemInfoRequest?: PatchedSystemInfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pisSystemInfoPartialUpdate', 'id', id)
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisSystemInfoPartialUpdate', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/system-info/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedSystemInfoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system info.
         * @param {number} piId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisSystemInfoRetrieve: async (id: number, piId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pisSystemInfoRetrieve', 'id', id)
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisSystemInfoRetrieve', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/system-info/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system info.
         * @param {number} piId 
         * @param {SystemInfoRequest} systemInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisSystemInfoUpdate: async (id: number, piId: number, systemInfoRequest: SystemInfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pisSystemInfoUpdate', 'id', id)
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisSystemInfoUpdate', 'piId', piId)
            // verify required parameter 'systemInfoRequest' is not null or undefined
            assertParamExists('pisSystemInfoUpdate', 'systemInfoRequest', systemInfoRequest)
            const localVarPath = `/api/pis/{pi_id}/system-info/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(systemInfoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} id A unique integer value identifying this pi.
         * @param {PiRequest} [piRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisUpdate: async (id: number, piRequest?: PiRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pisUpdate', 'id', id)
            const localVarPath = `/api/pis/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(piRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} piId 
         * @param {WebrtcStreamRequest} [webrtcStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisWebrtcStreamsCreate: async (piId: number, webrtcStreamRequest?: WebrtcStreamRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisWebrtcStreamsCreate', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/webrtc-streams/`
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webrtcStreamRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} piId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisWebrtcStreamsList: async (piId: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisWebrtcStreamsList', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/webrtc-streams/`
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this webrtc stream.
         * @param {number} piId 
         * @param {PatchedWebrtcStreamRequest} [patchedWebrtcStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisWebrtcStreamsPartialUpdate: async (id: number, piId: number, patchedWebrtcStreamRequest?: PatchedWebrtcStreamRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pisWebrtcStreamsPartialUpdate', 'id', id)
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisWebrtcStreamsPartialUpdate', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/webrtc-streams/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedWebrtcStreamRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this webrtc stream.
         * @param {number} piId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisWebrtcStreamsRetrieve: async (id: number, piId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pisWebrtcStreamsRetrieve', 'id', id)
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisWebrtcStreamsRetrieve', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/webrtc-streams/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this webrtc stream.
         * @param {number} piId 
         * @param {WebrtcStreamRequest} [webrtcStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisWebrtcStreamsUpdate: async (id: number, piId: number, webrtcStreamRequest?: WebrtcStreamRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pisWebrtcStreamsUpdate', 'id', id)
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisWebrtcStreamsUpdate', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/webrtc-streams/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webrtcStreamRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} piId 
         * @param {PublicKeyRequest} publicKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicKeyUpdateOrCreate: async (piId: number, publicKeyRequest: PublicKeyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('publicKeyUpdateOrCreate', 'piId', piId)
            // verify required parameter 'publicKeyRequest' is not null or undefined
            assertParamExists('publicKeyUpdateOrCreate', 'publicKeyRequest', publicKeyRequest)
            const localVarPath = `/api/pis/{pi_id}/public-keys/update-or-create/`
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(publicKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} piId 
         * @param {SystemInfoRequest} systemInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemInfoUpdateOrCreate: async (piId: number, systemInfoRequest: SystemInfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('systemInfoUpdateOrCreate', 'piId', piId)
            // verify required parameter 'systemInfoRequest' is not null or undefined
            assertParamExists('systemInfoUpdateOrCreate', 'systemInfoRequest', systemInfoRequest)
            const localVarPath = `/api/pis/{pi_id}/system-info/update-or-create/`
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(systemInfoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DevicesApi - functional programming interface
 * @export
 */
export const DevicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DevicesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} piId 
         * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudiotDeviceUpdateOrCreate(piId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudiotDevice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudiotDeviceUpdateOrCreate(piId, cloudiotDeviceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} piId 
         * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisCloudiotCreate(piId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudiotDevice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisCloudiotCreate(piId, cloudiotDeviceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} piId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisCloudiotList(piId: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCloudiotDeviceList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisCloudiotList(piId, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {number} piId 
         * @param {PatchedCloudiotDeviceRequest} [patchedCloudiotDeviceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisCloudiotPartialUpdate(id: string, piId: number, patchedCloudiotDeviceRequest?: PatchedCloudiotDeviceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudiotDevice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisCloudiotPartialUpdate(id, piId, patchedCloudiotDeviceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} piId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisCloudiotRetrieve(id: number, piId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudiotDevice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisCloudiotRetrieve(id, piId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {number} piId 
         * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisCloudiotUpdate(id: string, piId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudiotDevice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisCloudiotUpdate(id, piId, cloudiotDeviceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} piId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisConfigDownloadRetrieve(piId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Config>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisConfigDownloadRetrieve(piId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {PiRequest} [piRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisCreate(piRequest?: PiRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pi>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisCreate(piRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} id A unique integer value identifying this pi.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPiList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} id A unique integer value identifying this pi.
         * @param {PatchedPiRequest} [patchedPiRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisPartialUpdate(id: number, patchedPiRequest?: PatchedPiRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pi>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisPartialUpdate(id, patchedPiRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} piId 
         * @param {PublicKeyRequest} publicKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisPublicKeysCreate(piId: number, publicKeyRequest: PublicKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicKey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisPublicKeysCreate(piId, publicKeyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} piId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisPublicKeysList(piId: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPublicKeyList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisPublicKeysList(piId, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this public key.
         * @param {number} piId 
         * @param {PatchedPublicKeyRequest} [patchedPublicKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisPublicKeysPartialUpdate(id: number, piId: number, patchedPublicKeyRequest?: PatchedPublicKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicKey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisPublicKeysPartialUpdate(id, piId, patchedPublicKeyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this public key.
         * @param {number} piId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisPublicKeysRetrieve(id: number, piId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicKey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisPublicKeysRetrieve(id, piId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this public key.
         * @param {number} piId 
         * @param {PublicKeyRequest} publicKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisPublicKeysUpdate(id: number, piId: number, publicKeyRequest: PublicKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicKey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisPublicKeysUpdate(id, piId, publicKeyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} id A unique integer value identifying this pi.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pi>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} piId 
         * @param {PiSettingsRequest} piSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisSettingsCreate(piId: number, piSettingsRequest: PiSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PiSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisSettingsCreate(piId, piSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} piId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisSettingsList(piId: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPiSettingsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisSettingsList(piId, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this pi settings.
         * @param {number} piId 
         * @param {PatchedPiSettingsRequest} [patchedPiSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisSettingsPartialUpdate(id: number, piId: number, patchedPiSettingsRequest?: PatchedPiSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PiSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisSettingsPartialUpdate(id, piId, patchedPiSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this pi settings.
         * @param {number} piId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisSettingsRetrieve(id: number, piId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PiSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisSettingsRetrieve(id, piId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this pi settings.
         * @param {number} piId 
         * @param {PiSettingsRequest} piSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisSettingsUpdate(id: number, piId: number, piSettingsRequest: PiSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PiSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisSettingsUpdate(id, piId, piSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} piId 
         * @param {SystemInfoRequest} systemInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisSystemInfoCreate(piId: number, systemInfoRequest: SystemInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisSystemInfoCreate(piId, systemInfoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} piId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisSystemInfoList(piId: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedSystemInfoList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisSystemInfoList(piId, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system info.
         * @param {number} piId 
         * @param {PatchedSystemInfoRequest} [patchedSystemInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisSystemInfoPartialUpdate(id: number, piId: number, patchedSystemInfoRequest?: PatchedSystemInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisSystemInfoPartialUpdate(id, piId, patchedSystemInfoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system info.
         * @param {number} piId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisSystemInfoRetrieve(id: number, piId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisSystemInfoRetrieve(id, piId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system info.
         * @param {number} piId 
         * @param {SystemInfoRequest} systemInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisSystemInfoUpdate(id: number, piId: number, systemInfoRequest: SystemInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisSystemInfoUpdate(id, piId, systemInfoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} id A unique integer value identifying this pi.
         * @param {PiRequest} [piRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisUpdate(id: number, piRequest?: PiRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pi>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisUpdate(id, piRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} piId 
         * @param {WebrtcStreamRequest} [webrtcStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisWebrtcStreamsCreate(piId: number, webrtcStreamRequest?: WebrtcStreamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebrtcStream>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisWebrtcStreamsCreate(piId, webrtcStreamRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} piId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisWebrtcStreamsList(piId: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedWebrtcStreamList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisWebrtcStreamsList(piId, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this webrtc stream.
         * @param {number} piId 
         * @param {PatchedWebrtcStreamRequest} [patchedWebrtcStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisWebrtcStreamsPartialUpdate(id: number, piId: number, patchedWebrtcStreamRequest?: PatchedWebrtcStreamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebrtcStream>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisWebrtcStreamsPartialUpdate(id, piId, patchedWebrtcStreamRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this webrtc stream.
         * @param {number} piId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisWebrtcStreamsRetrieve(id: number, piId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebrtcStream>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisWebrtcStreamsRetrieve(id, piId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this webrtc stream.
         * @param {number} piId 
         * @param {WebrtcStreamRequest} [webrtcStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisWebrtcStreamsUpdate(id: number, piId: number, webrtcStreamRequest?: WebrtcStreamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebrtcStream>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisWebrtcStreamsUpdate(id, piId, webrtcStreamRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} piId 
         * @param {PublicKeyRequest} publicKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicKeyUpdateOrCreate(piId: number, publicKeyRequest: PublicKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicKey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publicKeyUpdateOrCreate(piId, publicKeyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} piId 
         * @param {SystemInfoRequest} systemInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemInfoUpdateOrCreate(piId: number, systemInfoRequest: SystemInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemInfoUpdateOrCreate(piId, systemInfoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DevicesApi - factory interface
 * @export
 */
export const DevicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DevicesApiFp(configuration)
    return {
        /**
         * 
         * @param {number} piId 
         * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudiotDeviceUpdateOrCreate(piId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: any): AxiosPromise<CloudiotDevice> {
            return localVarFp.cloudiotDeviceUpdateOrCreate(piId, cloudiotDeviceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} piId 
         * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisCloudiotCreate(piId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: any): AxiosPromise<CloudiotDevice> {
            return localVarFp.pisCloudiotCreate(piId, cloudiotDeviceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} piId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisCloudiotList(piId: number, page?: number, options?: any): AxiosPromise<PaginatedCloudiotDeviceList> {
            return localVarFp.pisCloudiotList(piId, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {number} piId 
         * @param {PatchedCloudiotDeviceRequest} [patchedCloudiotDeviceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisCloudiotPartialUpdate(id: string, piId: number, patchedCloudiotDeviceRequest?: PatchedCloudiotDeviceRequest, options?: any): AxiosPromise<CloudiotDevice> {
            return localVarFp.pisCloudiotPartialUpdate(id, piId, patchedCloudiotDeviceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {number} piId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisCloudiotRetrieve(id: number, piId: number, options?: any): AxiosPromise<CloudiotDevice> {
            return localVarFp.pisCloudiotRetrieve(id, piId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {number} piId 
         * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisCloudiotUpdate(id: string, piId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: any): AxiosPromise<CloudiotDevice> {
            return localVarFp.pisCloudiotUpdate(id, piId, cloudiotDeviceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} piId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisConfigDownloadRetrieve(piId: number, options?: any): AxiosPromise<Config> {
            return localVarFp.pisConfigDownloadRetrieve(piId, options).then((request) => request(axios, basePath));
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {PiRequest} [piRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisCreate(piRequest?: PiRequest, options?: any): AxiosPromise<Pi> {
            return localVarFp.pisCreate(piRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} id A unique integer value identifying this pi.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.pisDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisList(page?: number, options?: any): AxiosPromise<PaginatedPiList> {
            return localVarFp.pisList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} id A unique integer value identifying this pi.
         * @param {PatchedPiRequest} [patchedPiRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisPartialUpdate(id: number, patchedPiRequest?: PatchedPiRequest, options?: any): AxiosPromise<Pi> {
            return localVarFp.pisPartialUpdate(id, patchedPiRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} piId 
         * @param {PublicKeyRequest} publicKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisPublicKeysCreate(piId: number, publicKeyRequest: PublicKeyRequest, options?: any): AxiosPromise<PublicKey> {
            return localVarFp.pisPublicKeysCreate(piId, publicKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} piId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisPublicKeysList(piId: number, page?: number, options?: any): AxiosPromise<PaginatedPublicKeyList> {
            return localVarFp.pisPublicKeysList(piId, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this public key.
         * @param {number} piId 
         * @param {PatchedPublicKeyRequest} [patchedPublicKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisPublicKeysPartialUpdate(id: number, piId: number, patchedPublicKeyRequest?: PatchedPublicKeyRequest, options?: any): AxiosPromise<PublicKey> {
            return localVarFp.pisPublicKeysPartialUpdate(id, piId, patchedPublicKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this public key.
         * @param {number} piId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisPublicKeysRetrieve(id: number, piId: number, options?: any): AxiosPromise<PublicKey> {
            return localVarFp.pisPublicKeysRetrieve(id, piId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this public key.
         * @param {number} piId 
         * @param {PublicKeyRequest} publicKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisPublicKeysUpdate(id: number, piId: number, publicKeyRequest: PublicKeyRequest, options?: any): AxiosPromise<PublicKey> {
            return localVarFp.pisPublicKeysUpdate(id, piId, publicKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} id A unique integer value identifying this pi.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisRetrieve(id: number, options?: any): AxiosPromise<Pi> {
            return localVarFp.pisRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} piId 
         * @param {PiSettingsRequest} piSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisSettingsCreate(piId: number, piSettingsRequest: PiSettingsRequest, options?: any): AxiosPromise<PiSettings> {
            return localVarFp.pisSettingsCreate(piId, piSettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} piId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisSettingsList(piId: number, page?: number, options?: any): AxiosPromise<PaginatedPiSettingsList> {
            return localVarFp.pisSettingsList(piId, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this pi settings.
         * @param {number} piId 
         * @param {PatchedPiSettingsRequest} [patchedPiSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisSettingsPartialUpdate(id: number, piId: number, patchedPiSettingsRequest?: PatchedPiSettingsRequest, options?: any): AxiosPromise<PiSettings> {
            return localVarFp.pisSettingsPartialUpdate(id, piId, patchedPiSettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this pi settings.
         * @param {number} piId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisSettingsRetrieve(id: number, piId: number, options?: any): AxiosPromise<PiSettings> {
            return localVarFp.pisSettingsRetrieve(id, piId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this pi settings.
         * @param {number} piId 
         * @param {PiSettingsRequest} piSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisSettingsUpdate(id: number, piId: number, piSettingsRequest: PiSettingsRequest, options?: any): AxiosPromise<PiSettings> {
            return localVarFp.pisSettingsUpdate(id, piId, piSettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} piId 
         * @param {SystemInfoRequest} systemInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisSystemInfoCreate(piId: number, systemInfoRequest: SystemInfoRequest, options?: any): AxiosPromise<SystemInfo> {
            return localVarFp.pisSystemInfoCreate(piId, systemInfoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} piId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisSystemInfoList(piId: number, page?: number, options?: any): AxiosPromise<PaginatedSystemInfoList> {
            return localVarFp.pisSystemInfoList(piId, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system info.
         * @param {number} piId 
         * @param {PatchedSystemInfoRequest} [patchedSystemInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisSystemInfoPartialUpdate(id: number, piId: number, patchedSystemInfoRequest?: PatchedSystemInfoRequest, options?: any): AxiosPromise<SystemInfo> {
            return localVarFp.pisSystemInfoPartialUpdate(id, piId, patchedSystemInfoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system info.
         * @param {number} piId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisSystemInfoRetrieve(id: number, piId: number, options?: any): AxiosPromise<SystemInfo> {
            return localVarFp.pisSystemInfoRetrieve(id, piId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system info.
         * @param {number} piId 
         * @param {SystemInfoRequest} systemInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisSystemInfoUpdate(id: number, piId: number, systemInfoRequest: SystemInfoRequest, options?: any): AxiosPromise<SystemInfo> {
            return localVarFp.pisSystemInfoUpdate(id, piId, systemInfoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} id A unique integer value identifying this pi.
         * @param {PiRequest} [piRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisUpdate(id: number, piRequest?: PiRequest, options?: any): AxiosPromise<Pi> {
            return localVarFp.pisUpdate(id, piRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} piId 
         * @param {WebrtcStreamRequest} [webrtcStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisWebrtcStreamsCreate(piId: number, webrtcStreamRequest?: WebrtcStreamRequest, options?: any): AxiosPromise<WebrtcStream> {
            return localVarFp.pisWebrtcStreamsCreate(piId, webrtcStreamRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} piId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisWebrtcStreamsList(piId: number, page?: number, options?: any): AxiosPromise<PaginatedWebrtcStreamList> {
            return localVarFp.pisWebrtcStreamsList(piId, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this webrtc stream.
         * @param {number} piId 
         * @param {PatchedWebrtcStreamRequest} [patchedWebrtcStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisWebrtcStreamsPartialUpdate(id: number, piId: number, patchedWebrtcStreamRequest?: PatchedWebrtcStreamRequest, options?: any): AxiosPromise<WebrtcStream> {
            return localVarFp.pisWebrtcStreamsPartialUpdate(id, piId, patchedWebrtcStreamRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this webrtc stream.
         * @param {number} piId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisWebrtcStreamsRetrieve(id: number, piId: number, options?: any): AxiosPromise<WebrtcStream> {
            return localVarFp.pisWebrtcStreamsRetrieve(id, piId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this webrtc stream.
         * @param {number} piId 
         * @param {WebrtcStreamRequest} [webrtcStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisWebrtcStreamsUpdate(id: number, piId: number, webrtcStreamRequest?: WebrtcStreamRequest, options?: any): AxiosPromise<WebrtcStream> {
            return localVarFp.pisWebrtcStreamsUpdate(id, piId, webrtcStreamRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} piId 
         * @param {PublicKeyRequest} publicKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicKeyUpdateOrCreate(piId: number, publicKeyRequest: PublicKeyRequest, options?: any): AxiosPromise<PublicKey> {
            return localVarFp.publicKeyUpdateOrCreate(piId, publicKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} piId 
         * @param {SystemInfoRequest} systemInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemInfoUpdateOrCreate(piId: number, systemInfoRequest: SystemInfoRequest, options?: any): AxiosPromise<SystemInfo> {
            return localVarFp.systemInfoUpdateOrCreate(piId, systemInfoRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DevicesApi - interface
 * @export
 * @interface DevicesApi
 */
export interface DevicesApiInterface {
    /**
     * 
     * @param {number} piId 
     * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    cloudiotDeviceUpdateOrCreate(piId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: AxiosRequestConfig): AxiosPromise<CloudiotDevice>;

    /**
     * 
     * @param {number} piId 
     * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisCloudiotCreate(piId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: AxiosRequestConfig): AxiosPromise<CloudiotDevice>;

    /**
     * 
     * @param {number} piId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisCloudiotList(piId: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedCloudiotDeviceList>;

    /**
     * 
     * @param {string} id 
     * @param {number} piId 
     * @param {PatchedCloudiotDeviceRequest} [patchedCloudiotDeviceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisCloudiotPartialUpdate(id: string, piId: number, patchedCloudiotDeviceRequest?: PatchedCloudiotDeviceRequest, options?: AxiosRequestConfig): AxiosPromise<CloudiotDevice>;

    /**
     * 
     * @param {number} id 
     * @param {number} piId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisCloudiotRetrieve(id: number, piId: number, options?: AxiosRequestConfig): AxiosPromise<CloudiotDevice>;

    /**
     * 
     * @param {string} id 
     * @param {number} piId 
     * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisCloudiotUpdate(id: string, piId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: AxiosRequestConfig): AxiosPromise<CloudiotDevice>;

    /**
     * 
     * @param {number} piId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisConfigDownloadRetrieve(piId: number, options?: AxiosRequestConfig): AxiosPromise<Config>;

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {PiRequest} [piRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisCreate(piRequest?: PiRequest, options?: AxiosRequestConfig): AxiosPromise<Pi>;

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {number} id A unique integer value identifying this pi.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisDestroy(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisList(page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedPiList>;

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {number} id A unique integer value identifying this pi.
     * @param {PatchedPiRequest} [patchedPiRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisPartialUpdate(id: number, patchedPiRequest?: PatchedPiRequest, options?: AxiosRequestConfig): AxiosPromise<Pi>;

    /**
     * 
     * @param {number} piId 
     * @param {PublicKeyRequest} publicKeyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisPublicKeysCreate(piId: number, publicKeyRequest: PublicKeyRequest, options?: AxiosRequestConfig): AxiosPromise<PublicKey>;

    /**
     * 
     * @param {number} piId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisPublicKeysList(piId: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedPublicKeyList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this public key.
     * @param {number} piId 
     * @param {PatchedPublicKeyRequest} [patchedPublicKeyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisPublicKeysPartialUpdate(id: number, piId: number, patchedPublicKeyRequest?: PatchedPublicKeyRequest, options?: AxiosRequestConfig): AxiosPromise<PublicKey>;

    /**
     * 
     * @param {number} id A unique integer value identifying this public key.
     * @param {number} piId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisPublicKeysRetrieve(id: number, piId: number, options?: AxiosRequestConfig): AxiosPromise<PublicKey>;

    /**
     * 
     * @param {number} id A unique integer value identifying this public key.
     * @param {number} piId 
     * @param {PublicKeyRequest} publicKeyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisPublicKeysUpdate(id: number, piId: number, publicKeyRequest: PublicKeyRequest, options?: AxiosRequestConfig): AxiosPromise<PublicKey>;

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {number} id A unique integer value identifying this pi.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<Pi>;

    /**
     * 
     * @param {number} piId 
     * @param {PiSettingsRequest} piSettingsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisSettingsCreate(piId: number, piSettingsRequest: PiSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<PiSettings>;

    /**
     * 
     * @param {number} piId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisSettingsList(piId: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedPiSettingsList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this pi settings.
     * @param {number} piId 
     * @param {PatchedPiSettingsRequest} [patchedPiSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisSettingsPartialUpdate(id: number, piId: number, patchedPiSettingsRequest?: PatchedPiSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<PiSettings>;

    /**
     * 
     * @param {number} id A unique integer value identifying this pi settings.
     * @param {number} piId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisSettingsRetrieve(id: number, piId: number, options?: AxiosRequestConfig): AxiosPromise<PiSettings>;

    /**
     * 
     * @param {number} id A unique integer value identifying this pi settings.
     * @param {number} piId 
     * @param {PiSettingsRequest} piSettingsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisSettingsUpdate(id: number, piId: number, piSettingsRequest: PiSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<PiSettings>;

    /**
     * 
     * @param {number} piId 
     * @param {SystemInfoRequest} systemInfoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisSystemInfoCreate(piId: number, systemInfoRequest: SystemInfoRequest, options?: AxiosRequestConfig): AxiosPromise<SystemInfo>;

    /**
     * 
     * @param {number} piId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisSystemInfoList(piId: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedSystemInfoList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this system info.
     * @param {number} piId 
     * @param {PatchedSystemInfoRequest} [patchedSystemInfoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisSystemInfoPartialUpdate(id: number, piId: number, patchedSystemInfoRequest?: PatchedSystemInfoRequest, options?: AxiosRequestConfig): AxiosPromise<SystemInfo>;

    /**
     * 
     * @param {number} id A unique integer value identifying this system info.
     * @param {number} piId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisSystemInfoRetrieve(id: number, piId: number, options?: AxiosRequestConfig): AxiosPromise<SystemInfo>;

    /**
     * 
     * @param {number} id A unique integer value identifying this system info.
     * @param {number} piId 
     * @param {SystemInfoRequest} systemInfoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisSystemInfoUpdate(id: number, piId: number, systemInfoRequest: SystemInfoRequest, options?: AxiosRequestConfig): AxiosPromise<SystemInfo>;

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {number} id A unique integer value identifying this pi.
     * @param {PiRequest} [piRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisUpdate(id: number, piRequest?: PiRequest, options?: AxiosRequestConfig): AxiosPromise<Pi>;

    /**
     * 
     * @param {number} piId 
     * @param {WebrtcStreamRequest} [webrtcStreamRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisWebrtcStreamsCreate(piId: number, webrtcStreamRequest?: WebrtcStreamRequest, options?: AxiosRequestConfig): AxiosPromise<WebrtcStream>;

    /**
     * 
     * @param {number} piId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisWebrtcStreamsList(piId: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedWebrtcStreamList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this webrtc stream.
     * @param {number} piId 
     * @param {PatchedWebrtcStreamRequest} [patchedWebrtcStreamRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisWebrtcStreamsPartialUpdate(id: number, piId: number, patchedWebrtcStreamRequest?: PatchedWebrtcStreamRequest, options?: AxiosRequestConfig): AxiosPromise<WebrtcStream>;

    /**
     * 
     * @param {number} id A unique integer value identifying this webrtc stream.
     * @param {number} piId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisWebrtcStreamsRetrieve(id: number, piId: number, options?: AxiosRequestConfig): AxiosPromise<WebrtcStream>;

    /**
     * 
     * @param {number} id A unique integer value identifying this webrtc stream.
     * @param {number} piId 
     * @param {WebrtcStreamRequest} [webrtcStreamRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    pisWebrtcStreamsUpdate(id: number, piId: number, webrtcStreamRequest?: WebrtcStreamRequest, options?: AxiosRequestConfig): AxiosPromise<WebrtcStream>;

    /**
     * 
     * @param {number} piId 
     * @param {PublicKeyRequest} publicKeyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    publicKeyUpdateOrCreate(piId: number, publicKeyRequest: PublicKeyRequest, options?: AxiosRequestConfig): AxiosPromise<PublicKey>;

    /**
     * 
     * @param {number} piId 
     * @param {SystemInfoRequest} systemInfoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    systemInfoUpdateOrCreate(piId: number, systemInfoRequest: SystemInfoRequest, options?: AxiosRequestConfig): AxiosPromise<SystemInfo>;

}

/**
 * DevicesApi - object-oriented interface
 * @export
 * @class DevicesApi
 * @extends {BaseAPI}
 */
export class DevicesApi extends BaseAPI implements DevicesApiInterface {
    /**
     * 
     * @param {number} piId 
     * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public cloudiotDeviceUpdateOrCreate(piId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).cloudiotDeviceUpdateOrCreate(piId, cloudiotDeviceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} piId 
     * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisCloudiotCreate(piId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisCloudiotCreate(piId, cloudiotDeviceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} piId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisCloudiotList(piId: number, page?: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisCloudiotList(piId, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {number} piId 
     * @param {PatchedCloudiotDeviceRequest} [patchedCloudiotDeviceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisCloudiotPartialUpdate(id: string, piId: number, patchedCloudiotDeviceRequest?: PatchedCloudiotDeviceRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisCloudiotPartialUpdate(id, piId, patchedCloudiotDeviceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {number} piId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisCloudiotRetrieve(id: number, piId: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisCloudiotRetrieve(id, piId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {number} piId 
     * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisCloudiotUpdate(id: string, piId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisCloudiotUpdate(id, piId, cloudiotDeviceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} piId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisConfigDownloadRetrieve(piId: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisConfigDownloadRetrieve(piId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {PiRequest} [piRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisCreate(piRequest?: PiRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisCreate(piRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {number} id A unique integer value identifying this pi.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisDestroy(id: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisList(page?: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {number} id A unique integer value identifying this pi.
     * @param {PatchedPiRequest} [patchedPiRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisPartialUpdate(id: number, patchedPiRequest?: PatchedPiRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisPartialUpdate(id, patchedPiRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} piId 
     * @param {PublicKeyRequest} publicKeyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisPublicKeysCreate(piId: number, publicKeyRequest: PublicKeyRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisPublicKeysCreate(piId, publicKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} piId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisPublicKeysList(piId: number, page?: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisPublicKeysList(piId, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this public key.
     * @param {number} piId 
     * @param {PatchedPublicKeyRequest} [patchedPublicKeyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisPublicKeysPartialUpdate(id: number, piId: number, patchedPublicKeyRequest?: PatchedPublicKeyRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisPublicKeysPartialUpdate(id, piId, patchedPublicKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this public key.
     * @param {number} piId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisPublicKeysRetrieve(id: number, piId: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisPublicKeysRetrieve(id, piId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this public key.
     * @param {number} piId 
     * @param {PublicKeyRequest} publicKeyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisPublicKeysUpdate(id: number, piId: number, publicKeyRequest: PublicKeyRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisPublicKeysUpdate(id, piId, publicKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {number} id A unique integer value identifying this pi.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisRetrieve(id: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} piId 
     * @param {PiSettingsRequest} piSettingsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisSettingsCreate(piId: number, piSettingsRequest: PiSettingsRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisSettingsCreate(piId, piSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} piId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisSettingsList(piId: number, page?: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisSettingsList(piId, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this pi settings.
     * @param {number} piId 
     * @param {PatchedPiSettingsRequest} [patchedPiSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisSettingsPartialUpdate(id: number, piId: number, patchedPiSettingsRequest?: PatchedPiSettingsRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisSettingsPartialUpdate(id, piId, patchedPiSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this pi settings.
     * @param {number} piId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisSettingsRetrieve(id: number, piId: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisSettingsRetrieve(id, piId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this pi settings.
     * @param {number} piId 
     * @param {PiSettingsRequest} piSettingsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisSettingsUpdate(id: number, piId: number, piSettingsRequest: PiSettingsRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisSettingsUpdate(id, piId, piSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} piId 
     * @param {SystemInfoRequest} systemInfoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisSystemInfoCreate(piId: number, systemInfoRequest: SystemInfoRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisSystemInfoCreate(piId, systemInfoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} piId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisSystemInfoList(piId: number, page?: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisSystemInfoList(piId, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this system info.
     * @param {number} piId 
     * @param {PatchedSystemInfoRequest} [patchedSystemInfoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisSystemInfoPartialUpdate(id: number, piId: number, patchedSystemInfoRequest?: PatchedSystemInfoRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisSystemInfoPartialUpdate(id, piId, patchedSystemInfoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this system info.
     * @param {number} piId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisSystemInfoRetrieve(id: number, piId: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisSystemInfoRetrieve(id, piId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this system info.
     * @param {number} piId 
     * @param {SystemInfoRequest} systemInfoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisSystemInfoUpdate(id: number, piId: number, systemInfoRequest: SystemInfoRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisSystemInfoUpdate(id, piId, systemInfoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {number} id A unique integer value identifying this pi.
     * @param {PiRequest} [piRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisUpdate(id: number, piRequest?: PiRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisUpdate(id, piRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} piId 
     * @param {WebrtcStreamRequest} [webrtcStreamRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisWebrtcStreamsCreate(piId: number, webrtcStreamRequest?: WebrtcStreamRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisWebrtcStreamsCreate(piId, webrtcStreamRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} piId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisWebrtcStreamsList(piId: number, page?: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisWebrtcStreamsList(piId, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this webrtc stream.
     * @param {number} piId 
     * @param {PatchedWebrtcStreamRequest} [patchedWebrtcStreamRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisWebrtcStreamsPartialUpdate(id: number, piId: number, patchedWebrtcStreamRequest?: PatchedWebrtcStreamRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisWebrtcStreamsPartialUpdate(id, piId, patchedWebrtcStreamRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this webrtc stream.
     * @param {number} piId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisWebrtcStreamsRetrieve(id: number, piId: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisWebrtcStreamsRetrieve(id, piId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this webrtc stream.
     * @param {number} piId 
     * @param {WebrtcStreamRequest} [webrtcStreamRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public pisWebrtcStreamsUpdate(id: number, piId: number, webrtcStreamRequest?: WebrtcStreamRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).pisWebrtcStreamsUpdate(id, piId, webrtcStreamRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} piId 
     * @param {PublicKeyRequest} publicKeyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public publicKeyUpdateOrCreate(piId: number, publicKeyRequest: PublicKeyRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).publicKeyUpdateOrCreate(piId, publicKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} piId 
     * @param {SystemInfoRequest} systemInfoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public systemInfoUpdateOrCreate(piId: number, systemInfoRequest: SystemInfoRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).systemInfoUpdateOrCreate(piId, systemInfoRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generic events viewset
         * @param {PolymorphicCommandCreateRequest} [polymorphicCommandCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsCreate: async (polymorphicCommandCreateRequest?: PolymorphicCommandCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/commands/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(polymorphicCommandCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generic events viewset
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/commands/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generic events viewset
         * @param {number} id A unique integer value identifying this event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commandsRetrieve', 'id', id)
            const localVarPath = `/api/commands/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generic events viewset
         * @param {PolymorphicEventCreateRequest} [polymorphicEventCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCreate: async (polymorphicEventCreateRequest?: PolymorphicEventCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/events/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(polymorphicEventCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generic events viewset
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/events/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generic events viewset
         * @param {number} id A unique integer value identifying this event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eventsRetrieve', 'id', id)
            const localVarPath = `/api/events/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventsApiAxiosParamCreator(configuration)
    return {
        /**
         * Generic events viewset
         * @param {PolymorphicCommandCreateRequest} [polymorphicCommandCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commandsCreate(polymorphicCommandCreateRequest?: PolymorphicCommandCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolymorphicCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commandsCreate(polymorphicCommandCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generic events viewset
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commandsList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPolymorphicCommandList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commandsList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generic events viewset
         * @param {number} id A unique integer value identifying this event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commandsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolymorphicCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commandsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generic events viewset
         * @param {PolymorphicEventCreateRequest} [polymorphicEventCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsCreate(polymorphicEventCreateRequest?: PolymorphicEventCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolymorphicEvent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsCreate(polymorphicEventCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generic events viewset
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPolymorphicEventList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generic events viewset
         * @param {number} id A unique integer value identifying this event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolymorphicEvent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventsApiFp(configuration)
    return {
        /**
         * Generic events viewset
         * @param {PolymorphicCommandCreateRequest} [polymorphicCommandCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsCreate(polymorphicCommandCreateRequest?: PolymorphicCommandCreateRequest, options?: any): AxiosPromise<PolymorphicCommand> {
            return localVarFp.commandsCreate(polymorphicCommandCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Generic events viewset
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsList(page?: number, options?: any): AxiosPromise<PaginatedPolymorphicCommandList> {
            return localVarFp.commandsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Generic events viewset
         * @param {number} id A unique integer value identifying this event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsRetrieve(id: number, options?: any): AxiosPromise<PolymorphicCommand> {
            return localVarFp.commandsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Generic events viewset
         * @param {PolymorphicEventCreateRequest} [polymorphicEventCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCreate(polymorphicEventCreateRequest?: PolymorphicEventCreateRequest, options?: any): AxiosPromise<PolymorphicEvent> {
            return localVarFp.eventsCreate(polymorphicEventCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Generic events viewset
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsList(page?: number, options?: any): AxiosPromise<PaginatedPolymorphicEventList> {
            return localVarFp.eventsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Generic events viewset
         * @param {number} id A unique integer value identifying this event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsRetrieve(id: number, options?: any): AxiosPromise<PolymorphicEvent> {
            return localVarFp.eventsRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventsApi - interface
 * @export
 * @interface EventsApi
 */
export interface EventsApiInterface {
    /**
     * Generic events viewset
     * @param {PolymorphicCommandCreateRequest} [polymorphicCommandCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    commandsCreate(polymorphicCommandCreateRequest?: PolymorphicCommandCreateRequest, options?: AxiosRequestConfig): AxiosPromise<PolymorphicCommand>;

    /**
     * Generic events viewset
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    commandsList(page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedPolymorphicCommandList>;

    /**
     * Generic events viewset
     * @param {number} id A unique integer value identifying this event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    commandsRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<PolymorphicCommand>;

    /**
     * Generic events viewset
     * @param {PolymorphicEventCreateRequest} [polymorphicEventCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsCreate(polymorphicEventCreateRequest?: PolymorphicEventCreateRequest, options?: AxiosRequestConfig): AxiosPromise<PolymorphicEvent>;

    /**
     * Generic events viewset
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsList(page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedPolymorphicEventList>;

    /**
     * Generic events viewset
     * @param {number} id A unique integer value identifying this event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<PolymorphicEvent>;

}

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI implements EventsApiInterface {
    /**
     * Generic events viewset
     * @param {PolymorphicCommandCreateRequest} [polymorphicCommandCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public commandsCreate(polymorphicCommandCreateRequest?: PolymorphicCommandCreateRequest, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).commandsCreate(polymorphicCommandCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generic events viewset
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public commandsList(page?: number, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).commandsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generic events viewset
     * @param {number} id A unique integer value identifying this event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public commandsRetrieve(id: number, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).commandsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generic events viewset
     * @param {PolymorphicEventCreateRequest} [polymorphicEventCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsCreate(polymorphicEventCreateRequest?: PolymorphicEventCreateRequest, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsCreate(polymorphicEventCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generic events viewset
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsList(page?: number, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generic events viewset
     * @param {number} id A unique integer value identifying this event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsRetrieve(id: number, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * JanusApi - axios parameter creator
 * @export
 */
export const JanusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} piId 
         * @param {WebrtcStreamRequest} [webrtcStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisWebrtcStreamsCreate: async (piId: number, webrtcStreamRequest?: WebrtcStreamRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisWebrtcStreamsCreate', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/webrtc-streams/`
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webrtcStreamRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} piId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisWebrtcStreamsList: async (piId: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisWebrtcStreamsList', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/webrtc-streams/`
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this webrtc stream.
         * @param {number} piId 
         * @param {PatchedWebrtcStreamRequest} [patchedWebrtcStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisWebrtcStreamsPartialUpdate: async (id: number, piId: number, patchedWebrtcStreamRequest?: PatchedWebrtcStreamRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pisWebrtcStreamsPartialUpdate', 'id', id)
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisWebrtcStreamsPartialUpdate', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/webrtc-streams/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedWebrtcStreamRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this webrtc stream.
         * @param {number} piId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisWebrtcStreamsRetrieve: async (id: number, piId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pisWebrtcStreamsRetrieve', 'id', id)
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisWebrtcStreamsRetrieve', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/webrtc-streams/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this webrtc stream.
         * @param {number} piId 
         * @param {WebrtcStreamRequest} [webrtcStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisWebrtcStreamsUpdate: async (id: number, piId: number, webrtcStreamRequest?: WebrtcStreamRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pisWebrtcStreamsUpdate', 'id', id)
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisWebrtcStreamsUpdate', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/webrtc-streams/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webrtcStreamRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JanusApi - functional programming interface
 * @export
 */
export const JanusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JanusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} piId 
         * @param {WebrtcStreamRequest} [webrtcStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisWebrtcStreamsCreate(piId: number, webrtcStreamRequest?: WebrtcStreamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebrtcStream>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisWebrtcStreamsCreate(piId, webrtcStreamRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} piId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisWebrtcStreamsList(piId: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedWebrtcStreamList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisWebrtcStreamsList(piId, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this webrtc stream.
         * @param {number} piId 
         * @param {PatchedWebrtcStreamRequest} [patchedWebrtcStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisWebrtcStreamsPartialUpdate(id: number, piId: number, patchedWebrtcStreamRequest?: PatchedWebrtcStreamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebrtcStream>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisWebrtcStreamsPartialUpdate(id, piId, patchedWebrtcStreamRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this webrtc stream.
         * @param {number} piId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisWebrtcStreamsRetrieve(id: number, piId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebrtcStream>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisWebrtcStreamsRetrieve(id, piId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this webrtc stream.
         * @param {number} piId 
         * @param {WebrtcStreamRequest} [webrtcStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisWebrtcStreamsUpdate(id: number, piId: number, webrtcStreamRequest?: WebrtcStreamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebrtcStream>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisWebrtcStreamsUpdate(id, piId, webrtcStreamRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JanusApi - factory interface
 * @export
 */
export const JanusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JanusApiFp(configuration)
    return {
        /**
         * 
         * @param {number} piId 
         * @param {WebrtcStreamRequest} [webrtcStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisWebrtcStreamsCreate(piId: number, webrtcStreamRequest?: WebrtcStreamRequest, options?: any): AxiosPromise<WebrtcStream> {
            return localVarFp.pisWebrtcStreamsCreate(piId, webrtcStreamRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} piId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisWebrtcStreamsList(piId: number, page?: number, options?: any): AxiosPromise<PaginatedWebrtcStreamList> {
            return localVarFp.pisWebrtcStreamsList(piId, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this webrtc stream.
         * @param {number} piId 
         * @param {PatchedWebrtcStreamRequest} [patchedWebrtcStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisWebrtcStreamsPartialUpdate(id: number, piId: number, patchedWebrtcStreamRequest?: PatchedWebrtcStreamRequest, options?: any): AxiosPromise<WebrtcStream> {
            return localVarFp.pisWebrtcStreamsPartialUpdate(id, piId, patchedWebrtcStreamRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this webrtc stream.
         * @param {number} piId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisWebrtcStreamsRetrieve(id: number, piId: number, options?: any): AxiosPromise<WebrtcStream> {
            return localVarFp.pisWebrtcStreamsRetrieve(id, piId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this webrtc stream.
         * @param {number} piId 
         * @param {WebrtcStreamRequest} [webrtcStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisWebrtcStreamsUpdate(id: number, piId: number, webrtcStreamRequest?: WebrtcStreamRequest, options?: any): AxiosPromise<WebrtcStream> {
            return localVarFp.pisWebrtcStreamsUpdate(id, piId, webrtcStreamRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JanusApi - interface
 * @export
 * @interface JanusApi
 */
export interface JanusApiInterface {
    /**
     * 
     * @param {number} piId 
     * @param {WebrtcStreamRequest} [webrtcStreamRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JanusApiInterface
     */
    pisWebrtcStreamsCreate(piId: number, webrtcStreamRequest?: WebrtcStreamRequest, options?: AxiosRequestConfig): AxiosPromise<WebrtcStream>;

    /**
     * 
     * @param {number} piId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JanusApiInterface
     */
    pisWebrtcStreamsList(piId: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedWebrtcStreamList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this webrtc stream.
     * @param {number} piId 
     * @param {PatchedWebrtcStreamRequest} [patchedWebrtcStreamRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JanusApiInterface
     */
    pisWebrtcStreamsPartialUpdate(id: number, piId: number, patchedWebrtcStreamRequest?: PatchedWebrtcStreamRequest, options?: AxiosRequestConfig): AxiosPromise<WebrtcStream>;

    /**
     * 
     * @param {number} id A unique integer value identifying this webrtc stream.
     * @param {number} piId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JanusApiInterface
     */
    pisWebrtcStreamsRetrieve(id: number, piId: number, options?: AxiosRequestConfig): AxiosPromise<WebrtcStream>;

    /**
     * 
     * @param {number} id A unique integer value identifying this webrtc stream.
     * @param {number} piId 
     * @param {WebrtcStreamRequest} [webrtcStreamRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JanusApiInterface
     */
    pisWebrtcStreamsUpdate(id: number, piId: number, webrtcStreamRequest?: WebrtcStreamRequest, options?: AxiosRequestConfig): AxiosPromise<WebrtcStream>;

}

/**
 * JanusApi - object-oriented interface
 * @export
 * @class JanusApi
 * @extends {BaseAPI}
 */
export class JanusApi extends BaseAPI implements JanusApiInterface {
    /**
     * 
     * @param {number} piId 
     * @param {WebrtcStreamRequest} [webrtcStreamRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JanusApi
     */
    public pisWebrtcStreamsCreate(piId: number, webrtcStreamRequest?: WebrtcStreamRequest, options?: AxiosRequestConfig) {
        return JanusApiFp(this.configuration).pisWebrtcStreamsCreate(piId, webrtcStreamRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} piId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JanusApi
     */
    public pisWebrtcStreamsList(piId: number, page?: number, options?: AxiosRequestConfig) {
        return JanusApiFp(this.configuration).pisWebrtcStreamsList(piId, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this webrtc stream.
     * @param {number} piId 
     * @param {PatchedWebrtcStreamRequest} [patchedWebrtcStreamRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JanusApi
     */
    public pisWebrtcStreamsPartialUpdate(id: number, piId: number, patchedWebrtcStreamRequest?: PatchedWebrtcStreamRequest, options?: AxiosRequestConfig) {
        return JanusApiFp(this.configuration).pisWebrtcStreamsPartialUpdate(id, piId, patchedWebrtcStreamRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this webrtc stream.
     * @param {number} piId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JanusApi
     */
    public pisWebrtcStreamsRetrieve(id: number, piId: number, options?: AxiosRequestConfig) {
        return JanusApiFp(this.configuration).pisWebrtcStreamsRetrieve(id, piId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this webrtc stream.
     * @param {number} piId 
     * @param {WebrtcStreamRequest} [webrtcStreamRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JanusApi
     */
    public pisWebrtcStreamsUpdate(id: number, piId: number, webrtcStreamRequest?: WebrtcStreamRequest, options?: AxiosRequestConfig) {
        return JanusApiFp(this.configuration).pisWebrtcStreamsUpdate(id, piId, webrtcStreamRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OctoprintApi - axios parameter creator
 * @export
 */
export const OctoprintApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} hostname 
         * @param {string} name 
         * @param {string} octoprintVersion 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintBackupsCreate: async (hostname: string, name: string, octoprintVersion: string, file: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hostname' is not null or undefined
            assertParamExists('octoprintBackupsCreate', 'hostname', hostname)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('octoprintBackupsCreate', 'name', name)
            // verify required parameter 'octoprintVersion' is not null or undefined
            assertParamExists('octoprintBackupsCreate', 'octoprintVersion', octoprintVersion)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('octoprintBackupsCreate', 'file', file)
            const localVarPath = `/api/octoprint/backups/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (hostname !== undefined) { 
                localVarFormParams.append('hostname', hostname as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (octoprintVersion !== undefined) { 
                localVarFormParams.append('octoprint_version', octoprintVersion as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintBackupsList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/octoprint/backups/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print backup.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintBackupsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('octoprintBackupsRetrieve', 'id', id)
            const localVarPath = `/api/octoprint/backups/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OctoPrintServerRequest} octoPrintServerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintCreate: async (octoPrintServerRequest: OctoPrintServerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'octoPrintServerRequest' is not null or undefined
            assertParamExists('octoprintCreate', 'octoPrintServerRequest', octoPrintServerRequest)
            const localVarPath = `/api/octoprint/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(octoPrintServerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {any} file 
         * @param {string} hash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintGcodeFilesCreate: async (name: string, file: any, hash: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('octoprintGcodeFilesCreate', 'name', name)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('octoprintGcodeFilesCreate', 'file', file)
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('octoprintGcodeFilesCreate', 'hash', hash)
            const localVarPath = `/api/octoprint/gcode-files/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (hash !== undefined) { 
                localVarFormParams.append('hash', hash as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintGcodeFilesList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/octoprint/gcode-files/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this gcode file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintGcodeFilesRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('octoprintGcodeFilesRetrieve', 'id', id)
            const localVarPath = `/api/octoprint/gcode-files/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/octoprint/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print server.
         * @param {PatchedOctoPrintServerRequest} [patchedOctoPrintServerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintPartialUpdate: async (id: number, patchedOctoPrintServerRequest?: PatchedOctoPrintServerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('octoprintPartialUpdate', 'id', id)
            const localVarPath = `/api/octoprint/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedOctoPrintServerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintPrinterProfilesCreate: async (octoPrinterProfileRequest: OctoPrinterProfileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'octoPrinterProfileRequest' is not null or undefined
            assertParamExists('octoprintPrinterProfilesCreate', 'octoPrinterProfileRequest', octoPrinterProfileRequest)
            const localVarPath = `/api/octoprint/printer-profiles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(octoPrinterProfileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintPrinterProfilesList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/octoprint/printer-profiles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo printer profile.
         * @param {PatchedOctoPrinterProfileRequest} [patchedOctoPrinterProfileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintPrinterProfilesPartialUpdate: async (id: number, patchedOctoPrinterProfileRequest?: PatchedOctoPrinterProfileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('octoprintPrinterProfilesPartialUpdate', 'id', id)
            const localVarPath = `/api/octoprint/printer-profiles/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedOctoPrinterProfileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo printer profile.
         * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintPrinterProfilesUpdate: async (id: number, octoPrinterProfileRequest: OctoPrinterProfileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('octoprintPrinterProfilesUpdate', 'id', id)
            // verify required parameter 'octoPrinterProfileRequest' is not null or undefined
            assertParamExists('octoprintPrinterProfilesUpdate', 'octoPrinterProfileRequest', octoPrinterProfileRequest)
            const localVarPath = `/api/octoprint/printer-profiles/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(octoPrinterProfileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintProfileUpdateOrCreate: async (octoPrinterProfileRequest: OctoPrinterProfileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'octoPrinterProfileRequest' is not null or undefined
            assertParamExists('octoprintProfileUpdateOrCreate', 'octoPrinterProfileRequest', octoPrinterProfileRequest)
            const localVarPath = `/api/octoprint/printer-profiles/update-or-create/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(octoPrinterProfileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OctoPrintServerRequest} octoPrintServerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintServerUpdateOrCreate: async (octoPrintServerRequest: OctoPrintServerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'octoPrintServerRequest' is not null or undefined
            assertParamExists('octoprintServerUpdateOrCreate', 'octoPrintServerRequest', octoPrintServerRequest)
            const localVarPath = `/api/octoprint/update-or-create/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(octoPrintServerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintSettingsCreate: async (octoPrintSettingsRequest: OctoPrintSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'octoPrintSettingsRequest' is not null or undefined
            assertParamExists('octoprintSettingsCreate', 'octoPrintSettingsRequest', octoPrintSettingsRequest)
            const localVarPath = `/api/octoprint/settings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(octoPrintSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintSettingsList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/octoprint/settings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print settings.
         * @param {PatchedOctoPrintSettingsRequest} [patchedOctoPrintSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintSettingsPartialUpdate: async (id: number, patchedOctoPrintSettingsRequest?: PatchedOctoPrintSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('octoprintSettingsPartialUpdate', 'id', id)
            const localVarPath = `/api/octoprint/settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedOctoPrintSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print settings.
         * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintSettingsUpdate: async (id: number, octoPrintSettingsRequest: OctoPrintSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('octoprintSettingsUpdate', 'id', id)
            // verify required parameter 'octoPrintSettingsRequest' is not null or undefined
            assertParamExists('octoprintSettingsUpdate', 'octoPrintSettingsRequest', octoPrintSettingsRequest)
            const localVarPath = `/api/octoprint/settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(octoPrintSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintSettingsUpdateOrCreate: async (octoPrintSettingsRequest: OctoPrintSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'octoPrintSettingsRequest' is not null or undefined
            assertParamExists('octoprintSettingsUpdateOrCreate', 'octoPrintSettingsRequest', octoPrintSettingsRequest)
            const localVarPath = `/api/octoprint/settings/update-or-create/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(octoPrintSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print server.
         * @param {OctoPrintServerRequest} octoPrintServerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintUpdate: async (id: number, octoPrintServerRequest: OctoPrintServerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('octoprintUpdate', 'id', id)
            // verify required parameter 'octoPrintServerRequest' is not null or undefined
            assertParamExists('octoprintUpdate', 'octoPrintServerRequest', octoPrintServerRequest)
            const localVarPath = `/api/octoprint/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(octoPrintServerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} piId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisOctoprintList: async (piId: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'piId' is not null or undefined
            assertParamExists('pisOctoprintList', 'piId', piId)
            const localVarPath = `/api/pis/{pi_id}/octoprint/`
                .replace(`{${"pi_id"}}`, encodeURIComponent(String(piId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OctoprintApi - functional programming interface
 * @export
 */
export const OctoprintApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OctoprintApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} hostname 
         * @param {string} name 
         * @param {string} octoprintVersion 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintBackupsCreate(hostname: string, name: string, octoprintVersion: string, file: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintBackup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintBackupsCreate(hostname, name, octoprintVersion, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintBackupsList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedOctoPrintBackupList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintBackupsList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print backup.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintBackupsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintBackup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintBackupsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OctoPrintServerRequest} octoPrintServerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintCreate(octoPrintServerRequest: OctoPrintServerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintServer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintCreate(octoPrintServerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} name 
         * @param {any} file 
         * @param {string} hash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintGcodeFilesCreate(name: string, file: any, hash: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GcodeFile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintGcodeFilesCreate(name, file, hash, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintGcodeFilesList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedGcodeFileList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintGcodeFilesList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this gcode file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintGcodeFilesRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GcodeFile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintGcodeFilesRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedOctoPrintServerList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print server.
         * @param {PatchedOctoPrintServerRequest} [patchedOctoPrintServerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintPartialUpdate(id: number, patchedOctoPrintServerRequest?: PatchedOctoPrintServerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintServer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintPartialUpdate(id, patchedOctoPrintServerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintPrinterProfilesCreate(octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrinterProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintPrinterProfilesCreate(octoPrinterProfileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintPrinterProfilesList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedOctoPrinterProfileList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintPrinterProfilesList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo printer profile.
         * @param {PatchedOctoPrinterProfileRequest} [patchedOctoPrinterProfileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintPrinterProfilesPartialUpdate(id: number, patchedOctoPrinterProfileRequest?: PatchedOctoPrinterProfileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrinterProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintPrinterProfilesPartialUpdate(id, patchedOctoPrinterProfileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo printer profile.
         * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintPrinterProfilesUpdate(id: number, octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrinterProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintPrinterProfilesUpdate(id, octoPrinterProfileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintProfileUpdateOrCreate(octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrinterProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintProfileUpdateOrCreate(octoPrinterProfileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OctoPrintServerRequest} octoPrintServerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintServerUpdateOrCreate(octoPrintServerRequest: OctoPrintServerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintServer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintServerUpdateOrCreate(octoPrintServerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintSettingsCreate(octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintSettingsCreate(octoPrintSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintSettingsList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedOctoPrintSettingsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintSettingsList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print settings.
         * @param {PatchedOctoPrintSettingsRequest} [patchedOctoPrintSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintSettingsPartialUpdate(id: number, patchedOctoPrintSettingsRequest?: PatchedOctoPrintSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintSettingsPartialUpdate(id, patchedOctoPrintSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print settings.
         * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintSettingsUpdate(id: number, octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintSettingsUpdate(id, octoPrintSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintSettingsUpdateOrCreate(octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintSettingsUpdateOrCreate(octoPrintSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print server.
         * @param {OctoPrintServerRequest} octoPrintServerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintUpdate(id: number, octoPrintServerRequest: OctoPrintServerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintServer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintUpdate(id, octoPrintServerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} piId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pisOctoprintList(piId: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedOctoPrintServerList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pisOctoprintList(piId, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OctoprintApi - factory interface
 * @export
 */
export const OctoprintApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OctoprintApiFp(configuration)
    return {
        /**
         * 
         * @param {string} hostname 
         * @param {string} name 
         * @param {string} octoprintVersion 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintBackupsCreate(hostname: string, name: string, octoprintVersion: string, file: any, options?: any): AxiosPromise<OctoPrintBackup> {
            return localVarFp.octoprintBackupsCreate(hostname, name, octoprintVersion, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintBackupsList(page?: number, options?: any): AxiosPromise<PaginatedOctoPrintBackupList> {
            return localVarFp.octoprintBackupsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print backup.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintBackupsRetrieve(id: number, options?: any): AxiosPromise<OctoPrintBackup> {
            return localVarFp.octoprintBackupsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OctoPrintServerRequest} octoPrintServerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintCreate(octoPrintServerRequest: OctoPrintServerRequest, options?: any): AxiosPromise<OctoPrintServer> {
            return localVarFp.octoprintCreate(octoPrintServerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name 
         * @param {any} file 
         * @param {string} hash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintGcodeFilesCreate(name: string, file: any, hash: string, options?: any): AxiosPromise<GcodeFile> {
            return localVarFp.octoprintGcodeFilesCreate(name, file, hash, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintGcodeFilesList(page?: number, options?: any): AxiosPromise<PaginatedGcodeFileList> {
            return localVarFp.octoprintGcodeFilesList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this gcode file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintGcodeFilesRetrieve(id: number, options?: any): AxiosPromise<GcodeFile> {
            return localVarFp.octoprintGcodeFilesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintList(page?: number, options?: any): AxiosPromise<PaginatedOctoPrintServerList> {
            return localVarFp.octoprintList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print server.
         * @param {PatchedOctoPrintServerRequest} [patchedOctoPrintServerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintPartialUpdate(id: number, patchedOctoPrintServerRequest?: PatchedOctoPrintServerRequest, options?: any): AxiosPromise<OctoPrintServer> {
            return localVarFp.octoprintPartialUpdate(id, patchedOctoPrintServerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintPrinterProfilesCreate(octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: any): AxiosPromise<OctoPrinterProfile> {
            return localVarFp.octoprintPrinterProfilesCreate(octoPrinterProfileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintPrinterProfilesList(page?: number, options?: any): AxiosPromise<PaginatedOctoPrinterProfileList> {
            return localVarFp.octoprintPrinterProfilesList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo printer profile.
         * @param {PatchedOctoPrinterProfileRequest} [patchedOctoPrinterProfileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintPrinterProfilesPartialUpdate(id: number, patchedOctoPrinterProfileRequest?: PatchedOctoPrinterProfileRequest, options?: any): AxiosPromise<OctoPrinterProfile> {
            return localVarFp.octoprintPrinterProfilesPartialUpdate(id, patchedOctoPrinterProfileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo printer profile.
         * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintPrinterProfilesUpdate(id: number, octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: any): AxiosPromise<OctoPrinterProfile> {
            return localVarFp.octoprintPrinterProfilesUpdate(id, octoPrinterProfileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintProfileUpdateOrCreate(octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: any): AxiosPromise<OctoPrinterProfile> {
            return localVarFp.octoprintProfileUpdateOrCreate(octoPrinterProfileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OctoPrintServerRequest} octoPrintServerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintServerUpdateOrCreate(octoPrintServerRequest: OctoPrintServerRequest, options?: any): AxiosPromise<OctoPrintServer> {
            return localVarFp.octoprintServerUpdateOrCreate(octoPrintServerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintSettingsCreate(octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: any): AxiosPromise<OctoPrintSettings> {
            return localVarFp.octoprintSettingsCreate(octoPrintSettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintSettingsList(page?: number, options?: any): AxiosPromise<PaginatedOctoPrintSettingsList> {
            return localVarFp.octoprintSettingsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print settings.
         * @param {PatchedOctoPrintSettingsRequest} [patchedOctoPrintSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintSettingsPartialUpdate(id: number, patchedOctoPrintSettingsRequest?: PatchedOctoPrintSettingsRequest, options?: any): AxiosPromise<OctoPrintSettings> {
            return localVarFp.octoprintSettingsPartialUpdate(id, patchedOctoPrintSettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print settings.
         * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintSettingsUpdate(id: number, octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: any): AxiosPromise<OctoPrintSettings> {
            return localVarFp.octoprintSettingsUpdate(id, octoPrintSettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintSettingsUpdateOrCreate(octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: any): AxiosPromise<OctoPrintSettings> {
            return localVarFp.octoprintSettingsUpdateOrCreate(octoPrintSettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print server.
         * @param {OctoPrintServerRequest} octoPrintServerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintUpdate(id: number, octoPrintServerRequest: OctoPrintServerRequest, options?: any): AxiosPromise<OctoPrintServer> {
            return localVarFp.octoprintUpdate(id, octoPrintServerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} piId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pisOctoprintList(piId: number, page?: number, options?: any): AxiosPromise<PaginatedOctoPrintServerList> {
            return localVarFp.pisOctoprintList(piId, page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OctoprintApi - interface
 * @export
 * @interface OctoprintApi
 */
export interface OctoprintApiInterface {
    /**
     * 
     * @param {string} hostname 
     * @param {string} name 
     * @param {string} octoprintVersion 
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintBackupsCreate(hostname: string, name: string, octoprintVersion: string, file: any, options?: AxiosRequestConfig): AxiosPromise<OctoPrintBackup>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintBackupsList(page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedOctoPrintBackupList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print backup.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintBackupsRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<OctoPrintBackup>;

    /**
     * 
     * @param {OctoPrintServerRequest} octoPrintServerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintCreate(octoPrintServerRequest: OctoPrintServerRequest, options?: AxiosRequestConfig): AxiosPromise<OctoPrintServer>;

    /**
     * 
     * @param {string} name 
     * @param {any} file 
     * @param {string} hash 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintGcodeFilesCreate(name: string, file: any, hash: string, options?: AxiosRequestConfig): AxiosPromise<GcodeFile>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintGcodeFilesList(page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedGcodeFileList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this gcode file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintGcodeFilesRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<GcodeFile>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintList(page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedOctoPrintServerList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print server.
     * @param {PatchedOctoPrintServerRequest} [patchedOctoPrintServerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintPartialUpdate(id: number, patchedOctoPrintServerRequest?: PatchedOctoPrintServerRequest, options?: AxiosRequestConfig): AxiosPromise<OctoPrintServer>;

    /**
     * 
     * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintPrinterProfilesCreate(octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: AxiosRequestConfig): AxiosPromise<OctoPrinterProfile>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintPrinterProfilesList(page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedOctoPrinterProfileList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this octo printer profile.
     * @param {PatchedOctoPrinterProfileRequest} [patchedOctoPrinterProfileRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintPrinterProfilesPartialUpdate(id: number, patchedOctoPrinterProfileRequest?: PatchedOctoPrinterProfileRequest, options?: AxiosRequestConfig): AxiosPromise<OctoPrinterProfile>;

    /**
     * 
     * @param {number} id A unique integer value identifying this octo printer profile.
     * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintPrinterProfilesUpdate(id: number, octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: AxiosRequestConfig): AxiosPromise<OctoPrinterProfile>;

    /**
     * 
     * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintProfileUpdateOrCreate(octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: AxiosRequestConfig): AxiosPromise<OctoPrinterProfile>;

    /**
     * 
     * @param {OctoPrintServerRequest} octoPrintServerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintServerUpdateOrCreate(octoPrintServerRequest: OctoPrintServerRequest, options?: AxiosRequestConfig): AxiosPromise<OctoPrintServer>;

    /**
     * 
     * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintSettingsCreate(octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<OctoPrintSettings>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintSettingsList(page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedOctoPrintSettingsList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print settings.
     * @param {PatchedOctoPrintSettingsRequest} [patchedOctoPrintSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintSettingsPartialUpdate(id: number, patchedOctoPrintSettingsRequest?: PatchedOctoPrintSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<OctoPrintSettings>;

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print settings.
     * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintSettingsUpdate(id: number, octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<OctoPrintSettings>;

    /**
     * 
     * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintSettingsUpdateOrCreate(octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<OctoPrintSettings>;

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print server.
     * @param {OctoPrintServerRequest} octoPrintServerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintUpdate(id: number, octoPrintServerRequest: OctoPrintServerRequest, options?: AxiosRequestConfig): AxiosPromise<OctoPrintServer>;

    /**
     * 
     * @param {number} piId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    pisOctoprintList(piId: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedOctoPrintServerList>;

}

/**
 * OctoprintApi - object-oriented interface
 * @export
 * @class OctoprintApi
 * @extends {BaseAPI}
 */
export class OctoprintApi extends BaseAPI implements OctoprintApiInterface {
    /**
     * 
     * @param {string} hostname 
     * @param {string} name 
     * @param {string} octoprintVersion 
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintBackupsCreate(hostname: string, name: string, octoprintVersion: string, file: any, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintBackupsCreate(hostname, name, octoprintVersion, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintBackupsList(page?: number, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintBackupsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print backup.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintBackupsRetrieve(id: number, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintBackupsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OctoPrintServerRequest} octoPrintServerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintCreate(octoPrintServerRequest: OctoPrintServerRequest, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintCreate(octoPrintServerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name 
     * @param {any} file 
     * @param {string} hash 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintGcodeFilesCreate(name: string, file: any, hash: string, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintGcodeFilesCreate(name, file, hash, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintGcodeFilesList(page?: number, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintGcodeFilesList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this gcode file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintGcodeFilesRetrieve(id: number, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintGcodeFilesRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintList(page?: number, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print server.
     * @param {PatchedOctoPrintServerRequest} [patchedOctoPrintServerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintPartialUpdate(id: number, patchedOctoPrintServerRequest?: PatchedOctoPrintServerRequest, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintPartialUpdate(id, patchedOctoPrintServerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintPrinterProfilesCreate(octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintPrinterProfilesCreate(octoPrinterProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintPrinterProfilesList(page?: number, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintPrinterProfilesList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this octo printer profile.
     * @param {PatchedOctoPrinterProfileRequest} [patchedOctoPrinterProfileRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintPrinterProfilesPartialUpdate(id: number, patchedOctoPrinterProfileRequest?: PatchedOctoPrinterProfileRequest, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintPrinterProfilesPartialUpdate(id, patchedOctoPrinterProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this octo printer profile.
     * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintPrinterProfilesUpdate(id: number, octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintPrinterProfilesUpdate(id, octoPrinterProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintProfileUpdateOrCreate(octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintProfileUpdateOrCreate(octoPrinterProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OctoPrintServerRequest} octoPrintServerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintServerUpdateOrCreate(octoPrintServerRequest: OctoPrintServerRequest, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintServerUpdateOrCreate(octoPrintServerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintSettingsCreate(octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintSettingsCreate(octoPrintSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintSettingsList(page?: number, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintSettingsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print settings.
     * @param {PatchedOctoPrintSettingsRequest} [patchedOctoPrintSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintSettingsPartialUpdate(id: number, patchedOctoPrintSettingsRequest?: PatchedOctoPrintSettingsRequest, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintSettingsPartialUpdate(id, patchedOctoPrintSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print settings.
     * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintSettingsUpdate(id: number, octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintSettingsUpdate(id, octoPrintSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintSettingsUpdateOrCreate(octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintSettingsUpdateOrCreate(octoPrintSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print server.
     * @param {OctoPrintServerRequest} octoPrintServerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintUpdate(id: number, octoPrintServerRequest: OctoPrintServerRequest, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintUpdate(id, octoPrintServerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} piId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public pisOctoprintList(piId: number, page?: number, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).pisOctoprintList(piId, page, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SchemaApi - axios parameter creator
 * @export
 */
export const SchemaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schemaRetrieve: async (lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/schema/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchemaApi - functional programming interface
 * @export
 */
export const SchemaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchemaApiAxiosParamCreator(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schemaRetrieve(lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schemaRetrieve(lang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SchemaApi - factory interface
 * @export
 */
export const SchemaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchemaApiFp(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schemaRetrieve(lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: any): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.schemaRetrieve(lang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchemaApi - interface
 * @export
 * @interface SchemaApi
 */
export interface SchemaApiInterface {
    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApiInterface
     */
    schemaRetrieve(lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: AxiosRequestConfig): AxiosPromise<{ [key: string]: any; }>;

}

/**
 * SchemaApi - object-oriented interface
 * @export
 * @class SchemaApi
 * @extends {BaseAPI}
 */
export class SchemaApi extends BaseAPI implements SchemaApiInterface {
    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    public schemaRetrieve(lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: AxiosRequestConfig) {
        return SchemaApiFp(this.configuration).schemaRetrieve(lang, options).then((request) => request(this.axios, this.basePath));
    }
}


