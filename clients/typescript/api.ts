/* tslint:disable */
/* eslint-disable */
/**
 * printnanny-api-client
 * Official API client library for printnanny.ai
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: leigh@printnanny.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export const AggregateUsageEnum = {
    LastDuringPeriod: 'last_during_period',
    LastEver: 'last_ever',
    Max: 'max',
    Sum: 'sum'
} as const;

export type AggregateUsageEnum = typeof AggregateUsageEnum[keyof typeof AggregateUsageEnum];


/**
 * 
 * @export
 * @interface Alert
 */
export interface Alert {
    /**
     * 
     * @type {number}
     * @memberof Alert
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    'time': string;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    'gcode_file': string;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    'print_progress': string;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    'time_elapsed': string;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    'time_remaining': string;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    'manage_device_url': string | null;
    /**
     * 
     * @type {number}
     * @memberof Alert
     */
    'user': number;
    /**
     * 
     * @type {number}
     * @memberof Alert
     */
    'octoprint_device'?: number | null;
    /**
     * 
     * @type {EventTypeEnum}
     * @memberof Alert
     */
    'event_type'?: EventTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof Alert
     */
    'seen'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Alert
     */
    'sent'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    'created_dt': string;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    'updated_dt': string;
    /**
     * 
     * @type {string}
     * @memberof Alert
     */
    'message': string;
}
/**
 * Serializer used in POST /api/alerts/seen and POST /api/alerts/dismiss requests
 * @export
 * @interface AlertBulkResponse
 */
export interface AlertBulkResponse {
    /**
     * 
     * @type {number}
     * @memberof AlertBulkResponse
     */
    'received': number;
    /**
     * 
     * @type {number}
     * @memberof AlertBulkResponse
     */
    'updated': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AlertMethodsEnum = {
    Ui: 'UI',
    Email: 'EMAIL',
    Discord: 'DISCORD',
    Partner3Dgeeks: 'PARTNER_3DGEEKS'
} as const;

export type AlertMethodsEnum = typeof AlertMethodsEnum[keyof typeof AlertMethodsEnum];


/**
 * 
 * @export
 * @interface AlertRequest
 */
export interface AlertRequest {
    /**
     * 
     * @type {number}
     * @memberof AlertRequest
     */
    'octoprint_device'?: number | null;
    /**
     * 
     * @type {EventTypeEnum}
     * @memberof AlertRequest
     */
    'event_type'?: EventTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof AlertRequest
     */
    'seen'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AlertRequest
     */
    'sent'?: boolean;
}
/**
 * 
 * @export
 * @interface AlertSettings
 */
export interface AlertSettings {
    /**
     * 
     * @type {number}
     * @memberof AlertSettings
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof AlertSettings
     */
    'created_dt': string;
    /**
     * 
     * @type {string}
     * @memberof AlertSettings
     */
    'updated_dt': string;
    /**
     * 
     * @type {Array<AlertMethodsEnum>}
     * @memberof AlertSettings
     */
    'alert_methods'?: Array<AlertMethodsEnum>;
    /**
     * 
     * @type {Array<EventTypesEnum>}
     * @memberof AlertSettings
     */
    'event_types'?: Array<EventTypesEnum>;
    /**
     * Send notifications to a Discord channel. Please check out this guide to <a href=\'https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks\'>generate a webhook</a> url and paste it here.
     * @type {string}
     * @memberof AlertSettings
     */
    'discord_webhook'?: string | null;
    /**
     * Progress notification interval. Example: 25 will notify you at 25%, 50%, 75%, and 100% progress
     * @type {number}
     * @memberof AlertSettings
     */
    'print_progress_percent'?: number;
    /**
     * 
     * @type {number}
     * @memberof AlertSettings
     */
    'user': number;
}
/**
 * 
 * @export
 * @interface AlertSettingsRequest
 */
export interface AlertSettingsRequest {
    /**
     * 
     * @type {Array<AlertMethodsEnum>}
     * @memberof AlertSettingsRequest
     */
    'alert_methods'?: Array<AlertMethodsEnum>;
    /**
     * 
     * @type {Array<EventTypesEnum>}
     * @memberof AlertSettingsRequest
     */
    'event_types'?: Array<EventTypesEnum>;
    /**
     * Send notifications to a Discord channel. Please check out this guide to <a href=\'https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks\'>generate a webhook</a> url and paste it here.
     * @type {string}
     * @memberof AlertSettingsRequest
     */
    'discord_webhook'?: string | null;
    /**
     * Progress notification interval. Example: 25 will notify you at 25%, 50%, 75%, and 100% progress
     * @type {number}
     * @memberof AlertSettingsRequest
     */
    'print_progress_percent'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const BillingReasonEnum = {
    Manual: 'manual',
    Subscription: 'subscription',
    SubscriptionCreate: 'subscription_create',
    SubscriptionCycle: 'subscription_cycle',
    SubscriptionThreshold: 'subscription_threshold',
    SubscriptionUpdate: 'subscription_update',
    Upcoming: 'upcoming'
} as const;

export type BillingReasonEnum = typeof BillingReasonEnum[keyof typeof BillingReasonEnum];


/**
 * 
 * @export
 * @enum {string}
 */

export const BillingSchemeEnum = {
    PerUnit: 'per_unit',
    Tiered: 'tiered'
} as const;

export type BillingSchemeEnum = typeof BillingSchemeEnum[keyof typeof BillingSchemeEnum];


/**
 * 
 * @export
 * @interface BillingSummary
 */
export interface BillingSummary {
    /**
     * 
     * @type {StripeSubscription}
     * @memberof BillingSummary
     */
    'subscription': StripeSubscription;
    /**
     * 
     * @type {Array<StripeCharge>}
     * @memberof BillingSummary
     */
    'charges': Array<StripeCharge>;
    /**
     * 
     * @type {Array<StripeEvent>}
     * @memberof BillingSummary
     */
    'events': Array<StripeEvent>;
    /**
     * 
     * @type {StripeNextInvoice}
     * @memberof BillingSummary
     */
    'next_invoice'?: StripeNextInvoice | null;
    /**
     * 
     * @type {StripeCustomer}
     * @memberof BillingSummary
     */
    'customer': StripeCustomer;
    /**
     * 
     * @type {User}
     * @memberof BillingSummary
     */
    'user'?: User | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const BlankEnum = {
    Empty: ''
} as const;

export type BlankEnum = typeof BlankEnum[keyof typeof BlankEnum];


/**
 * Abstract class inspired by DRF\'s own token serializer. Returns a user if valid, None or a message if not.
 * @export
 * @interface CallbackTokenAuthRequest
 */
export interface CallbackTokenAuthRequest {
    /**
     * 
     * @type {string}
     * @memberof CallbackTokenAuthRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CallbackTokenAuthRequest
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof CallbackTokenAuthRequest
     */
    'token': string;
}
/**
 * Takes a user and a token, verifies the token belongs to the user and validates the alias that the token was sent from.
 * @export
 * @interface CallbackTokenVerification
 */
export interface CallbackTokenVerification {
    /**
     * 
     * @type {string}
     * @memberof CallbackTokenVerification
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CallbackTokenVerification
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof CallbackTokenVerification
     */
    'token': string;
}
/**
 * Takes a user and a token, verifies the token belongs to the user and validates the alias that the token was sent from.
 * @export
 * @interface CallbackTokenVerificationRequest
 */
export interface CallbackTokenVerificationRequest {
    /**
     * 
     * @type {string}
     * @memberof CallbackTokenVerificationRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CallbackTokenVerificationRequest
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof CallbackTokenVerificationRequest
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface CloudiotDevice
 */
export interface CloudiotDevice {
    /**
     * 
     * @type {number}
     * @memberof CloudiotDevice
     */
    'num_id': number;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'command_topic': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'event_topic': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'config_topic': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'state_topic': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'gcp_resource': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'gcp_project_id': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'gcp_region': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'gcp_cloudiot_device_registry': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'mqtt_bridge_hostname': string;
    /**
     * 
     * @type {number}
     * @memberof CloudiotDevice
     */
    'mqtt_bridge_port': number;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'mqtt_client_id': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'created_dt': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'updated_dt': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CloudiotDevice
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof CloudiotDevice
     */
    'device': number;
    /**
     * 
     * @type {number}
     * @memberof CloudiotDevice
     */
    'public_key': number;
}
/**
 * 
 * @export
 * @interface CloudiotDeviceRequest
 */
export interface CloudiotDeviceRequest {
    /**
     * 
     * @type {number}
     * @memberof CloudiotDeviceRequest
     */
    'public_key': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const CollectionMethodEnum = {
    ChargeAutomatically: 'charge_automatically',
    SendInvoice: 'send_invoice'
} as const;

export type CollectionMethodEnum = typeof CollectionMethodEnum[keyof typeof CollectionMethodEnum];


/**
 * 
 * @export
 * @interface Config
 */
export interface Config {
    /**
     * 
     * @type {PrintNannyApiConfig}
     * @memberof Config
     */
    'api': PrintNannyApiConfig;
    /**
     * 
     * @type {Device}
     * @memberof Config
     */
    'device': Device;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const CustomerTaxExemptEnum = {
    Exempt: 'exempt',
    None: 'none',
    Reverse: 'reverse'
} as const;

export type CustomerTaxExemptEnum = typeof CustomerTaxExemptEnum[keyof typeof CustomerTaxExemptEnum];


/**
 * Generic auth response serializer
 * @export
 * @interface DetailResponse
 */
export interface DetailResponse {
    /**
     * 
     * @type {string}
     * @memberof DetailResponse
     */
    'detail': string;
}
/**
 * 
 * @export
 * @interface Device
 */
export interface Device {
    /**
     * 
     * @type {number}
     * @memberof Device
     */
    'id': number;
    /**
     * 
     * @type {AlertSettings}
     * @memberof Device
     */
    'alert_settings': AlertSettings;
    /**
     * 
     * @type {DeviceSettings}
     * @memberof Device
     */
    'settings': DeviceSettings;
    /**
     * 
     * @type {CloudiotDevice}
     * @memberof Device
     */
    'cloudiot_device': CloudiotDevice;
    /**
     * 
     * @type {User}
     * @memberof Device
     */
    'user': User;
    /**
     * 
     * @type {SystemInfo}
     * @memberof Device
     */
    'system_info': SystemInfo;
    /**
     * 
     * @type {PublicKey}
     * @memberof Device
     */
    'public_key': PublicKey;
    /**
     * 
     * @type {JanusStream}
     * @memberof Device
     */
    'janus_edge': JanusStream;
    /**
     * 
     * @type {JanusStream}
     * @memberof Device
     */
    'janus_cloud': JanusStream;
    /**
     * 
     * @type {OctoPrintServer}
     * @memberof Device
     */
    'octoprint_server': OctoPrintServer;
    /**
     * 
     * @type {DeviceUrls}
     * @memberof Device
     */
    'urls': DeviceUrls;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'created_dt': string;
    /**
     * Please enter the hostname you set in the Raspberry Pi Imager\'s Advanced Options menu (without .local extension)
     * @type {string}
     * @memberof Device
     */
    'hostname'?: string;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'fqdn'?: string;
}
/**
 * 
 * @export
 * @interface DeviceRequest
 */
export interface DeviceRequest {
    /**
     * Please enter the hostname you set in the Raspberry Pi Imager\'s Advanced Options menu (without .local extension)
     * @type {string}
     * @memberof DeviceRequest
     */
    'hostname'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceRequest
     */
    'fqdn'?: string;
}
/**
 * 
 * @export
 * @interface DeviceSettings
 */
export interface DeviceSettings {
    /**
     * 
     * @type {number}
     * @memberof DeviceSettings
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof DeviceSettings
     */
    'updated_dt': string;
    /**
     * Send camera stream to PrintNanny Cloud
     * @type {boolean}
     * @memberof DeviceSettings
     */
    'cloud_video_enabled'?: boolean;
    /**
     * Send telemetry and performance profiling data to PrintNanny Cloud
     * @type {boolean}
     * @memberof DeviceSettings
     */
    'telemetry_enabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DeviceSettings
     */
    'device': number;
}
/**
 * 
 * @export
 * @interface DeviceSettingsRequest
 */
export interface DeviceSettingsRequest {
    /**
     * Send camera stream to PrintNanny Cloud
     * @type {boolean}
     * @memberof DeviceSettingsRequest
     */
    'cloud_video_enabled'?: boolean;
    /**
     * Send telemetry and performance profiling data to PrintNanny Cloud
     * @type {boolean}
     * @memberof DeviceSettingsRequest
     */
    'telemetry_enabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DeviceSettingsRequest
     */
    'device': number;
}
/**
 * 
 * @export
 * @interface DeviceUrls
 */
export interface DeviceUrls {
    /**
     * 
     * @type {string}
     * @memberof DeviceUrls
     */
    'cloud_dash': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceUrls
     */
    'edge_dash': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceUrls
     */
    'swupdate': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceUrls
     */
    'octoprint': string;
}
/**
 * Abstract class that returns a callback token based on the field given Returns a token if valid, None or a message if not.
 * @export
 * @interface EmailAuthRequest
 */
export interface EmailAuthRequest {
    /**
     * 
     * @type {string}
     * @memberof EmailAuthRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const EndBehaviorEnum = {
    Cancel: 'cancel',
    Release: 'release'
} as const;

export type EndBehaviorEnum = typeof EndBehaviorEnum[keyof typeof EndBehaviorEnum];


/**
 * 
 * @export
 * @interface ErrorDetail
 */
export interface ErrorDetail {
    /**
     * 
     * @type {string}
     * @memberof ErrorDetail
     */
    'detail': string;
    /**
     * 
     * @type {string}
     * @memberof ErrorDetail
     */
    'code': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const EventSource = {
    Octoprint: 'octoprint',
    PrintnannyOs: 'printnanny_os',
    PrintnannyWebapp: 'printnanny_webapp',
    Mainsail: 'mainsail'
} as const;

export type EventSource = typeof EventSource[keyof typeof EventSource];


/**
 * 
 * @export
 * @enum {string}
 */

export const EventTypeEnum = {
    PrintHealth: 'PrintHealth',
    PrintStatus: 'PrintStatus',
    PrintNannyWebapp: 'PrintNannyWebapp',
    PrintProgress: 'PrintProgress',
    PrintDone: 'PrintDone',
    PrintFailed: 'PrintFailed',
    PrintPaused: 'PrintPaused',
    PrintResumed: 'PrintResumed',
    PrintStarted: 'PrintStarted',
    PrintCancelled: 'PrintCancelled'
} as const;

export type EventTypeEnum = typeof EventTypeEnum[keyof typeof EventTypeEnum];


/**
 * 
 * @export
 * @enum {string}
 */

export const EventTypesEnum = {
    PrintHealth: 'PrintHealth',
    PrintStatus: 'PrintStatus'
} as const;

export type EventTypesEnum = typeof EventTypesEnum[keyof typeof EventTypesEnum];


/**
 * 
 * @export
 * @enum {string}
 */

export const FailureCodeEnum = {
    AccountAlreadyExists: 'account_already_exists',
    AccountCountryInvalidAddress: 'account_country_invalid_address',
    AccountInvalid: 'account_invalid',
    AccountNumberInvalid: 'account_number_invalid',
    AlipayUpgradeRequired: 'alipay_upgrade_required',
    AmountTooLarge: 'amount_too_large',
    AmountTooSmall: 'amount_too_small',
    ApiKeyExpired: 'api_key_expired',
    BalanceInsufficient: 'balance_insufficient',
    BankAccountExists: 'bank_account_exists',
    BankAccountUnusable: 'bank_account_unusable',
    BankAccountUnverified: 'bank_account_unverified',
    BitcoinUpgradeRequired: 'bitcoin_upgrade_required',
    CardDeclined: 'card_declined',
    ChargeAlreadyCaptured: 'charge_already_captured',
    ChargeAlreadyRefunded: 'charge_already_refunded',
    ChargeDisputed: 'charge_disputed',
    ChargeExceedsSourceLimit: 'charge_exceeds_source_limit',
    ChargeExpiredForCapture: 'charge_expired_for_capture',
    CountryUnsupported: 'country_unsupported',
    CouponExpired: 'coupon_expired',
    CustomerMaxSubscriptions: 'customer_max_subscriptions',
    EmailInvalid: 'email_invalid',
    ExpiredCard: 'expired_card',
    IdempotencyKeyInUse: 'idempotency_key_in_use',
    IncorrectAddress: 'incorrect_address',
    IncorrectCvc: 'incorrect_cvc',
    IncorrectNumber: 'incorrect_number',
    IncorrectZip: 'incorrect_zip',
    InstantPayoutsUnsupported: 'instant_payouts_unsupported',
    InvalidCardType: 'invalid_card_type',
    InvalidChargeAmount: 'invalid_charge_amount',
    InvalidCvc: 'invalid_cvc',
    InvalidExpiryMonth: 'invalid_expiry_month',
    InvalidExpiryYear: 'invalid_expiry_year',
    InvalidNumber: 'invalid_number',
    InvalidSourceUsage: 'invalid_source_usage',
    InvalidSwipeData: 'invalid_swipe_data',
    InvoiceNoCustomerLineItems: 'invoice_no_customer_line_items',
    InvoiceNoSubscriptionLineItems: 'invoice_no_subscription_line_items',
    InvoiceNotEditable: 'invoice_not_editable',
    InvoiceUpcomingNone: 'invoice_upcoming_none',
    LivemodeMismatch: 'livemode_mismatch',
    Missing: 'missing',
    NotAllowedOnStandardAccount: 'not_allowed_on_standard_account',
    OrderCreationFailed: 'order_creation_failed',
    OrderRequiredSettings: 'order_required_settings',
    OrderStatusInvalid: 'order_status_invalid',
    OrderUpstreamTimeout: 'order_upstream_timeout',
    OutOfInventory: 'out_of_inventory',
    ParameterInvalidEmpty: 'parameter_invalid_empty',
    ParameterInvalidInteger: 'parameter_invalid_integer',
    ParameterInvalidStringBlank: 'parameter_invalid_string_blank',
    ParameterInvalidStringEmpty: 'parameter_invalid_string_empty',
    ParameterMissing: 'parameter_missing',
    ParameterUnknown: 'parameter_unknown',
    ParametersExclusive: 'parameters_exclusive',
    PaymentIntentAuthenticationFailure: 'payment_intent_authentication_failure',
    PaymentIntentIncompatiblePaymentMethod: 'payment_intent_incompatible_payment_method',
    PaymentIntentInvalidParameter: 'payment_intent_invalid_parameter',
    PaymentIntentPaymentAttemptFailed: 'payment_intent_payment_attempt_failed',
    PaymentIntentUnexpectedState: 'payment_intent_unexpected_state',
    PaymentMethodUnactivated: 'payment_method_unactivated',
    PaymentMethodUnexpectedState: 'payment_method_unexpected_state',
    PayoutsNotAllowed: 'payouts_not_allowed',
    PlatformApiKeyExpired: 'platform_api_key_expired',
    PostalCodeInvalid: 'postal_code_invalid',
    ProcessingError: 'processing_error',
    ProductInactive: 'product_inactive',
    RateLimit: 'rate_limit',
    ResourceAlreadyExists: 'resource_already_exists',
    ResourceMissing: 'resource_missing',
    RoutingNumberInvalid: 'routing_number_invalid',
    SecretKeyRequired: 'secret_key_required',
    SepaUnsupportedAccount: 'sepa_unsupported_account',
    ShippingCalculationFailed: 'shipping_calculation_failed',
    SkuInactive: 'sku_inactive',
    StateUnsupported: 'state_unsupported',
    TaxIdInvalid: 'tax_id_invalid',
    TaxesCalculationFailed: 'taxes_calculation_failed',
    TestmodeChargesOnly: 'testmode_charges_only',
    TlsVersionUnsupported: 'tls_version_unsupported',
    TokenAlreadyUsed: 'token_already_used',
    TokenInUse: 'token_in_use',
    TransfersNotAllowed: 'transfers_not_allowed',
    UpstreamOrderCreationFailed: 'upstream_order_creation_failed',
    UrlInvalid: 'url_invalid'
} as const;

export type FailureCodeEnum = typeof FailureCodeEnum[keyof typeof FailureCodeEnum];


/**
 * 
 * @export
 * @interface GcodeFile
 */
export interface GcodeFile {
    /**
     * 
     * @type {number}
     * @memberof GcodeFile
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof GcodeFile
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GcodeFile
     */
    'file': string;
    /**
     * 
     * @type {string}
     * @memberof GcodeFile
     */
    'hash': string;
    /**
     * 
     * @type {string}
     * @memberof GcodeFile
     */
    'created_dt': string;
    /**
     * 
     * @type {number}
     * @memberof GcodeFile
     */
    'user': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const IntervalEnum = {
    Day: 'day',
    Month: 'month',
    Week: 'week',
    Year: 'year'
} as const;

export type IntervalEnum = typeof IntervalEnum[keyof typeof IntervalEnum];


/**
 * 
 * @export
 * @enum {string}
 */

export const JanusConfigType = {
    Cloud: 'cloud',
    Edge: 'edge'
} as const;

export type JanusConfigType = typeof JanusConfigType[keyof typeof JanusConfigType];


/**
 * 
 * @export
 * @interface JanusStream
 */
export interface JanusStream {
    /**
     * 
     * @type {string}
     * @memberof JanusStream
     */
    'created_dt': string;
    /**
     * 
     * @type {string}
     * @memberof JanusStream
     */
    'updated_dt': string;
    /**
     * 
     * @type {JanusConfigType}
     * @memberof JanusStream
     */
    'config_type': JanusConfigType;
    /**
     * 
     * @type {boolean}
     * @memberof JanusStream
     */
    'active'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof JanusStream
     */
    'device': number;
    /**
     * 
     * @type {string}
     * @memberof JanusStream
     */
    'stream_secret'?: string;
    /**
     * 
     * @type {string}
     * @memberof JanusStream
     */
    'stream_pin'?: string;
    /**
     * 
     * @type {string}
     * @memberof JanusStream
     */
    'api_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof JanusStream
     */
    'admin_secret': string;
    /**
     * 
     * @type {number}
     * @memberof JanusStream
     */
    'rtp_port'?: number;
    /**
     * 
     * @type {string}
     * @memberof JanusStream
     */
    'rtp_domain': string;
    /**
     * 
     * @type {number}
     * @memberof JanusStream
     */
    'pt': number;
    /**
     * 
     * @type {string}
     * @memberof JanusStream
     */
    'rtpmap': string;
    /**
     * 
     * @type {number}
     * @memberof JanusStream
     */
    'admin_port': number;
    /**
     * 
     * @type {string}
     * @memberof JanusStream
     */
    'admin_url': string;
    /**
     * 
     * @type {number}
     * @memberof JanusStream
     */
    'api_port': number;
    /**
     * 
     * @type {string}
     * @memberof JanusStream
     */
    'api_url': string;
    /**
     * 
     * @type {string}
     * @memberof JanusStream
     */
    'api_domain': string;
    /**
     * 
     * @type {number}
     * @memberof JanusStream
     */
    'ws_port': number;
    /**
     * 
     * @type {string}
     * @memberof JanusStream
     */
    'ws_url': string;
}
/**
 * 
 * @export
 * @interface JanusStreamRequest
 */
export interface JanusStreamRequest {
    /**
     * 
     * @type {boolean}
     * @memberof JanusStreamRequest
     */
    'active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof JanusStreamRequest
     */
    'stream_secret'?: string;
    /**
     * 
     * @type {string}
     * @memberof JanusStreamRequest
     */
    'stream_pin'?: string;
    /**
     * 
     * @type {string}
     * @memberof JanusStreamRequest
     */
    'api_token'?: string;
    /**
     * 
     * @type {number}
     * @memberof JanusStreamRequest
     */
    'rtp_port'?: number;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 * Abstract class that returns a callback token based on the field given Returns a token if valid, None or a message if not.
 * @export
 * @interface MobileAuthRequest
 */
export interface MobileAuthRequest {
    /**
     * 
     * @type {string}
     * @memberof MobileAuthRequest
     */
    'mobile': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const NullEnum = {
    Null: 'null'
} as const;

export type NullEnum = typeof NullEnum[keyof typeof NullEnum];


/**
 * 
 * @export
 * @interface OctoPrintBackup
 */
export interface OctoPrintBackup {
    /**
     * 
     * @type {number}
     * @memberof OctoPrintBackup
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintBackup
     */
    'deleted': string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintBackup
     */
    'created_dt': string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintBackup
     */
    'hostname': string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintBackup
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintBackup
     */
    'octoprint_version': string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintBackup
     */
    'file': string;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintBackup
     */
    'user': number;
}
/**
 * 
 * @export
 * @interface OctoPrintEvent
 */
export interface OctoPrintEvent {
    /**
     * 
     * @type {number}
     * @memberof OctoPrintEvent
     */
    'id': number;
    /**
     * 
     * @type {OctoPrintEventModel}
     * @memberof OctoPrintEvent
     */
    'model': OctoPrintEventModel;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintEvent
     */
    'created_dt': string;
    /**
     * 
     * @type {EventSource}
     * @memberof OctoPrintEvent
     */
    'source': EventSource;
    /**
     * 
     * @type {OctoPrintEventName}
     * @memberof OctoPrintEvent
     */
    'event_name': OctoPrintEventName;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof OctoPrintEvent
     */
    'payload'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof OctoPrintEvent
     */
    'polymorphic_ctype': number;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintEvent
     */
    'user': number;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintEvent
     */
    'octoprint_server': number;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintEvent
     */
    'device': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const OctoPrintEventModel = {
    OctoPrintEvent: 'OctoPrintEvent'
} as const;

export type OctoPrintEventModel = typeof OctoPrintEventModel[keyof typeof OctoPrintEventModel];


/**
 * 
 * @export
 * @enum {string}
 */

export const OctoPrintEventName = {
    Startup: 'Startup',
    Shutdown: 'Shutdown',
    PrintProgress: 'PrintProgress',
    Connecting: 'Connecting',
    Connected: 'Connected',
    Disconnecting: 'Disconnecting',
    Disconnected: 'Disconnected',
    Error: 'Error',
    PrintStarted: 'PrintStarted',
    PrintFailed: 'PrintFailed',
    PrintDone: 'PrintDone',
    PrintCancelling: 'PrintCancelling',
    PrintCancelled: 'PrintCancelled',
    PrintPaused: 'PrintPaused',
    PrintResumed: 'PrintResumed'
} as const;

export type OctoPrintEventName = typeof OctoPrintEventName[keyof typeof OctoPrintEventName];


/**
 * 
 * @export
 * @interface OctoPrintEventRequest
 */
export interface OctoPrintEventRequest {
    /**
     * 
     * @type {OctoPrintEventModel}
     * @memberof OctoPrintEventRequest
     */
    'model': OctoPrintEventModel;
    /**
     * 
     * @type {EventSource}
     * @memberof OctoPrintEventRequest
     */
    'source': EventSource;
    /**
     * 
     * @type {OctoPrintEventName}
     * @memberof OctoPrintEventRequest
     */
    'event_name': OctoPrintEventName;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof OctoPrintEventRequest
     */
    'payload'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof OctoPrintEventRequest
     */
    'octoprint_server': number;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintEventRequest
     */
    'device': number;
}
/**
 * 
 * @export
 * @interface OctoPrintServer
 */
export interface OctoPrintServer {
    /**
     * 
     * @type {number}
     * @memberof OctoPrintServer
     */
    'id': number;
    /**
     * 
     * @type {OctoPrintSettings}
     * @memberof OctoPrintServer
     */
    'settings': OctoPrintSettings;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintServer
     */
    'octoprint_version'?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintServer
     */
    'pip_version'?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintServer
     */
    'python_version'?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintServer
     */
    'printnanny_plugin_version'?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintServer
     */
    'created_dt': string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintServer
     */
    'updated_dt': string;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintServer
     */
    'user': number;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintServer
     */
    'device': number;
}
/**
 * 
 * @export
 * @interface OctoPrintServerRequest
 */
export interface OctoPrintServerRequest {
    /**
     * 
     * @type {string}
     * @memberof OctoPrintServerRequest
     */
    'octoprint_version'?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintServerRequest
     */
    'pip_version'?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintServerRequest
     */
    'python_version'?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintServerRequest
     */
    'printnanny_plugin_version'?: string;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintServerRequest
     */
    'device': number;
}
/**
 * 
 * @export
 * @interface OctoPrintSettings
 */
export interface OctoPrintSettings {
    /**
     * 
     * @type {number}
     * @memberof OctoPrintSettings
     */
    'id': number;
    /**
     * Start OctoPrint service
     * @type {boolean}
     * @memberof OctoPrintSettings
     */
    'octoprint_enabled'?: boolean;
    /**
     * Send OctoPrint events related to print job status/progress to PrintNanny Cloud https://docs.octoprint.org/en/master/events/index.html
     * @type {boolean}
     * @memberof OctoPrintSettings
     */
    'events_enabled'?: boolean;
    /**
     * Sync Gcode files to/from PrintNanny Cloud
     * @type {boolean}
     * @memberof OctoPrintSettings
     */
    'sync_gcode'?: boolean;
    /**
     * Sync Printer Profiles to/from PrintNanny Cloud
     * @type {boolean}
     * @memberof OctoPrintSettings
     */
    'sync_printer_profiles'?: boolean;
    /**
     * Upload OctoPrint backups to PrintNanny Cloud
     * @type {boolean}
     * @memberof OctoPrintSettings
     */
    'sync_backups'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintSettings
     */
    'auto_backup'?: string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintSettings
     */
    'updated_dt': string;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintSettings
     */
    'octoprint_server': number;
}
/**
 * 
 * @export
 * @interface OctoPrintSettingsRequest
 */
export interface OctoPrintSettingsRequest {
    /**
     * Start OctoPrint service
     * @type {boolean}
     * @memberof OctoPrintSettingsRequest
     */
    'octoprint_enabled'?: boolean;
    /**
     * Send OctoPrint events related to print job status/progress to PrintNanny Cloud https://docs.octoprint.org/en/master/events/index.html
     * @type {boolean}
     * @memberof OctoPrintSettingsRequest
     */
    'events_enabled'?: boolean;
    /**
     * Sync Gcode files to/from PrintNanny Cloud
     * @type {boolean}
     * @memberof OctoPrintSettingsRequest
     */
    'sync_gcode'?: boolean;
    /**
     * Sync Printer Profiles to/from PrintNanny Cloud
     * @type {boolean}
     * @memberof OctoPrintSettingsRequest
     */
    'sync_printer_profiles'?: boolean;
    /**
     * Upload OctoPrint backups to PrintNanny Cloud
     * @type {boolean}
     * @memberof OctoPrintSettingsRequest
     */
    'sync_backups'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OctoPrintSettingsRequest
     */
    'auto_backup'?: string;
    /**
     * 
     * @type {number}
     * @memberof OctoPrintSettingsRequest
     */
    'octoprint_server': number;
}
/**
 * 
 * @export
 * @interface OctoPrinterProfile
 */
export interface OctoPrinterProfile {
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfile
     */
    'id': number;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfile
     */
    'axes_e_inverted'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfile
     */
    'axes_e_speed'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfile
     */
    'axes_x_speed'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfile
     */
    'axes_x_inverted'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfile
     */
    'axes_y_inverted'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfile
     */
    'axes_y_speed'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfile
     */
    'axes_z_inverted'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfile
     */
    'axes_z_speed'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfile
     */
    'extruder_count'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfile
     */
    'extruder_nozzle_diameter'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfile
     */
    'extruder_shared_nozzle'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfile
     */
    'heated_bed'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfile
     */
    'heated_chamber'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfile
     */
    'model'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfile
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfile
     */
    'octoprint_key': string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof OctoPrinterProfile
     */
    'volume_custom_box'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfile
     */
    'volume_depth'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfile
     */
    'volume_formfactor'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfile
     */
    'volume_height'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfile
     */
    'volume_origin'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfile
     */
    'volume_width'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfile
     */
    'created_dt': string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfile
     */
    'updated_dt': string;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfile
     */
    'user': number;
}
/**
 * 
 * @export
 * @interface OctoPrinterProfileRequest
 */
export interface OctoPrinterProfileRequest {
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfileRequest
     */
    'axes_e_inverted'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfileRequest
     */
    'axes_e_speed'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfileRequest
     */
    'axes_x_speed'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfileRequest
     */
    'axes_x_inverted'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfileRequest
     */
    'axes_y_inverted'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfileRequest
     */
    'axes_y_speed'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfileRequest
     */
    'axes_z_inverted'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfileRequest
     */
    'axes_z_speed'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfileRequest
     */
    'extruder_count'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfileRequest
     */
    'extruder_nozzle_diameter'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfileRequest
     */
    'extruder_shared_nozzle'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfileRequest
     */
    'heated_bed'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof OctoPrinterProfileRequest
     */
    'heated_chamber'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfileRequest
     */
    'model'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfileRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfileRequest
     */
    'octoprint_key': string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof OctoPrinterProfileRequest
     */
    'volume_custom_box'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfileRequest
     */
    'volume_depth'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfileRequest
     */
    'volume_formfactor'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfileRequest
     */
    'volume_height'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OctoPrinterProfileRequest
     */
    'volume_origin'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OctoPrinterProfileRequest
     */
    'volume_width'?: number | null;
}
/**
 * 
 * @export
 * @interface PaginatedAlertList
 */
export interface PaginatedAlertList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedAlertList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedAlertList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedAlertList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Alert>}
     * @memberof PaginatedAlertList
     */
    'results'?: Array<Alert>;
}
/**
 * 
 * @export
 * @interface PaginatedCloudiotDeviceList
 */
export interface PaginatedCloudiotDeviceList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedCloudiotDeviceList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCloudiotDeviceList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCloudiotDeviceList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<CloudiotDevice>}
     * @memberof PaginatedCloudiotDeviceList
     */
    'results'?: Array<CloudiotDevice>;
}
/**
 * 
 * @export
 * @interface PaginatedDeviceList
 */
export interface PaginatedDeviceList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedDeviceList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedDeviceList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedDeviceList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Device>}
     * @memberof PaginatedDeviceList
     */
    'results'?: Array<Device>;
}
/**
 * 
 * @export
 * @interface PaginatedDeviceSettingsList
 */
export interface PaginatedDeviceSettingsList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedDeviceSettingsList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedDeviceSettingsList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedDeviceSettingsList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<DeviceSettings>}
     * @memberof PaginatedDeviceSettingsList
     */
    'results'?: Array<DeviceSettings>;
}
/**
 * 
 * @export
 * @interface PaginatedGcodeFileList
 */
export interface PaginatedGcodeFileList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedGcodeFileList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedGcodeFileList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedGcodeFileList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<GcodeFile>}
     * @memberof PaginatedGcodeFileList
     */
    'results'?: Array<GcodeFile>;
}
/**
 * 
 * @export
 * @interface PaginatedJanusStreamList
 */
export interface PaginatedJanusStreamList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedJanusStreamList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedJanusStreamList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedJanusStreamList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<JanusStream>}
     * @memberof PaginatedJanusStreamList
     */
    'results'?: Array<JanusStream>;
}
/**
 * 
 * @export
 * @interface PaginatedOctoPrintBackupList
 */
export interface PaginatedOctoPrintBackupList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedOctoPrintBackupList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOctoPrintBackupList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOctoPrintBackupList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<OctoPrintBackup>}
     * @memberof PaginatedOctoPrintBackupList
     */
    'results'?: Array<OctoPrintBackup>;
}
/**
 * 
 * @export
 * @interface PaginatedOctoPrintServerList
 */
export interface PaginatedOctoPrintServerList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedOctoPrintServerList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOctoPrintServerList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOctoPrintServerList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<OctoPrintServer>}
     * @memberof PaginatedOctoPrintServerList
     */
    'results'?: Array<OctoPrintServer>;
}
/**
 * 
 * @export
 * @interface PaginatedOctoPrintSettingsList
 */
export interface PaginatedOctoPrintSettingsList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedOctoPrintSettingsList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOctoPrintSettingsList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOctoPrintSettingsList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<OctoPrintSettings>}
     * @memberof PaginatedOctoPrintSettingsList
     */
    'results'?: Array<OctoPrintSettings>;
}
/**
 * 
 * @export
 * @interface PaginatedOctoPrinterProfileList
 */
export interface PaginatedOctoPrinterProfileList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedOctoPrinterProfileList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOctoPrinterProfileList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOctoPrinterProfileList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<OctoPrinterProfile>}
     * @memberof PaginatedOctoPrinterProfileList
     */
    'results'?: Array<OctoPrinterProfile>;
}
/**
 * 
 * @export
 * @interface PaginatedPolymorphicCommandList
 */
export interface PaginatedPolymorphicCommandList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPolymorphicCommandList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPolymorphicCommandList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPolymorphicCommandList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<PolymorphicCommand>}
     * @memberof PaginatedPolymorphicCommandList
     */
    'results'?: Array<PolymorphicCommand>;
}
/**
 * 
 * @export
 * @interface PaginatedPolymorphicEventList
 */
export interface PaginatedPolymorphicEventList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPolymorphicEventList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPolymorphicEventList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPolymorphicEventList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<PolymorphicEvent>}
     * @memberof PaginatedPolymorphicEventList
     */
    'results'?: Array<PolymorphicEvent>;
}
/**
 * 
 * @export
 * @interface PaginatedPublicKeyList
 */
export interface PaginatedPublicKeyList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPublicKeyList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPublicKeyList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPublicKeyList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<PublicKey>}
     * @memberof PaginatedPublicKeyList
     */
    'results'?: Array<PublicKey>;
}
/**
 * 
 * @export
 * @interface PaginatedSystemInfoList
 */
export interface PaginatedSystemInfoList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedSystemInfoList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSystemInfoList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSystemInfoList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<SystemInfo>}
     * @memberof PaginatedSystemInfoList
     */
    'results'?: Array<SystemInfo>;
}
/**
 * Do not use underscores in this serializer - linitation of Firebase Cloud Messaging
 * @export
 * @interface Partner3DGeeksAlert
 */
export interface Partner3DGeeksAlert {
    /**
     * 
     * @type {string}
     * @memberof Partner3DGeeksAlert
     */
    'event': string;
    /**
     * 
     * @type {string}
     * @memberof Partner3DGeeksAlert
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof Partner3DGeeksAlert
     */
    'printer': string;
    /**
     * 
     * @type {string}
     * @memberof Partner3DGeeksAlert
     */
    'print': string;
    /**
     * 
     * @type {number}
     * @memberof Partner3DGeeksAlert
     */
    'currentTime': number;
    /**
     * 
     * @type {number}
     * @memberof Partner3DGeeksAlert
     */
    'timeLeft': number;
    /**
     * 
     * @type {number}
     * @memberof Partner3DGeeksAlert
     */
    'percent': number;
    /**
     * 
     * @type {string}
     * @memberof Partner3DGeeksAlert
     */
    'image': string | null;
    /**
     * 
     * @type {string}
     * @memberof Partner3DGeeksAlert
     */
    'action': string;
}
/**
 * Please do not include any personally-identifying info or sensitive info in partner serializers
 * @export
 * @interface Partner3DGeeksMetadata
 */
export interface Partner3DGeeksMetadata {
    /**
     * 
     * @type {string}
     * @memberof Partner3DGeeksMetadata
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Partner3DGeeksMetadata
     */
    'model': string;
    /**
     * 
     * @type {string}
     * @memberof Partner3DGeeksMetadata
     */
    'platform': string;
    /**
     * 
     * @type {string}
     * @memberof Partner3DGeeksMetadata
     */
    'octoprint_version': string;
    /**
     * 
     * @type {string}
     * @memberof Partner3DGeeksMetadata
     */
    'print_nanny_plugin_version': string;
    /**
     * 
     * @type {string}
     * @memberof Partner3DGeeksMetadata
     */
    'print_nanny_client_version': string;
    /**
     * 
     * @type {string}
     * @memberof Partner3DGeeksMetadata
     */
    'verified': string;
}
/**
 * 
 * @export
 * @interface PasswordChangeRequest
 */
export interface PasswordChangeRequest {
    /**
     * 
     * @type {string}
     * @memberof PasswordChangeRequest
     */
    'new_password1': string;
    /**
     * 
     * @type {string}
     * @memberof PasswordChangeRequest
     */
    'new_password2': string;
}
/**
 * Serializer for confirming a password reset attempt.
 * @export
 * @interface PasswordResetConfirmRequest
 */
export interface PasswordResetConfirmRequest {
    /**
     * 
     * @type {string}
     * @memberof PasswordResetConfirmRequest
     */
    'new_password1': string;
    /**
     * 
     * @type {string}
     * @memberof PasswordResetConfirmRequest
     */
    'new_password2': string;
    /**
     * 
     * @type {string}
     * @memberof PasswordResetConfirmRequest
     */
    'uid': string;
    /**
     * 
     * @type {string}
     * @memberof PasswordResetConfirmRequest
     */
    'token': string;
}
/**
 * Serializer for requesting a password reset e-mail.
 * @export
 * @interface PasswordResetRequest
 */
export interface PasswordResetRequest {
    /**
     * 
     * @type {string}
     * @memberof PasswordResetRequest
     */
    'email': string;
}
/**
 * Serializer used in POST /api/alerts/seen and POST /api/alerts/dismiss requests
 * @export
 * @interface PatchedAlertBulkRequestRequest
 */
export interface PatchedAlertBulkRequestRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedAlertBulkRequestRequest
     */
    'ids'?: Array<number>;
}
/**
 * 
 * @export
 * @interface PatchedAlertRequest
 */
export interface PatchedAlertRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedAlertRequest
     */
    'octoprint_device'?: number | null;
    /**
     * 
     * @type {EventTypeEnum}
     * @memberof PatchedAlertRequest
     */
    'event_type'?: EventTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedAlertRequest
     */
    'seen'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedAlertRequest
     */
    'sent'?: boolean;
}
/**
 * 
 * @export
 * @interface PatchedAlertSettingsRequest
 */
export interface PatchedAlertSettingsRequest {
    /**
     * 
     * @type {Array<AlertMethodsEnum>}
     * @memberof PatchedAlertSettingsRequest
     */
    'alert_methods'?: Array<AlertMethodsEnum>;
    /**
     * 
     * @type {Array<EventTypesEnum>}
     * @memberof PatchedAlertSettingsRequest
     */
    'event_types'?: Array<EventTypesEnum>;
    /**
     * Send notifications to a Discord channel. Please check out this guide to <a href=\'https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks\'>generate a webhook</a> url and paste it here.
     * @type {string}
     * @memberof PatchedAlertSettingsRequest
     */
    'discord_webhook'?: string | null;
    /**
     * Progress notification interval. Example: 25 will notify you at 25%, 50%, 75%, and 100% progress
     * @type {number}
     * @memberof PatchedAlertSettingsRequest
     */
    'print_progress_percent'?: number;
}
/**
 * 
 * @export
 * @interface PatchedCloudiotDeviceRequest
 */
export interface PatchedCloudiotDeviceRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedCloudiotDeviceRequest
     */
    'public_key'?: number;
}
/**
 * 
 * @export
 * @interface PatchedDeviceRequest
 */
export interface PatchedDeviceRequest {
    /**
     * Please enter the hostname you set in the Raspberry Pi Imager\'s Advanced Options menu (without .local extension)
     * @type {string}
     * @memberof PatchedDeviceRequest
     */
    'hostname'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedDeviceRequest
     */
    'fqdn'?: string;
}
/**
 * 
 * @export
 * @interface PatchedDeviceSettingsRequest
 */
export interface PatchedDeviceSettingsRequest {
    /**
     * Send camera stream to PrintNanny Cloud
     * @type {boolean}
     * @memberof PatchedDeviceSettingsRequest
     */
    'cloud_video_enabled'?: boolean;
    /**
     * Send telemetry and performance profiling data to PrintNanny Cloud
     * @type {boolean}
     * @memberof PatchedDeviceSettingsRequest
     */
    'telemetry_enabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PatchedDeviceSettingsRequest
     */
    'device'?: number;
}
/**
 * 
 * @export
 * @interface PatchedJanusStreamRequest
 */
export interface PatchedJanusStreamRequest {
    /**
     * 
     * @type {boolean}
     * @memberof PatchedJanusStreamRequest
     */
    'active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedJanusStreamRequest
     */
    'stream_secret'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedJanusStreamRequest
     */
    'stream_pin'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedJanusStreamRequest
     */
    'api_token'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedJanusStreamRequest
     */
    'rtp_port'?: number;
}
/**
 * 
 * @export
 * @interface PatchedOctoPrintServerRequest
 */
export interface PatchedOctoPrintServerRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrintServerRequest
     */
    'octoprint_version'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrintServerRequest
     */
    'pip_version'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrintServerRequest
     */
    'python_version'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrintServerRequest
     */
    'printnanny_plugin_version'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrintServerRequest
     */
    'device'?: number;
}
/**
 * 
 * @export
 * @interface PatchedOctoPrintSettingsRequest
 */
export interface PatchedOctoPrintSettingsRequest {
    /**
     * Start OctoPrint service
     * @type {boolean}
     * @memberof PatchedOctoPrintSettingsRequest
     */
    'octoprint_enabled'?: boolean;
    /**
     * Send OctoPrint events related to print job status/progress to PrintNanny Cloud https://docs.octoprint.org/en/master/events/index.html
     * @type {boolean}
     * @memberof PatchedOctoPrintSettingsRequest
     */
    'events_enabled'?: boolean;
    /**
     * Sync Gcode files to/from PrintNanny Cloud
     * @type {boolean}
     * @memberof PatchedOctoPrintSettingsRequest
     */
    'sync_gcode'?: boolean;
    /**
     * Sync Printer Profiles to/from PrintNanny Cloud
     * @type {boolean}
     * @memberof PatchedOctoPrintSettingsRequest
     */
    'sync_printer_profiles'?: boolean;
    /**
     * Upload OctoPrint backups to PrintNanny Cloud
     * @type {boolean}
     * @memberof PatchedOctoPrintSettingsRequest
     */
    'sync_backups'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrintSettingsRequest
     */
    'auto_backup'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrintSettingsRequest
     */
    'octoprint_server'?: number;
}
/**
 * 
 * @export
 * @interface PatchedOctoPrinterProfileRequest
 */
export interface PatchedOctoPrinterProfileRequest {
    /**
     * 
     * @type {boolean}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'axes_e_inverted'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'axes_e_speed'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'axes_x_speed'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'axes_x_inverted'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'axes_y_inverted'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'axes_y_speed'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'axes_z_inverted'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'axes_z_speed'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'extruder_count'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'extruder_nozzle_diameter'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'extruder_shared_nozzle'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'heated_bed'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'heated_chamber'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'model'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'octoprint_key'?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'volume_custom_box'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'volume_depth'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'volume_formfactor'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'volume_height'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'volume_origin'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedOctoPrinterProfileRequest
     */
    'volume_width'?: number | null;
}
/**
 * 
 * @export
 * @interface PatchedPublicKeyRequest
 */
export interface PatchedPublicKeyRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedPublicKeyRequest
     */
    'pem'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedPublicKeyRequest
     */
    'cipher'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedPublicKeyRequest
     */
    'length'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedPublicKeyRequest
     */
    'fingerprint'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedPublicKeyRequest
     */
    'device'?: number;
}
/**
 * 
 * @export
 * @interface PatchedSystemInfoRequest
 */
export interface PatchedSystemInfoRequest {
    /**
     * Populated from /etc/machine-id
     * @type {string}
     * @memberof PatchedSystemInfoRequest
     */
    'machine_id'?: string;
    /**
     * Populated from /proc/cpuinfo REVISION
     * @type {string}
     * @memberof PatchedSystemInfoRequest
     */
    'revision'?: string;
    /**
     * Populated from /proc/cpuinfo MODEL
     * @type {string}
     * @memberof PatchedSystemInfoRequest
     */
    'model'?: string;
    /**
     * Populated from /proc/cpuinfo SERIAL
     * @type {string}
     * @memberof PatchedSystemInfoRequest
     */
    'serial'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedSystemInfoRequest
     */
    'cores'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedSystemInfoRequest
     */
    'ram'?: number;
    /**
     * PrintNanny OS VERSION_ID from /etc/os-release
     * @type {string}
     * @memberof PatchedSystemInfoRequest
     */
    'os_version_id'?: string;
    /**
     * PrintNanny OS BUILD_ID from /etc/os-release
     * @type {string}
     * @memberof PatchedSystemInfoRequest
     */
    'os_build_id'?: string;
    /**
     * PrintNanny OS VARIANT_ID from /etc/os-release
     * @type {string}
     * @memberof PatchedSystemInfoRequest
     */
    'os_variant_id'?: string;
    /**
     * Full contents of /etc/os-release in key:value format
     * @type {{ [key: string]: any; }}
     * @memberof PatchedSystemInfoRequest
     */
    'os_release_json'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof PatchedSystemInfoRequest
     */
    'device'?: number;
}
/**
 * 
 * @export
 * @interface PatchedUserRequest
 */
export interface PatchedUserRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedUserRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedUserRequest
     */
    'first_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedUserRequest
     */
    'last_name'?: string | null;
}
/**
 * @type PolymorphicCommand
 * @export
 */
export type PolymorphicCommand = WebRTCCommand;

/**
 * @type PolymorphicCommandCreateRequest
 * @export
 */
export type PolymorphicCommandCreateRequest = WebRTCCommandCreateRequest;

/**
 * @type PolymorphicEvent
 * @export
 */
export type PolymorphicEvent = OctoPrintEvent | TestEvent | WebRTCCommand | WebRTCEvent;

/**
 * @type PolymorphicEventCreateRequest
 * @export
 */
export type PolymorphicEventCreateRequest = OctoPrintEventRequest | TestEventRequest | WebRTCCommandCreateRequest | WebRTCEventRequest;

/**
 * 
 * @export
 * @interface PrintNannyApiConfig
 */
export interface PrintNannyApiConfig {
    /**
     * 
     * @type {string}
     * @memberof PrintNannyApiConfig
     */
    'bearer_access_token': string | null;
    /**
     * 
     * @type {string}
     * @memberof PrintNannyApiConfig
     */
    'base_path': string;
    /**
     * 
     * @type {string}
     * @memberof PrintNannyApiConfig
     */
    'static_url': string;
    /**
     * 
     * @type {string}
     * @memberof PrintNannyApiConfig
     */
    'dashboard_url': string;
}
/**
 * 
 * @export
 * @interface PublicKey
 */
export interface PublicKey {
    /**
     * 
     * @type {number}
     * @memberof PublicKey
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PublicKey
     */
    'pem': string;
    /**
     * 
     * @type {string}
     * @memberof PublicKey
     */
    'cipher': string;
    /**
     * 
     * @type {number}
     * @memberof PublicKey
     */
    'length': number;
    /**
     * 
     * @type {string}
     * @memberof PublicKey
     */
    'fingerprint': string;
    /**
     * 
     * @type {string}
     * @memberof PublicKey
     */
    'created_dt': string;
    /**
     * 
     * @type {string}
     * @memberof PublicKey
     */
    'updated_dt': string;
    /**
     * 
     * @type {number}
     * @memberof PublicKey
     */
    'device': number;
}
/**
 * 
 * @export
 * @interface PublicKeyRequest
 */
export interface PublicKeyRequest {
    /**
     * 
     * @type {string}
     * @memberof PublicKeyRequest
     */
    'pem': string;
    /**
     * 
     * @type {string}
     * @memberof PublicKeyRequest
     */
    'cipher': string;
    /**
     * 
     * @type {number}
     * @memberof PublicKeyRequest
     */
    'length': number;
    /**
     * 
     * @type {string}
     * @memberof PublicKeyRequest
     */
    'fingerprint': string;
    /**
     * 
     * @type {number}
     * @memberof PublicKeyRequest
     */
    'device': number;
}
/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'password1': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'password2': string;
}
/**
 * 
 * @export
 * @interface ResendEmailVerificationRequest
 */
export interface ResendEmailVerificationRequest {
    /**
     * 
     * @type {string}
     * @memberof ResendEmailVerificationRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface RestAuthDetail
 */
export interface RestAuthDetail {
    /**
     * 
     * @type {string}
     * @memberof RestAuthDetail
     */
    'detail': string;
}
/**
 * 
 * @export
 * @interface StripeCharge
 */
export interface StripeCharge {
    /**
     * 
     * @type {number}
     * @memberof StripeCharge
     */
    'djstripe_id': number;
    /**
     * 
     * @type {string}
     * @memberof StripeCharge
     */
    'djstripe_created': string;
    /**
     * 
     * @type {string}
     * @memberof StripeCharge
     */
    'djstripe_updated': string;
    /**
     * 
     * @type {string}
     * @memberof StripeCharge
     */
    'id': string;
    /**
     * Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.
     * @type {boolean}
     * @memberof StripeCharge
     */
    'livemode'?: boolean | null;
    /**
     * The datetime this object was created in stripe.
     * @type {string}
     * @memberof StripeCharge
     */
    'created'?: string | null;
    /**
     * A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.
     * @type {{ [key: string]: any; }}
     * @memberof StripeCharge
     */
    'metadata'?: { [key: string]: any; } | null;
    /**
     * A description of this object.
     * @type {string}
     * @memberof StripeCharge
     */
    'description'?: string | null;
    /**
     * Amount charged (as decimal).
     * @type {string}
     * @memberof StripeCharge
     */
    'amount': string;
    /**
     * Amount (as decimal) captured (can be less than the amount attribute on the charge if a partial capture was issued).
     * @type {string}
     * @memberof StripeCharge
     */
    'amount_captured'?: string | null;
    /**
     * Amount (as decimal) refunded (can be less than the amount attribute on the charge if a partial refund was issued).
     * @type {string}
     * @memberof StripeCharge
     */
    'amount_refunded': string;
    /**
     * ID of the Connect application that created the charge.
     * @type {string}
     * @memberof StripeCharge
     */
    'application'?: string;
    /**
     * The amount (as decimal) of the application fee (if any) requested for the charge.
     * @type {string}
     * @memberof StripeCharge
     */
    'application_fee_amount'?: string | null;
    /**
     * Billing information associated with the PaymentMethod at the time of the transaction.
     * @type {{ [key: string]: any; }}
     * @memberof StripeCharge
     */
    'billing_details'?: { [key: string]: any; } | null;
    /**
     * The full statement descriptor that is passed to card networks, and that is displayed on your customers\' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined.
     * @type {string}
     * @memberof StripeCharge
     */
    'calculated_statement_descriptor'?: string;
    /**
     * If the charge was created without capturing, this boolean represents whether or not it is still uncaptured or has since been captured.
     * @type {boolean}
     * @memberof StripeCharge
     */
    'captured'?: boolean;
    /**
     * The currency in which the charge was made.
     * @type {string}
     * @memberof StripeCharge
     */
    'currency': string;
    /**
     * Whether the charge has been disputed.
     * @type {boolean}
     * @memberof StripeCharge
     */
    'disputed'?: boolean;
    /**
     * Error code explaining reason for charge failure if available.
     * @type {FailureCodeEnum | BlankEnum}
     * @memberof StripeCharge
     */
    'failure_code'?: FailureCodeEnum | BlankEnum;
    /**
     * Message to user further explaining reason for charge failure if available.
     * @type {string}
     * @memberof StripeCharge
     */
    'failure_message'?: string;
    /**
     * Hash with information on fraud assessments for the charge.
     * @type {{ [key: string]: any; }}
     * @memberof StripeCharge
     */
    'fraud_details'?: { [key: string]: any; } | null;
    /**
     * Details about whether or not the payment was accepted, and why.
     * @type {{ [key: string]: any; }}
     * @memberof StripeCharge
     */
    'outcome'?: { [key: string]: any; } | null;
    /**
     * True if the charge succeeded, or was successfully authorized for later capture, False otherwise.
     * @type {boolean}
     * @memberof StripeCharge
     */
    'paid'?: boolean;
    /**
     * Details about the payment method at the time of the transaction.
     * @type {{ [key: string]: any; }}
     * @memberof StripeCharge
     */
    'payment_method_details'?: { [key: string]: any; } | null;
    /**
     * The email address that the receipt for this charge was sent to.
     * @type {string}
     * @memberof StripeCharge
     */
    'receipt_email'?: string;
    /**
     * The transaction number that appears on email receipts sent for this charge.
     * @type {string}
     * @memberof StripeCharge
     */
    'receipt_number'?: string;
    /**
     * This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt.
     * @type {string}
     * @memberof StripeCharge
     */
    'receipt_url'?: string;
    /**
     * Whether or not the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.
     * @type {boolean}
     * @memberof StripeCharge
     */
    'refunded'?: boolean;
    /**
     * Shipping information for the charge
     * @type {{ [key: string]: any; }}
     * @memberof StripeCharge
     */
    'shipping'?: { [key: string]: any; } | null;
    /**
     * For card charges, use statement_descriptor_suffix instead. Otherwise, you can use this value as the complete description of a charge on your customers\' statements. Must contain at least one letter, maximum 22 characters.
     * @type {string}
     * @memberof StripeCharge
     */
    'statement_descriptor'?: string | null;
    /**
     * Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that\'s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
     * @type {string}
     * @memberof StripeCharge
     */
    'statement_descriptor_suffix'?: string | null;
    /**
     * The status of the payment.
     * @type {StripeChargeStatusEnum}
     * @memberof StripeCharge
     */
    'status': StripeChargeStatusEnum;
    /**
     * An optional dictionary including the account to automatically transfer to as part of a destination charge.
     * @type {{ [key: string]: any; }}
     * @memberof StripeCharge
     */
    'transfer_data'?: { [key: string]: any; } | null;
    /**
     * A string that identifies this transaction as part of a group.
     * @type {string}
     * @memberof StripeCharge
     */
    'transfer_group'?: string | null;
    /**
     * The Stripe Account this object belongs to.
     * @type {string}
     * @memberof StripeCharge
     */
    'djstripe_owner_account'?: string | null;
    /**
     * The application fee (if any) for the charge.
     * @type {string}
     * @memberof StripeCharge
     */
    'application_fee'?: string | null;
    /**
     * The balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).
     * @type {string}
     * @memberof StripeCharge
     */
    'balance_transaction'?: string | null;
    /**
     * The customer associated with this charge.
     * @type {string}
     * @memberof StripeCharge
     */
    'customer'?: string | null;
    /**
     * Details about the dispute if the charge has been disputed.
     * @type {string}
     * @memberof StripeCharge
     */
    'dispute'?: string | null;
    /**
     * The invoice this charge is for if one exists.
     * @type {string}
     * @memberof StripeCharge
     */
    'invoice'?: string | null;
    /**
     * The account (if any) the charge was made on behalf of without triggering an automatic transfer.
     * @type {string}
     * @memberof StripeCharge
     */
    'on_behalf_of'?: string | null;
    /**
     * PaymentIntent associated with this charge, if one exists.
     * @type {string}
     * @memberof StripeCharge
     */
    'payment_intent'?: string | null;
    /**
     * PaymentMethod used in this charge.
     * @type {string}
     * @memberof StripeCharge
     */
    'payment_method'?: string | null;
    /**
     * The source used for this charge.
     * @type {string}
     * @memberof StripeCharge
     */
    'source'?: string | null;
    /**
     * The transfer which created this charge. Only present if the charge came from another Stripe account.
     * @type {string}
     * @memberof StripeCharge
     */
    'source_transfer'?: string | null;
    /**
     * The transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter).
     * @type {string}
     * @memberof StripeCharge
     */
    'transfer'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const StripeChargeStatusEnum = {
    Failed: 'failed',
    Pending: 'pending',
    Succeeded: 'succeeded'
} as const;

export type StripeChargeStatusEnum = typeof StripeChargeStatusEnum[keyof typeof StripeChargeStatusEnum];


/**
 * 
 * @export
 * @interface StripeCustomer
 */
export interface StripeCustomer {
    /**
     * 
     * @type {number}
     * @memberof StripeCustomer
     */
    'djstripe_id': number;
    /**
     * 
     * @type {string}
     * @memberof StripeCustomer
     */
    'djstripe_created': string;
    /**
     * 
     * @type {string}
     * @memberof StripeCustomer
     */
    'djstripe_updated': string;
    /**
     * 
     * @type {string}
     * @memberof StripeCustomer
     */
    'id': string;
    /**
     * Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.
     * @type {boolean}
     * @memberof StripeCustomer
     */
    'livemode'?: boolean | null;
    /**
     * The datetime this object was created in stripe.
     * @type {string}
     * @memberof StripeCustomer
     */
    'created'?: string | null;
    /**
     * A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.
     * @type {{ [key: string]: any; }}
     * @memberof StripeCustomer
     */
    'metadata'?: { [key: string]: any; } | null;
    /**
     * A description of this object.
     * @type {string}
     * @memberof StripeCustomer
     */
    'description'?: string | null;
    /**
     * The customer\'s address.
     * @type {{ [key: string]: any; }}
     * @memberof StripeCustomer
     */
    'address'?: { [key: string]: any; } | null;
    /**
     * Current balance (in cents), if any, being stored on the customer\'s account. If negative, the customer has credit to apply to the next invoice. If positive, the customer has an amount owed that will be added to the next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account for recurring billing purposes (i.e., subscriptions, invoices, invoice items).
     * @type {number}
     * @memberof StripeCustomer
     */
    'balance'?: number | null;
    /**
     * The currency the customer can be charged in for recurring billing purposes
     * @type {string}
     * @memberof StripeCustomer
     */
    'currency'?: string;
    /**
     * Whether or not the latest charge for the customer\'s latest invoice has failed.
     * @type {boolean}
     * @memberof StripeCustomer
     */
    'delinquent'?: boolean | null;
    /**
     * Whether the Customer instance has been deleted upstream in Stripe or not.
     * @type {boolean}
     * @memberof StripeCustomer
     */
    'deleted'?: boolean | null;
    /**
     * If a coupon is present, the date at which it was applied.
     * @type {string}
     * @memberof StripeCustomer
     */
    'coupon_start': string;
    /**
     * If a coupon is present and has a limited duration, the date that the discount will end.
     * @type {string}
     * @memberof StripeCustomer
     */
    'coupon_end': string;
    /**
     * 
     * @type {string}
     * @memberof StripeCustomer
     */
    'email'?: string;
    /**
     * The prefix for the customer used to generate unique invoice numbers.
     * @type {string}
     * @memberof StripeCustomer
     */
    'invoice_prefix'?: string;
    /**
     * The customer\'s default invoice settings.
     * @type {{ [key: string]: any; }}
     * @memberof StripeCustomer
     */
    'invoice_settings'?: { [key: string]: any; } | null;
    /**
     * The customer\'s full name or business name.
     * @type {string}
     * @memberof StripeCustomer
     */
    'name'?: string;
    /**
     * The customer\'s phone number.
     * @type {string}
     * @memberof StripeCustomer
     */
    'phone'?: string;
    /**
     * The customer\'s preferred locales (languages), ordered by preference.
     * @type {{ [key: string]: any; }}
     * @memberof StripeCustomer
     */
    'preferred_locales'?: { [key: string]: any; } | null;
    /**
     * Shipping information associated with the customer.
     * @type {{ [key: string]: any; }}
     * @memberof StripeCustomer
     */
    'shipping'?: { [key: string]: any; } | null;
    /**
     * Describes the customer\'s tax exemption status. When set to reverse, invoice and receipt PDFs include the text \"Reverse charge\".
     * @type {TaxExemptEnum}
     * @memberof StripeCustomer
     */
    'tax_exempt'?: TaxExemptEnum;
    /**
     * 
     * @type {string}
     * @memberof StripeCustomer
     */
    'date_purged': string;
    /**
     * The Stripe Account this object belongs to.
     * @type {string}
     * @memberof StripeCustomer
     */
    'djstripe_owner_account': string | null;
    /**
     * 
     * @type {string}
     * @memberof StripeCustomer
     */
    'default_source'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof StripeCustomer
     */
    'coupon'?: number | null;
    /**
     * default payment method used for subscriptions and invoices for the customer.
     * @type {string}
     * @memberof StripeCustomer
     */
    'default_payment_method'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof StripeCustomer
     */
    'subscriber': number | null;
}
/**
 * 
 * @export
 * @interface StripeEvent
 */
export interface StripeEvent {
    /**
     * 
     * @type {number}
     * @memberof StripeEvent
     */
    'djstripe_id': number;
    /**
     * 
     * @type {string}
     * @memberof StripeEvent
     */
    'djstripe_created': string;
    /**
     * 
     * @type {string}
     * @memberof StripeEvent
     */
    'djstripe_updated': string;
    /**
     * 
     * @type {string}
     * @memberof StripeEvent
     */
    'id': string;
    /**
     * Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.
     * @type {boolean}
     * @memberof StripeEvent
     */
    'livemode'?: boolean | null;
    /**
     * The datetime this object was created in stripe.
     * @type {string}
     * @memberof StripeEvent
     */
    'created'?: string | null;
    /**
     * A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.
     * @type {{ [key: string]: any; }}
     * @memberof StripeEvent
     */
    'metadata'?: { [key: string]: any; } | null;
    /**
     * A description of this object.
     * @type {string}
     * @memberof StripeEvent
     */
    'description'?: string | null;
    /**
     * the API version at which the event data was rendered. Blank for old entries only, all new entries will have this value
     * @type {string}
     * @memberof StripeEvent
     */
    'api_version'?: string;
    /**
     * data received at webhook. data should be considered to be garbage until validity check is run and valid flag is set
     * @type {{ [key: string]: any; }}
     * @memberof StripeEvent
     */
    'data': { [key: string]: any; };
    /**
     * Information about the request that triggered this event, for traceability purposes. If empty string then this is an old entry without that data. If Null then this is not an old entry, but a Stripe \'automated\' event with no associated request.
     * @type {string}
     * @memberof StripeEvent
     */
    'request_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeEvent
     */
    'idempotency_key'?: string;
    /**
     * Stripe\'s event description code
     * @type {string}
     * @memberof StripeEvent
     */
    'type': string;
    /**
     * The Stripe Account this object belongs to.
     * @type {string}
     * @memberof StripeEvent
     */
    'djstripe_owner_account'?: string | null;
}
/**
 * 
 * @export
 * @interface StripeNextInvoice
 */
export interface StripeNextInvoice {
    /**
     * 
     * @type {number}
     * @memberof StripeNextInvoice
     */
    'djstripe_id': number;
    /**
     * 
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'djstripe_created': string;
    /**
     * 
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'djstripe_updated': string;
    /**
     * Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.
     * @type {boolean}
     * @memberof StripeNextInvoice
     */
    'livemode'?: boolean | null;
    /**
     * The datetime this object was created in stripe.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'created'?: string | null;
    /**
     * A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.
     * @type {{ [key: string]: any; }}
     * @memberof StripeNextInvoice
     */
    'metadata'?: { [key: string]: any; } | null;
    /**
     * A description of this object.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'description'?: string | null;
    /**
     * The country of the business associated with this invoice, most often the business creating the invoice.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'account_country'?: string;
    /**
     * The public name of the business associated with this invoice, most often the business creating the invoice.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'account_name'?: string;
    /**
     * Final amount due (as decimal) at this time for this invoice. If the invoice\'s total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the amount_due may be 0. If there is a positive starting_balance for the invoice (the customer owes money), the amount_due will also take that into account. The charge that gets generated for the invoice will be for the amount specified in amount_due.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'amount_due': string;
    /**
     * The amount, (as decimal), that was paid.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'amount_paid'?: string | null;
    /**
     * The amount remaining, (as decimal), that is due.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'amount_remaining'?: string | null;
    /**
     * The fee (as decimal) that will be applied to the invoice and transferred to the application owner\'s Stripe account when the invoice is paid.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'application_fee_amount'?: string | null;
    /**
     * Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.
     * @type {number}
     * @memberof StripeNextInvoice
     */
    'attempt_count': number;
    /**
     * Whether or not an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the ``invoice.created`` webhook, for example, so you might not want to display that invoice as unpaid to your users.
     * @type {boolean}
     * @memberof StripeNextInvoice
     */
    'attempted'?: boolean;
    /**
     * Controls whether Stripe will perform automatic collection of the invoice. When false, the invoice\'s state will not automatically advance without an explicit action.
     * @type {boolean}
     * @memberof StripeNextInvoice
     */
    'auto_advance'?: boolean | null;
    /**
     * Indicates the reason why the invoice was created. subscription_cycle indicates an invoice created by a subscription advancing into a new period. subscription_create indicates an invoice created due to creating a subscription. subscription_update indicates an invoice created due to updating a subscription. subscription is set for all old invoices to indicate either a change to a subscription or a period advancement. manual is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The upcoming value is reserved for simulated invoices per the upcoming invoice endpoint. subscription_threshold indicates an invoice created due to a billing threshold being reached.
     * @type {BillingReasonEnum | BlankEnum}
     * @memberof StripeNextInvoice
     */
    'billing_reason'?: BillingReasonEnum | BlankEnum;
    /**
     * When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.
     * @type {CollectionMethodEnum | NullEnum}
     * @memberof StripeNextInvoice
     */
    'collection_method'?: CollectionMethodEnum | NullEnum | null;
    /**
     * Three-letter ISO currency code
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'currency': string;
    /**
     * The customer\'s address. Until the invoice is finalized, this field will equal customer.address. Once the invoice is finalized, this field will no longer be updated.
     * @type {{ [key: string]: any; }}
     * @memberof StripeNextInvoice
     */
    'customer_address'?: { [key: string]: any; } | null;
    /**
     * The customer\'s email. Until the invoice is finalized, this field will equal customer.email. Once the invoice is finalized, this field will no longer be updated.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'customer_email'?: string;
    /**
     * The customer\'s name. Until the invoice is finalized, this field will equal customer.name. Once the invoice is finalized, this field will no longer be updated.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'customer_name'?: string;
    /**
     * The customer\'s phone number. Until the invoice is finalized, this field will equal customer.phone. Once the invoice is finalized, this field will no longer be updated.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'customer_phone'?: string;
    /**
     * The customer\'s shipping information. Until the invoice is finalized, this field will equal customer.shipping. Once the invoice is finalized, this field will no longer be updated.
     * @type {{ [key: string]: any; }}
     * @memberof StripeNextInvoice
     */
    'customer_shipping'?: { [key: string]: any; } | null;
    /**
     * The customer\'s tax exempt status. Until the invoice is finalized, this field will equal customer.tax_exempt. Once the invoice is finalized, this field will no longer be updated.
     * @type {CustomerTaxExemptEnum}
     * @memberof StripeNextInvoice
     */
    'customer_tax_exempt'?: CustomerTaxExemptEnum;
    /**
     * Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis.
     * @type {{ [key: string]: any; }}
     * @memberof StripeNextInvoice
     */
    'discount'?: { [key: string]: any; } | null;
    /**
     * The date on which payment for this invoice is due. This value will be null for invoices where billing=charge_automatically.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'due_date'?: string | null;
    /**
     * Ending customer balance (in cents) after attempting to pay invoice. If the invoice has not been attempted yet, this will be null.
     * @type {number}
     * @memberof StripeNextInvoice
     */
    'ending_balance'?: number | null;
    /**
     * Footer displayed on the invoice.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'footer'?: string;
    /**
     * The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been frozen yet, this will be null.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'hosted_invoice_url'?: string;
    /**
     * The link to download the PDF for the invoice. If the invoice has not been frozen yet, this will be null.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'invoice_pdf'?: string;
    /**
     * The time at which payment will next be attempted.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'next_payment_attempt'?: string | null;
    /**
     * A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer\'s unique invoice_prefix if it is specified.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'number'?: string;
    /**
     * Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer\'s account balance.
     * @type {boolean}
     * @memberof StripeNextInvoice
     */
    'paid'?: boolean;
    /**
     * End of the usage period during which invoice items were added to this invoice.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'period_end': string;
    /**
     * Start of the usage period during which invoice items were added to this invoice.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'period_start': string;
    /**
     * Total amount (in cents) of all post-payment credit notes issued for this invoice.
     * @type {number}
     * @memberof StripeNextInvoice
     */
    'post_payment_credit_notes_amount'?: number | null;
    /**
     * Total amount (in cents) of all pre-payment credit notes issued for this invoice.
     * @type {number}
     * @memberof StripeNextInvoice
     */
    'pre_payment_credit_notes_amount'?: number | null;
    /**
     * This is the transaction number that appears on email receipts sent for this invoice.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'receipt_number'?: string | null;
    /**
     * Starting customer balance (in cents) before attempting to pay invoice. If the invoice has not been attempted yet, this will be the current customer balance.
     * @type {number}
     * @memberof StripeNextInvoice
     */
    'starting_balance': number;
    /**
     * An arbitrary string to be displayed on your customer\'s credit card statement. The statement description may not include <>\"\' characters, and will appear on your customer\'s statement in capital letters. Non-ASCII characters are automatically stripped. While most banks display this information consistently, some may display it incorrectly or not at all.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'statement_descriptor'?: string;
    /**
     * The status of the invoice, one of draft, open, paid, uncollectible, or void.
     * @type {StripeNextInvoiceStatusEnum | BlankEnum}
     * @memberof StripeNextInvoice
     */
    'status'?: StripeNextInvoiceStatusEnum | BlankEnum;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof StripeNextInvoice
     */
    'status_transitions'?: { [key: string]: any; } | null;
    /**
     * Only set for upcoming invoices that preview prorations. The time used to calculate prorations.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'subscription_proration_date'?: string | null;
    /**
     * Total (as decimal) of all subscriptions, invoice items, and prorations on the invoice before any discount or tax is applied.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'subtotal': string;
    /**
     * The amount (as decimal) of tax included in the total, calculated from ``tax_percent`` and the subtotal. If no ``tax_percent`` is defined, this value will be null.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'tax'?: string | null;
    /**
     * This percentage of the subtotal has been added to the total amount of the invoice, including invoice line items and discounts. This field is inherited from the subscription\'s ``tax_percent`` field, but can be changed before the invoice is paid. This field defaults to null.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'tax_percent'?: string | null;
    /**
     * If billing_reason is set to subscription_threshold this returns more information on which threshold rules triggered the invoice.
     * @type {{ [key: string]: any; }}
     * @memberof StripeNextInvoice
     */
    'threshold_reason'?: { [key: string]: any; } | null;
    /**
     * 
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'total': string;
    /**
     * The time at which webhooks for this invoice were successfully delivered (if the invoice had no webhooks to deliver, this will match `date`). Invoice payment is delayed until webhooks are delivered, or until all webhook delivery attempts have been exhausted.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'webhooks_delivered_at'?: string | null;
    /**
     * The Stripe Account this object belongs to.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'djstripe_owner_account'?: string | null;
    /**
     * The latest charge generated for this invoice, if any.
     * @type {number}
     * @memberof StripeNextInvoice
     */
    'charge'?: number | null;
    /**
     * The customer associated with this invoice.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'customer': string;
    /**
     * Default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription\'s default payment method, if any, or to the default payment method in the customer\'s invoice settings.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'default_payment_method'?: string | null;
    /**
     * The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice.Note that voiding an invoice will cancel the PaymentIntent
     * @type {number}
     * @memberof StripeNextInvoice
     */
    'payment_intent'?: number | null;
    /**
     * The subscription that this invoice was prepared for, if any.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'subscription'?: string | null;
    /**
     * The default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription\'s default source, if any, or to the customer\'s default source.
     * @type {string}
     * @memberof StripeNextInvoice
     */
    'default_source'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const StripeNextInvoiceStatusEnum = {
    Draft: 'draft',
    Open: 'open',
    Paid: 'paid',
    Uncollectible: 'uncollectible',
    Void: 'void'
} as const;

export type StripeNextInvoiceStatusEnum = typeof StripeNextInvoiceStatusEnum[keyof typeof StripeNextInvoiceStatusEnum];


/**
 * 
 * @export
 * @interface StripePaymentMethod
 */
export interface StripePaymentMethod {
    /**
     * 
     * @type {number}
     * @memberof StripePaymentMethod
     */
    'djstripe_id': number;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentMethod
     */
    'djstripe_created': string;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentMethod
     */
    'djstripe_updated': string;
    /**
     * 
     * @type {string}
     * @memberof StripePaymentMethod
     */
    'id': string;
    /**
     * Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.
     * @type {boolean}
     * @memberof StripePaymentMethod
     */
    'livemode'?: boolean | null;
    /**
     * The datetime this object was created in stripe.
     * @type {string}
     * @memberof StripePaymentMethod
     */
    'created'?: string | null;
    /**
     * A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'metadata'?: { [key: string]: any; } | null;
    /**
     * Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'billing_details': { [key: string]: any; };
    /**
     * The type of the PaymentMethod.
     * @type {TypeEnum}
     * @memberof StripePaymentMethod
     */
    'type': TypeEnum;
    /**
     * Additional information for payment methods of type `acss_debit`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'acss_debit'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `afterpay_clearpay`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'afterpay_clearpay'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `alipay`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'alipay'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `au_becs_debit`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'au_becs_debit'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `bacs_debit`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'bacs_debit'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `bancontact`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'bancontact'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `boleto`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'boleto'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `card`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'card'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `card_present`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'card_present'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `eps`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'eps'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `fpx`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'fpx'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `giropay`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'giropay'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `grabpay`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'grabpay'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `ideal`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'ideal'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `interac_present`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'interac_present'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `oxxo`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'oxxo'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `p24`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'p24'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `sepa_debit`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'sepa_debit'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `sofort`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'sofort'?: { [key: string]: any; } | null;
    /**
     * Additional information for payment methods of type `wechat_pay`
     * @type {{ [key: string]: any; }}
     * @memberof StripePaymentMethod
     */
    'wechat_pay'?: { [key: string]: any; } | null;
    /**
     * The Stripe Account this object belongs to.
     * @type {string}
     * @memberof StripePaymentMethod
     */
    'djstripe_owner_account'?: string | null;
    /**
     * Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.
     * @type {string}
     * @memberof StripePaymentMethod
     */
    'customer'?: string | null;
}
/**
 * 
 * @export
 * @interface StripePlan
 */
export interface StripePlan {
    /**
     * 
     * @type {number}
     * @memberof StripePlan
     */
    'djstripe_id': number;
    /**
     * 
     * @type {string}
     * @memberof StripePlan
     */
    'djstripe_created': string;
    /**
     * 
     * @type {string}
     * @memberof StripePlan
     */
    'djstripe_updated': string;
    /**
     * 
     * @type {string}
     * @memberof StripePlan
     */
    'id': string;
    /**
     * Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.
     * @type {boolean}
     * @memberof StripePlan
     */
    'livemode'?: boolean | null;
    /**
     * The datetime this object was created in stripe.
     * @type {string}
     * @memberof StripePlan
     */
    'created'?: string | null;
    /**
     * A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.
     * @type {{ [key: string]: any; }}
     * @memberof StripePlan
     */
    'metadata'?: { [key: string]: any; } | null;
    /**
     * A description of this object.
     * @type {string}
     * @memberof StripePlan
     */
    'description'?: string | null;
    /**
     * Whether the plan can be used for new purchases.
     * @type {boolean}
     * @memberof StripePlan
     */
    'active': boolean;
    /**
     * Specifies a usage aggregation strategy for plans of usage_type=metered. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for picking the last usage record reported within a period, `last_ever` for picking the last usage record ever (across period bounds) or max which picks the usage record with the maximum reported usage during a period. Defaults to `sum`.
     * @type {AggregateUsageEnum | BlankEnum}
     * @memberof StripePlan
     */
    'aggregate_usage'?: AggregateUsageEnum | BlankEnum;
    /**
     * Amount (as decimal) to be charged on the interval specified.
     * @type {string}
     * @memberof StripePlan
     */
    'amount'?: string | null;
    /**
     * The unit amount in cents to be charged, represented as a decimal string with at most 12 decimal places.
     * @type {string}
     * @memberof StripePlan
     */
    'amount_decimal'?: string | null;
    /**
     * Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in amount) will be charged per unit in quantity (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the tiers and tiers_mode attributes.
     * @type {BillingSchemeEnum | BlankEnum}
     * @memberof StripePlan
     */
    'billing_scheme'?: BillingSchemeEnum | BlankEnum;
    /**
     * Three-letter ISO currency code
     * @type {string}
     * @memberof StripePlan
     */
    'currency': string;
    /**
     * The frequency with which a subscription should be billed.
     * @type {IntervalEnum}
     * @memberof StripePlan
     */
    'interval': IntervalEnum;
    /**
     * The number of intervals (specified in the interval property) between each subscription billing.
     * @type {number}
     * @memberof StripePlan
     */
    'interval_count'?: number | null;
    /**
     * A brief description of the plan, hidden from customers.
     * @type {string}
     * @memberof StripePlan
     */
    'nickname'?: string;
    /**
     * Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`.
     * @type {{ [key: string]: any; }}
     * @memberof StripePlan
     */
    'tiers'?: { [key: string]: any; } | null;
    /**
     * Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows.
     * @type {TiersModeEnum | BlankEnum | NullEnum}
     * @memberof StripePlan
     */
    'tiers_mode'?: TiersModeEnum | BlankEnum | NullEnum | null;
    /**
     * Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`.
     * @type {{ [key: string]: any; }}
     * @memberof StripePlan
     */
    'transform_usage'?: { [key: string]: any; } | null;
    /**
     * Number of trial period days granted when subscribing a customer to this plan. Null if the plan has no trial period.
     * @type {number}
     * @memberof StripePlan
     */
    'trial_period_days'?: number | null;
    /**
     * Configures how the quantity per period should be determined, can be either `metered` or `licensed`. `licensed` will automatically bill the `quantity` set for a plan when adding it to a subscription, `metered` will aggregate the total usage based on usage records. Defaults to `licensed`.
     * @type {UsageTypeEnum}
     * @memberof StripePlan
     */
    'usage_type'?: UsageTypeEnum;
    /**
     * The Stripe Account this object belongs to.
     * @type {string}
     * @memberof StripePlan
     */
    'djstripe_owner_account'?: string | null;
    /**
     * The product whose pricing this plan determines.
     * @type {string}
     * @memberof StripePlan
     */
    'product'?: string | null;
}
/**
 * 
 * @export
 * @interface StripeSubscription
 */
export interface StripeSubscription {
    /**
     * 
     * @type {number}
     * @memberof StripeSubscription
     */
    'djstripe_id': number;
    /**
     * 
     * @type {StripePlan}
     * @memberof StripeSubscription
     */
    'plan': StripePlan;
    /**
     * 
     * @type {StripePaymentMethod}
     * @memberof StripeSubscription
     */
    'default_payment_method': StripePaymentMethod;
    /**
     * 
     * @type {StripeSubscriptionSchedule}
     * @memberof StripeSubscription
     */
    'schedule': StripeSubscriptionSchedule;
    /**
     * 
     * @type {boolean}
     * @memberof StripeSubscription
     */
    'is_period_current': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StripeSubscription
     */
    'is_status_current': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StripeSubscription
     */
    'is_status_temporarily_current': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StripeSubscription
     */
    'is_valid': boolean;
    /**
     * 
     * @type {string}
     * @memberof StripeSubscription
     */
    'djstripe_created': string;
    /**
     * 
     * @type {string}
     * @memberof StripeSubscription
     */
    'djstripe_updated': string;
    /**
     * 
     * @type {string}
     * @memberof StripeSubscription
     */
    'id': string;
    /**
     * Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.
     * @type {boolean}
     * @memberof StripeSubscription
     */
    'livemode'?: boolean | null;
    /**
     * The datetime this object was created in stripe.
     * @type {string}
     * @memberof StripeSubscription
     */
    'created'?: string | null;
    /**
     * A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.
     * @type {{ [key: string]: any; }}
     * @memberof StripeSubscription
     */
    'metadata'?: { [key: string]: any; } | null;
    /**
     * A description of this object.
     * @type {string}
     * @memberof StripeSubscription
     */
    'description'?: string | null;
    /**
     * A positive decimal that represents the fee percentage of the subscription invoice amount that will be transferred to the application owner\'s Stripe account each billing period.
     * @type {string}
     * @memberof StripeSubscription
     */
    'application_fee_percent'?: string | null;
    /**
     * Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
     * @type {string}
     * @memberof StripeSubscription
     */
    'billing_cycle_anchor'?: string | null;
    /**
     * Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period.
     * @type {{ [key: string]: any; }}
     * @memberof StripeSubscription
     */
    'billing_thresholds'?: { [key: string]: any; } | null;
    /**
     * A date in the future at which the subscription will automatically get canceled.
     * @type {string}
     * @memberof StripeSubscription
     */
    'cancel_at'?: string | null;
    /**
     * If the subscription has been canceled with the ``at_period_end`` flag set to true, ``cancel_at_period_end`` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.
     * @type {boolean}
     * @memberof StripeSubscription
     */
    'cancel_at_period_end'?: boolean;
    /**
     * If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with ``cancel_at_period_end``, canceled_at will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
     * @type {string}
     * @memberof StripeSubscription
     */
    'canceled_at'?: string | null;
    /**
     * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
     * @type {CollectionMethodEnum}
     * @memberof StripeSubscription
     */
    'collection_method': CollectionMethodEnum;
    /**
     * End of the current period for which the subscription has been invoiced. At the end of this period, a new invoice will be created.
     * @type {string}
     * @memberof StripeSubscription
     */
    'current_period_end': string;
    /**
     * Start of the current period for which the subscription has been invoiced.
     * @type {string}
     * @memberof StripeSubscription
     */
    'current_period_start': string;
    /**
     * Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `billing=charge_automatically`.
     * @type {number}
     * @memberof StripeSubscription
     */
    'days_until_due'?: number | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof StripeSubscription
     */
    'discount'?: { [key: string]: any; } | null;
    /**
     * If the subscription has ended (either because it was canceled or because the customer was switched to a subscription to a new plan), the date the subscription ended.
     * @type {string}
     * @memberof StripeSubscription
     */
    'ended_at'?: string | null;
    /**
     * Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at pending_invoice_item_interval.
     * @type {string}
     * @memberof StripeSubscription
     */
    'next_pending_invoice_item_invoice'?: string | null;
    /**
     * Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling Create an invoice for the given subscription at the specified interval.
     * @type {{ [key: string]: any; }}
     * @memberof StripeSubscription
     */
    'pending_invoice_item_interval'?: { [key: string]: any; } | null;
    /**
     * If specified, pending updates that will be applied to the subscription once the latest_invoice has been paid.
     * @type {{ [key: string]: any; }}
     * @memberof StripeSubscription
     */
    'pending_update'?: { [key: string]: any; } | null;
    /**
     * The quantity applied to this subscription. This value will be `null` for multi-plan subscriptions
     * @type {number}
     * @memberof StripeSubscription
     */
    'quantity'?: number | null;
    /**
     * Date when the subscription was first created. The date might differ from the created date due to backdating.
     * @type {string}
     * @memberof StripeSubscription
     */
    'start_date'?: string | null;
    /**
     * The status of this subscription.
     * @type {StripeSubscriptionStatusEnum}
     * @memberof StripeSubscription
     */
    'status': StripeSubscriptionStatusEnum;
    /**
     * If the subscription has a trial, the end of that trial.
     * @type {string}
     * @memberof StripeSubscription
     */
    'trial_end'?: string | null;
    /**
     * If the subscription has a trial, the beginning of that trial.
     * @type {string}
     * @memberof StripeSubscription
     */
    'trial_start'?: string | null;
    /**
     * The Stripe Account this object belongs to.
     * @type {string}
     * @memberof StripeSubscription
     */
    'djstripe_owner_account'?: string | null;
    /**
     * The customer associated with this subscription.
     * @type {string}
     * @memberof StripeSubscription
     */
    'customer': string;
    /**
     * The default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer\'s default source.
     * @type {string}
     * @memberof StripeSubscription
     */
    'default_source'?: string | null;
    /**
     * The most recent invoice this subscription has generated.
     * @type {string}
     * @memberof StripeSubscription
     */
    'latest_invoice'?: string | null;
    /**
     * We can use this SetupIntent to collect user authentication when creating a subscription without immediate payment or updating a subscription\'s payment method, allowing you to optimize for off-session payments.
     * @type {string}
     * @memberof StripeSubscription
     */
    'pending_setup_intent'?: string | null;
    /**
     * The tax rates that will apply to any subscription item that does not have tax_rates set. Invoices created will have their default_tax_rates populated from the subscription.
     * @type {Array<number>}
     * @memberof StripeSubscription
     */
    'default_tax_rates'?: Array<number>;
}
/**
 * 
 * @export
 * @interface StripeSubscriptionSchedule
 */
export interface StripeSubscriptionSchedule {
    /**
     * 
     * @type {number}
     * @memberof StripeSubscriptionSchedule
     */
    'djstripe_id': number;
    /**
     * 
     * @type {string}
     * @memberof StripeSubscriptionSchedule
     */
    'djstripe_created': string;
    /**
     * 
     * @type {string}
     * @memberof StripeSubscriptionSchedule
     */
    'djstripe_updated': string;
    /**
     * 
     * @type {string}
     * @memberof StripeSubscriptionSchedule
     */
    'id': string;
    /**
     * Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.
     * @type {boolean}
     * @memberof StripeSubscriptionSchedule
     */
    'livemode'?: boolean | null;
    /**
     * The datetime this object was created in stripe.
     * @type {string}
     * @memberof StripeSubscriptionSchedule
     */
    'created'?: string | null;
    /**
     * A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.
     * @type {{ [key: string]: any; }}
     * @memberof StripeSubscriptionSchedule
     */
    'metadata'?: { [key: string]: any; } | null;
    /**
     * A description of this object.
     * @type {string}
     * @memberof StripeSubscriptionSchedule
     */
    'description'?: string | null;
    /**
     * Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period.
     * @type {{ [key: string]: any; }}
     * @memberof StripeSubscriptionSchedule
     */
    'billing_thresholds'?: { [key: string]: any; } | null;
    /**
     * Time at which the subscription schedule was canceled.
     * @type {string}
     * @memberof StripeSubscriptionSchedule
     */
    'canceled_at'?: string | null;
    /**
     * Time at which the subscription schedule was completed.
     * @type {string}
     * @memberof StripeSubscriptionSchedule
     */
    'completed_at'?: string | null;
    /**
     * Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`.
     * @type {{ [key: string]: any; }}
     * @memberof StripeSubscriptionSchedule
     */
    'current_phase'?: { [key: string]: any; } | null;
    /**
     * Object representing the subscription schedule\'s default settings.
     * @type {{ [key: string]: any; }}
     * @memberof StripeSubscriptionSchedule
     */
    'default_settings'?: { [key: string]: any; } | null;
    /**
     * Behavior of the subscription schedule and underlying subscription when it ends.
     * @type {EndBehaviorEnum}
     * @memberof StripeSubscriptionSchedule
     */
    'end_behavior': EndBehaviorEnum;
    /**
     * Configuration for the subscription schedule\'s phases.
     * @type {{ [key: string]: any; }}
     * @memberof StripeSubscriptionSchedule
     */
    'phases'?: { [key: string]: any; } | null;
    /**
     * Time at which the subscription schedule was released.
     * @type {string}
     * @memberof StripeSubscriptionSchedule
     */
    'released_at'?: string | null;
    /**
     * The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`.
     * @type {StripeSubscriptionScheduleStatusEnum}
     * @memberof StripeSubscriptionSchedule
     */
    'status': StripeSubscriptionScheduleStatusEnum;
    /**
     * The Stripe Account this object belongs to.
     * @type {string}
     * @memberof StripeSubscriptionSchedule
     */
    'djstripe_owner_account'?: string | null;
    /**
     * The customer who owns the subscription schedule.
     * @type {number}
     * @memberof StripeSubscriptionSchedule
     */
    'customer': number;
    /**
     * The subscription once managed by this subscription schedule (if it is released).
     * @type {number}
     * @memberof StripeSubscriptionSchedule
     */
    'released_subscription'?: number | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const StripeSubscriptionScheduleStatusEnum = {
    Active: 'active',
    Canceled: 'canceled',
    Completed: 'completed',
    NotStarted: 'not_started',
    Released: 'released'
} as const;

export type StripeSubscriptionScheduleStatusEnum = typeof StripeSubscriptionScheduleStatusEnum[keyof typeof StripeSubscriptionScheduleStatusEnum];


/**
 * 
 * @export
 * @enum {string}
 */

export const StripeSubscriptionStatusEnum = {
    Active: 'active',
    Canceled: 'canceled',
    Incomplete: 'incomplete',
    IncompleteExpired: 'incomplete_expired',
    PastDue: 'past_due',
    Trialing: 'trialing',
    Unpaid: 'unpaid'
} as const;

export type StripeSubscriptionStatusEnum = typeof StripeSubscriptionStatusEnum[keyof typeof StripeSubscriptionStatusEnum];


/**
 * 
 * @export
 * @interface SystemInfo
 */
export interface SystemInfo {
    /**
     * 
     * @type {number}
     * @memberof SystemInfo
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof SystemInfo
     */
    'created_dt': string;
    /**
     * 
     * @type {string}
     * @memberof SystemInfo
     */
    'updated_dt': string;
    /**
     * Populated from /etc/machine-id
     * @type {string}
     * @memberof SystemInfo
     */
    'machine_id': string;
    /**
     * Populated from /proc/cpuinfo REVISION
     * @type {string}
     * @memberof SystemInfo
     */
    'revision': string;
    /**
     * Populated from /proc/cpuinfo MODEL
     * @type {string}
     * @memberof SystemInfo
     */
    'model': string;
    /**
     * Populated from /proc/cpuinfo SERIAL
     * @type {string}
     * @memberof SystemInfo
     */
    'serial': string;
    /**
     * 
     * @type {number}
     * @memberof SystemInfo
     */
    'cores': number;
    /**
     * 
     * @type {number}
     * @memberof SystemInfo
     */
    'ram': number;
    /**
     * PrintNanny OS VERSION_ID from /etc/os-release
     * @type {string}
     * @memberof SystemInfo
     */
    'os_version_id': string;
    /**
     * PrintNanny OS BUILD_ID from /etc/os-release
     * @type {string}
     * @memberof SystemInfo
     */
    'os_build_id': string;
    /**
     * PrintNanny OS VARIANT_ID from /etc/os-release
     * @type {string}
     * @memberof SystemInfo
     */
    'os_variant_id': string;
    /**
     * Full contents of /etc/os-release in key:value format
     * @type {{ [key: string]: any; }}
     * @memberof SystemInfo
     */
    'os_release_json'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof SystemInfo
     */
    'device': number;
}
/**
 * 
 * @export
 * @interface SystemInfoRequest
 */
export interface SystemInfoRequest {
    /**
     * Populated from /etc/machine-id
     * @type {string}
     * @memberof SystemInfoRequest
     */
    'machine_id': string;
    /**
     * Populated from /proc/cpuinfo REVISION
     * @type {string}
     * @memberof SystemInfoRequest
     */
    'revision': string;
    /**
     * Populated from /proc/cpuinfo MODEL
     * @type {string}
     * @memberof SystemInfoRequest
     */
    'model': string;
    /**
     * Populated from /proc/cpuinfo SERIAL
     * @type {string}
     * @memberof SystemInfoRequest
     */
    'serial': string;
    /**
     * 
     * @type {number}
     * @memberof SystemInfoRequest
     */
    'cores': number;
    /**
     * 
     * @type {number}
     * @memberof SystemInfoRequest
     */
    'ram': number;
    /**
     * PrintNanny OS VERSION_ID from /etc/os-release
     * @type {string}
     * @memberof SystemInfoRequest
     */
    'os_version_id': string;
    /**
     * PrintNanny OS BUILD_ID from /etc/os-release
     * @type {string}
     * @memberof SystemInfoRequest
     */
    'os_build_id': string;
    /**
     * PrintNanny OS VARIANT_ID from /etc/os-release
     * @type {string}
     * @memberof SystemInfoRequest
     */
    'os_variant_id': string;
    /**
     * Full contents of /etc/os-release in key:value format
     * @type {{ [key: string]: any; }}
     * @memberof SystemInfoRequest
     */
    'os_release_json'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof SystemInfoRequest
     */
    'device': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const TaxExemptEnum = {
    Exempt: 'exempt',
    None: 'none',
    Reverse: 'reverse'
} as const;

export type TaxExemptEnum = typeof TaxExemptEnum[keyof typeof TaxExemptEnum];


/**
 * 
 * @export
 * @interface TestEvent
 */
export interface TestEvent {
    /**
     * 
     * @type {number}
     * @memberof TestEvent
     */
    'id': number;
    /**
     * 
     * @type {TestEventModel}
     * @memberof TestEvent
     */
    'model': TestEventModel;
    /**
     * 
     * @type {string}
     * @memberof TestEvent
     */
    'created_dt': string;
    /**
     * 
     * @type {EventSource}
     * @memberof TestEvent
     */
    'source': EventSource;
    /**
     * 
     * @type {TestEventName}
     * @memberof TestEvent
     */
    'event_name': TestEventName;
    /**
     * 
     * @type {number}
     * @memberof TestEvent
     */
    'polymorphic_ctype': number;
    /**
     * 
     * @type {number}
     * @memberof TestEvent
     */
    'user': number;
    /**
     * 
     * @type {number}
     * @memberof TestEvent
     */
    'device': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const TestEventModel = {
    TestEvent: 'TestEvent'
} as const;

export type TestEventModel = typeof TestEventModel[keyof typeof TestEventModel];


/**
 * 
 * @export
 * @enum {string}
 */

export const TestEventName = {
    Ping: 'mqtt_ping',
    Pong: 'mqtt_pong'
} as const;

export type TestEventName = typeof TestEventName[keyof typeof TestEventName];


/**
 * 
 * @export
 * @interface TestEventRequest
 */
export interface TestEventRequest {
    /**
     * 
     * @type {TestEventModel}
     * @memberof TestEventRequest
     */
    'model': TestEventModel;
    /**
     * 
     * @type {EventSource}
     * @memberof TestEventRequest
     */
    'source': EventSource;
    /**
     * 
     * @type {TestEventName}
     * @memberof TestEventRequest
     */
    'event_name': TestEventName;
    /**
     * 
     * @type {number}
     * @memberof TestEventRequest
     */
    'device': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const TiersModeEnum = {
    Graduated: 'graduated',
    Volume: 'volume'
} as const;

export type TiersModeEnum = typeof TiersModeEnum[keyof typeof TiersModeEnum];


/**
 * Serializer for Token model.
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'key': string;
}
/**
 * Our default response serializer.
 * @export
 * @interface TokenResponse
 */
export interface TokenResponse {
    /**
     * 
     * @type {string}
     * @memberof TokenResponse
     */
    'token': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const TypeEnum = {
    AcssDebit: 'acss_debit',
    AfterpayClearpay: 'afterpay_clearpay',
    Alipay: 'alipay',
    AuBecsDebit: 'au_becs_debit',
    BacsDebit: 'bacs_debit',
    Bancontact: 'bancontact',
    Boleto: 'boleto',
    Card: 'card',
    CardPresent: 'card_present',
    Eps: 'eps',
    Fpx: 'fpx',
    Giropay: 'giropay',
    Grabpay: 'grabpay',
    Ideal: 'ideal',
    InteracPresent: 'interac_present',
    Klarna: 'klarna',
    Oxxo: 'oxxo',
    P24: 'p24',
    SepaDebit: 'sepa_debit',
    Sofort: 'sofort',
    WechatPay: 'wechat_pay'
} as const;

export type TypeEnum = typeof TypeEnum[keyof typeof TypeEnum];


/**
 * 
 * @export
 * @enum {string}
 */

export const UsageTypeEnum = {
    Licensed: 'licensed',
    Metered: 'metered'
} as const;

export type UsageTypeEnum = typeof UsageTypeEnum[keyof typeof UsageTypeEnum];


/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'first_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'last_name'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'is_beta_tester': boolean;
}
/**
 * 
 * @export
 * @interface UserRequest
 */
export interface UserRequest {
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    'first_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    'last_name'?: string | null;
}
/**
 * 
 * @export
 * @interface VerifyEmailRequest
 */
export interface VerifyEmailRequest {
    /**
     * 
     * @type {string}
     * @memberof VerifyEmailRequest
     */
    'key': string;
}
/**
 * 
 * @export
 * @interface WebRTCCommand
 */
export interface WebRTCCommand {
    /**
     * 
     * @type {number}
     * @memberof WebRTCCommand
     */
    'id': number;
    /**
     * 
     * @type {JanusStream}
     * @memberof WebRTCCommand
     */
    'stream': JanusStream;
    /**
     * 
     * @type {WebRTCCommandModel}
     * @memberof WebRTCCommand
     */
    'model': WebRTCCommandModel;
    /**
     * 
     * @type {string}
     * @memberof WebRTCCommand
     */
    'created_dt': string;
    /**
     * 
     * @type {EventSource}
     * @memberof WebRTCCommand
     */
    'source': EventSource;
    /**
     * 
     * @type {WebRTCCommandName}
     * @memberof WebRTCCommand
     */
    'event_name': WebRTCCommandName;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof WebRTCCommand
     */
    'data'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof WebRTCCommand
     */
    'polymorphic_ctype': number;
    /**
     * 
     * @type {number}
     * @memberof WebRTCCommand
     */
    'user': number;
    /**
     * 
     * @type {number}
     * @memberof WebRTCCommand
     */
    'device': number;
}
/**
 * 
 * @export
 * @interface WebRTCCommandCreateRequest
 */
export interface WebRTCCommandCreateRequest {
    /**
     * 
     * @type {WebRTCCommandModel}
     * @memberof WebRTCCommandCreateRequest
     */
    'model': WebRTCCommandModel;
    /**
     * 
     * @type {EventSource}
     * @memberof WebRTCCommandCreateRequest
     */
    'source': EventSource;
    /**
     * 
     * @type {WebRTCCommandName}
     * @memberof WebRTCCommandCreateRequest
     */
    'event_name': WebRTCCommandName;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof WebRTCCommandCreateRequest
     */
    'data'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof WebRTCCommandCreateRequest
     */
    'device': number;
    /**
     * 
     * @type {number}
     * @memberof WebRTCCommandCreateRequest
     */
    'stream': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const WebRTCCommandModel = {
    WebRtcCommand: 'WebRTCCommand'
} as const;

export type WebRTCCommandModel = typeof WebRTCCommandModel[keyof typeof WebRTCCommandModel];


/**
 * 
 * @export
 * @enum {string}
 */

export const WebRTCCommandName = {
    Start: 'stream_start',
    Stop: 'stream_stop'
} as const;

export type WebRTCCommandName = typeof WebRTCCommandName[keyof typeof WebRTCCommandName];


/**
 * 
 * @export
 * @interface WebRTCEvent
 */
export interface WebRTCEvent {
    /**
     * 
     * @type {number}
     * @memberof WebRTCEvent
     */
    'id': number;
    /**
     * 
     * @type {WebRTCEventModel}
     * @memberof WebRTCEvent
     */
    'model': WebRTCEventModel;
    /**
     * 
     * @type {string}
     * @memberof WebRTCEvent
     */
    'created_dt': string;
    /**
     * 
     * @type {EventSource}
     * @memberof WebRTCEvent
     */
    'source': EventSource;
    /**
     * 
     * @type {WebRTCEventName}
     * @memberof WebRTCEvent
     */
    'event_name': WebRTCEventName;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof WebRTCEvent
     */
    'data'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof WebRTCEvent
     */
    'polymorphic_ctype': number;
    /**
     * 
     * @type {number}
     * @memberof WebRTCEvent
     */
    'user': number;
    /**
     * 
     * @type {number}
     * @memberof WebRTCEvent
     */
    'device': number;
    /**
     * 
     * @type {number}
     * @memberof WebRTCEvent
     */
    'stream': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const WebRTCEventModel = {
    WebRtcEvent: 'WebRTCEvent'
} as const;

export type WebRTCEventModel = typeof WebRTCEventModel[keyof typeof WebRTCEventModel];


/**
 * 
 * @export
 * @enum {string}
 */

export const WebRTCEventName = {
    StartSuccess: 'stream_start_success',
    StartError: 'stream_start_error',
    StopSuccess: 'stream_stop_success',
    StopError: 'stream_stop_error'
} as const;

export type WebRTCEventName = typeof WebRTCEventName[keyof typeof WebRTCEventName];


/**
 * 
 * @export
 * @interface WebRTCEventRequest
 */
export interface WebRTCEventRequest {
    /**
     * 
     * @type {WebRTCEventModel}
     * @memberof WebRTCEventRequest
     */
    'model': WebRTCEventModel;
    /**
     * 
     * @type {EventSource}
     * @memberof WebRTCEventRequest
     */
    'source': EventSource;
    /**
     * 
     * @type {WebRTCEventName}
     * @memberof WebRTCEventRequest
     */
    'event_name': WebRTCEventName;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof WebRTCEventRequest
     */
    'data'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof WebRTCEventRequest
     */
    'device': number;
    /**
     * 
     * @type {number}
     * @memberof WebRTCEventRequest
     */
    'stream': number;
}

/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsLoginCreate: async (loginRequest: LoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('accountsLoginCreate', 'loginRequest', loginRequest)
            const localVarPath = `/api/accounts/login/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsLogoutCreate: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts/logout/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
         * @param {PasswordChangeRequest} passwordChangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsPasswordChangeCreate: async (passwordChangeRequest: PasswordChangeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordChangeRequest' is not null or undefined
            assertParamExists('accountsPasswordChangeCreate', 'passwordChangeRequest', passwordChangeRequest)
            const localVarPath = `/api/accounts/password/change/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordChangeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Password reset e-mail link is confirmed, therefore this resets the user\'s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
         * @param {PasswordResetConfirmRequest} passwordResetConfirmRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsPasswordResetConfirmCreate: async (passwordResetConfirmRequest: PasswordResetConfirmRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordResetConfirmRequest' is not null or undefined
            assertParamExists('accountsPasswordResetConfirmCreate', 'passwordResetConfirmRequest', passwordResetConfirmRequest)
            const localVarPath = `/api/accounts/password/reset/confirm/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordResetConfirmRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
         * @param {PasswordResetRequest} passwordResetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsPasswordResetCreate: async (passwordResetRequest: PasswordResetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordResetRequest' is not null or undefined
            assertParamExists('accountsPasswordResetCreate', 'passwordResetRequest', passwordResetRequest)
            const localVarPath = `/api/accounts/password/reset/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordResetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsRegistrationCreate: async (registerRequest: RegisterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequest' is not null or undefined
            assertParamExists('accountsRegistrationCreate', 'registerRequest', registerRequest)
            const localVarPath = `/api/accounts/registration/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResendEmailVerificationRequest} resendEmailVerificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsRegistrationResendEmailCreate: async (resendEmailVerificationRequest: ResendEmailVerificationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resendEmailVerificationRequest' is not null or undefined
            assertParamExists('accountsRegistrationResendEmailCreate', 'resendEmailVerificationRequest', resendEmailVerificationRequest)
            const localVarPath = `/api/accounts/registration/resend-email/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resendEmailVerificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VerifyEmailRequest} verifyEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsRegistrationVerifyEmailCreate: async (verifyEmailRequest: VerifyEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyEmailRequest' is not null or undefined
            assertParamExists('accountsRegistrationVerifyEmailCreate', 'verifyEmailRequest', verifyEmailRequest)
            const localVarPath = `/api/accounts/registration/verify-email/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyEmailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @param {PatchedUserRequest} [patchedUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUserPartialUpdate: async (patchedUserRequest?: PatchedUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts/user/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUserRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts/user/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUserUpdate: async (userRequest: UserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRequest' is not null or undefined
            assertParamExists('accountsUserUpdate', 'userRequest', userRequest)
            const localVarPath = `/api/accounts/user/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsLoginCreate(loginRequest: LoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsLoginCreate(loginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsLogoutCreate(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestAuthDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsLogoutCreate(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
         * @param {PasswordChangeRequest} passwordChangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsPasswordChangeCreate(passwordChangeRequest: PasswordChangeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestAuthDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsPasswordChangeCreate(passwordChangeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Password reset e-mail link is confirmed, therefore this resets the user\'s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
         * @param {PasswordResetConfirmRequest} passwordResetConfirmRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsPasswordResetConfirmCreate(passwordResetConfirmRequest: PasswordResetConfirmRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestAuthDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsPasswordResetConfirmCreate(passwordResetConfirmRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
         * @param {PasswordResetRequest} passwordResetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsPasswordResetCreate(passwordResetRequest: PasswordResetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestAuthDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsPasswordResetCreate(passwordResetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsRegistrationCreate(registerRequest: RegisterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsRegistrationCreate(registerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResendEmailVerificationRequest} resendEmailVerificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsRegistrationResendEmailCreate(resendEmailVerificationRequest: ResendEmailVerificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestAuthDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsRegistrationResendEmailCreate(resendEmailVerificationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {VerifyEmailRequest} verifyEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsRegistrationVerifyEmailCreate(verifyEmailRequest: VerifyEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestAuthDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsRegistrationVerifyEmailCreate(verifyEmailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @param {PatchedUserRequest} [patchedUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUserPartialUpdate(patchedUserRequest?: PatchedUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUserPartialUpdate(patchedUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUserRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUserRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUserUpdate(userRequest: UserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUserUpdate(userRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsLoginCreate(loginRequest: LoginRequest, options?: any): AxiosPromise<Token> {
            return localVarFp.accountsLoginCreate(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsLogoutCreate(options?: any): AxiosPromise<RestAuthDetail> {
            return localVarFp.accountsLogoutCreate(options).then((request) => request(axios, basePath));
        },
        /**
         * Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
         * @param {PasswordChangeRequest} passwordChangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsPasswordChangeCreate(passwordChangeRequest: PasswordChangeRequest, options?: any): AxiosPromise<RestAuthDetail> {
            return localVarFp.accountsPasswordChangeCreate(passwordChangeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Password reset e-mail link is confirmed, therefore this resets the user\'s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
         * @param {PasswordResetConfirmRequest} passwordResetConfirmRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsPasswordResetConfirmCreate(passwordResetConfirmRequest: PasswordResetConfirmRequest, options?: any): AxiosPromise<RestAuthDetail> {
            return localVarFp.accountsPasswordResetConfirmCreate(passwordResetConfirmRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
         * @param {PasswordResetRequest} passwordResetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsPasswordResetCreate(passwordResetRequest: PasswordResetRequest, options?: any): AxiosPromise<RestAuthDetail> {
            return localVarFp.accountsPasswordResetCreate(passwordResetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsRegistrationCreate(registerRequest: RegisterRequest, options?: any): AxiosPromise<Token> {
            return localVarFp.accountsRegistrationCreate(registerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResendEmailVerificationRequest} resendEmailVerificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsRegistrationResendEmailCreate(resendEmailVerificationRequest: ResendEmailVerificationRequest, options?: any): AxiosPromise<RestAuthDetail> {
            return localVarFp.accountsRegistrationResendEmailCreate(resendEmailVerificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VerifyEmailRequest} verifyEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsRegistrationVerifyEmailCreate(verifyEmailRequest: VerifyEmailRequest, options?: any): AxiosPromise<RestAuthDetail> {
            return localVarFp.accountsRegistrationVerifyEmailCreate(verifyEmailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @param {PatchedUserRequest} [patchedUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUserPartialUpdate(patchedUserRequest?: PatchedUserRequest, options?: any): AxiosPromise<User> {
            return localVarFp.accountsUserPartialUpdate(patchedUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUserRetrieve(options?: any): AxiosPromise<User> {
            return localVarFp.accountsUserRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
         * @param {UserRequest} userRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUserUpdate(userRequest: UserRequest, options?: any): AxiosPromise<User> {
            return localVarFp.accountsUserUpdate(userRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountsApi - interface
 * @export
 * @interface AccountsApi
 */
export interface AccountsApiInterface {
    /**
     * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsLoginCreate(loginRequest: LoginRequest, options?: AxiosRequestConfig): AxiosPromise<Token>;

    /**
     * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsLogoutCreate(options?: AxiosRequestConfig): AxiosPromise<RestAuthDetail>;

    /**
     * Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
     * @param {PasswordChangeRequest} passwordChangeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsPasswordChangeCreate(passwordChangeRequest: PasswordChangeRequest, options?: AxiosRequestConfig): AxiosPromise<RestAuthDetail>;

    /**
     * Password reset e-mail link is confirmed, therefore this resets the user\'s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
     * @param {PasswordResetConfirmRequest} passwordResetConfirmRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsPasswordResetConfirmCreate(passwordResetConfirmRequest: PasswordResetConfirmRequest, options?: AxiosRequestConfig): AxiosPromise<RestAuthDetail>;

    /**
     * Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
     * @param {PasswordResetRequest} passwordResetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsPasswordResetCreate(passwordResetRequest: PasswordResetRequest, options?: AxiosRequestConfig): AxiosPromise<RestAuthDetail>;

    /**
     * 
     * @param {RegisterRequest} registerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsRegistrationCreate(registerRequest: RegisterRequest, options?: AxiosRequestConfig): AxiosPromise<Token>;

    /**
     * 
     * @param {ResendEmailVerificationRequest} resendEmailVerificationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsRegistrationResendEmailCreate(resendEmailVerificationRequest: ResendEmailVerificationRequest, options?: AxiosRequestConfig): AxiosPromise<RestAuthDetail>;

    /**
     * 
     * @param {VerifyEmailRequest} verifyEmailRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsRegistrationVerifyEmailCreate(verifyEmailRequest: VerifyEmailRequest, options?: AxiosRequestConfig): AxiosPromise<RestAuthDetail>;

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     * @param {PatchedUserRequest} [patchedUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUserPartialUpdate(patchedUserRequest?: PatchedUserRequest, options?: AxiosRequestConfig): AxiosPromise<User>;

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUserRetrieve(options?: AxiosRequestConfig): AxiosPromise<User>;

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     * @param {UserRequest} userRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountsUserUpdate(userRequest: UserRequest, options?: AxiosRequestConfig): AxiosPromise<User>;

}

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI implements AccountsApiInterface {
    /**
     * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsLoginCreate(loginRequest: LoginRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsLoginCreate(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsLogoutCreate(options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsLogoutCreate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
     * @param {PasswordChangeRequest} passwordChangeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsPasswordChangeCreate(passwordChangeRequest: PasswordChangeRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsPasswordChangeCreate(passwordChangeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Password reset e-mail link is confirmed, therefore this resets the user\'s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
     * @param {PasswordResetConfirmRequest} passwordResetConfirmRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsPasswordResetConfirmCreate(passwordResetConfirmRequest: PasswordResetConfirmRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsPasswordResetConfirmCreate(passwordResetConfirmRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
     * @param {PasswordResetRequest} passwordResetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsPasswordResetCreate(passwordResetRequest: PasswordResetRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsPasswordResetCreate(passwordResetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterRequest} registerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsRegistrationCreate(registerRequest: RegisterRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsRegistrationCreate(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResendEmailVerificationRequest} resendEmailVerificationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsRegistrationResendEmailCreate(resendEmailVerificationRequest: ResendEmailVerificationRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsRegistrationResendEmailCreate(resendEmailVerificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VerifyEmailRequest} verifyEmailRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsRegistrationVerifyEmailCreate(verifyEmailRequest: VerifyEmailRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsRegistrationVerifyEmailCreate(verifyEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     * @param {PatchedUserRequest} [patchedUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUserPartialUpdate(patchedUserRequest?: PatchedUserRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUserPartialUpdate(patchedUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUserRetrieve(options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUserRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     * @param {UserRequest} userRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsUserUpdate(userRequest: UserRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsUserUpdate(userRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AlertSettingsApi - axios parameter creator
 * @export
 */
export const AlertSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertSettingsGetOrCreateRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/alert-settings/get-or-create/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert settings.
         * @param {PatchedAlertSettingsRequest} [patchedAlertSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertSettingsPartialUpdate: async (id: number, patchedAlertSettingsRequest?: PatchedAlertSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('alertSettingsPartialUpdate', 'id', id)
            const localVarPath = `/api/alert-settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedAlertSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert settings.
         * @param {AlertSettingsRequest} [alertSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertSettingsUpdate: async (id: number, alertSettingsRequest?: AlertSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('alertSettingsUpdate', 'id', id)
            const localVarPath = `/api/alert-settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(alertSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlertSettingsApi - functional programming interface
 * @export
 */
export const AlertSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AlertSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertSettingsGetOrCreateRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertSettingsGetOrCreateRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert settings.
         * @param {PatchedAlertSettingsRequest} [patchedAlertSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertSettingsPartialUpdate(id: number, patchedAlertSettingsRequest?: PatchedAlertSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertSettingsPartialUpdate(id, patchedAlertSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert settings.
         * @param {AlertSettingsRequest} [alertSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertSettingsUpdate(id: number, alertSettingsRequest?: AlertSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertSettingsUpdate(id, alertSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AlertSettingsApi - factory interface
 * @export
 */
export const AlertSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AlertSettingsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertSettingsGetOrCreateRetrieve(options?: any): AxiosPromise<AlertSettings> {
            return localVarFp.alertSettingsGetOrCreateRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert settings.
         * @param {PatchedAlertSettingsRequest} [patchedAlertSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertSettingsPartialUpdate(id: number, patchedAlertSettingsRequest?: PatchedAlertSettingsRequest, options?: any): AxiosPromise<AlertSettings> {
            return localVarFp.alertSettingsPartialUpdate(id, patchedAlertSettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert settings.
         * @param {AlertSettingsRequest} [alertSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertSettingsUpdate(id: number, alertSettingsRequest?: AlertSettingsRequest, options?: any): AxiosPromise<AlertSettings> {
            return localVarFp.alertSettingsUpdate(id, alertSettingsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AlertSettingsApi - interface
 * @export
 * @interface AlertSettingsApi
 */
export interface AlertSettingsApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApiInterface
     */
    alertSettingsGetOrCreateRetrieve(options?: AxiosRequestConfig): AxiosPromise<AlertSettings>;

    /**
     * 
     * @param {number} id A unique integer value identifying this alert settings.
     * @param {PatchedAlertSettingsRequest} [patchedAlertSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApiInterface
     */
    alertSettingsPartialUpdate(id: number, patchedAlertSettingsRequest?: PatchedAlertSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<AlertSettings>;

    /**
     * 
     * @param {number} id A unique integer value identifying this alert settings.
     * @param {AlertSettingsRequest} [alertSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApiInterface
     */
    alertSettingsUpdate(id: number, alertSettingsRequest?: AlertSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<AlertSettings>;

}

/**
 * AlertSettingsApi - object-oriented interface
 * @export
 * @class AlertSettingsApi
 * @extends {BaseAPI}
 */
export class AlertSettingsApi extends BaseAPI implements AlertSettingsApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApi
     */
    public alertSettingsGetOrCreateRetrieve(options?: AxiosRequestConfig) {
        return AlertSettingsApiFp(this.configuration).alertSettingsGetOrCreateRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this alert settings.
     * @param {PatchedAlertSettingsRequest} [patchedAlertSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApi
     */
    public alertSettingsPartialUpdate(id: number, patchedAlertSettingsRequest?: PatchedAlertSettingsRequest, options?: AxiosRequestConfig) {
        return AlertSettingsApiFp(this.configuration).alertSettingsPartialUpdate(id, patchedAlertSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this alert settings.
     * @param {AlertSettingsRequest} [alertSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertSettingsApi
     */
    public alertSettingsUpdate(id: number, alertSettingsRequest?: AlertSettingsRequest, options?: AxiosRequestConfig) {
        return AlertSettingsApiFp(this.configuration).alertSettingsUpdate(id, alertSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AlertsApi - axios parameter creator
 * @export
 */
export const AlertsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/alerts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert message.
         * @param {PatchedAlertRequest} [patchedAlertRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsPartialUpdate: async (id: number, patchedAlertRequest?: PatchedAlertRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('alertsPartialUpdate', 'id', id)
            const localVarPath = `/api/alerts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedAlertRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsRecent: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/alerts/recent/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('alertsRetrieve', 'id', id)
            const localVarPath = `/api/alerts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PatchedAlertBulkRequestRequest} [patchedAlertBulkRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsSeen: async (patchedAlertBulkRequestRequest?: PatchedAlertBulkRequestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/alerts/seen/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedAlertBulkRequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsUnread: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/alerts/unread/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert message.
         * @param {AlertRequest} [alertRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsUpdate: async (id: number, alertRequest?: AlertRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('alertsUpdate', 'id', id)
            const localVarPath = `/api/alerts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(alertRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlertsApi - functional programming interface
 * @export
 */
export const AlertsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AlertsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertsList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedAlertList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertsList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert message.
         * @param {PatchedAlertRequest} [patchedAlertRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertsPartialUpdate(id: number, patchedAlertRequest?: PatchedAlertRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Alert>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertsPartialUpdate(id, patchedAlertRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertsRecent(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertBulkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertsRecent(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Alert>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PatchedAlertBulkRequestRequest} [patchedAlertBulkRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertsSeen(patchedAlertBulkRequestRequest?: PatchedAlertBulkRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertBulkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertsSeen(patchedAlertBulkRequestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertsUnread(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertBulkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertsUnread(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert message.
         * @param {AlertRequest} [alertRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertsUpdate(id: number, alertRequest?: AlertRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Alert>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertsUpdate(id, alertRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AlertsApi - factory interface
 * @export
 */
export const AlertsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AlertsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsList(page?: number, options?: any): AxiosPromise<PaginatedAlertList> {
            return localVarFp.alertsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert message.
         * @param {PatchedAlertRequest} [patchedAlertRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsPartialUpdate(id: number, patchedAlertRequest?: PatchedAlertRequest, options?: any): AxiosPromise<Alert> {
            return localVarFp.alertsPartialUpdate(id, patchedAlertRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsRecent(options?: any): AxiosPromise<AlertBulkResponse> {
            return localVarFp.alertsRecent(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsRetrieve(id: number, options?: any): AxiosPromise<Alert> {
            return localVarFp.alertsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PatchedAlertBulkRequestRequest} [patchedAlertBulkRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsSeen(patchedAlertBulkRequestRequest?: PatchedAlertBulkRequestRequest, options?: any): AxiosPromise<AlertBulkResponse> {
            return localVarFp.alertsSeen(patchedAlertBulkRequestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsUnread(options?: any): AxiosPromise<AlertBulkResponse> {
            return localVarFp.alertsUnread(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this alert message.
         * @param {AlertRequest} [alertRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsUpdate(id: number, alertRequest?: AlertRequest, options?: any): AxiosPromise<Alert> {
            return localVarFp.alertsUpdate(id, alertRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AlertsApi - interface
 * @export
 * @interface AlertsApi
 */
export interface AlertsApiInterface {
    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    alertsList(page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedAlertList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this alert message.
     * @param {PatchedAlertRequest} [patchedAlertRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    alertsPartialUpdate(id: number, patchedAlertRequest?: PatchedAlertRequest, options?: AxiosRequestConfig): AxiosPromise<Alert>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    alertsRecent(options?: AxiosRequestConfig): AxiosPromise<AlertBulkResponse>;

    /**
     * 
     * @param {number} id A unique integer value identifying this alert message.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    alertsRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<Alert>;

    /**
     * 
     * @param {PatchedAlertBulkRequestRequest} [patchedAlertBulkRequestRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    alertsSeen(patchedAlertBulkRequestRequest?: PatchedAlertBulkRequestRequest, options?: AxiosRequestConfig): AxiosPromise<AlertBulkResponse>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    alertsUnread(options?: AxiosRequestConfig): AxiosPromise<AlertBulkResponse>;

    /**
     * 
     * @param {number} id A unique integer value identifying this alert message.
     * @param {AlertRequest} [alertRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApiInterface
     */
    alertsUpdate(id: number, alertRequest?: AlertRequest, options?: AxiosRequestConfig): AxiosPromise<Alert>;

}

/**
 * AlertsApi - object-oriented interface
 * @export
 * @class AlertsApi
 * @extends {BaseAPI}
 */
export class AlertsApi extends BaseAPI implements AlertsApiInterface {
    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public alertsList(page?: number, options?: AxiosRequestConfig) {
        return AlertsApiFp(this.configuration).alertsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this alert message.
     * @param {PatchedAlertRequest} [patchedAlertRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public alertsPartialUpdate(id: number, patchedAlertRequest?: PatchedAlertRequest, options?: AxiosRequestConfig) {
        return AlertsApiFp(this.configuration).alertsPartialUpdate(id, patchedAlertRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public alertsRecent(options?: AxiosRequestConfig) {
        return AlertsApiFp(this.configuration).alertsRecent(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this alert message.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public alertsRetrieve(id: number, options?: AxiosRequestConfig) {
        return AlertsApiFp(this.configuration).alertsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PatchedAlertBulkRequestRequest} [patchedAlertBulkRequestRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public alertsSeen(patchedAlertBulkRequestRequest?: PatchedAlertBulkRequestRequest, options?: AxiosRequestConfig) {
        return AlertsApiFp(this.configuration).alertsSeen(patchedAlertBulkRequestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public alertsUnread(options?: AxiosRequestConfig) {
        return AlertsApiFp(this.configuration).alertsUnread(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this alert message.
     * @param {AlertRequest} [alertRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertsApi
     */
    public alertsUpdate(id: number, alertRequest?: AlertRequest, options?: AxiosRequestConfig) {
        return AlertsApiFp(this.configuration).alertsUpdate(id, alertRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
         * @param {EmailAuthRequest} emailAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authEmailCreate: async (emailAuthRequest: EmailAuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailAuthRequest' is not null or undefined
            assertParamExists('authEmailCreate', 'emailAuthRequest', emailAuthRequest)
            const localVarPath = `/auth/email/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailAuthRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
         * @param {MobileAuthRequest} mobileAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authMobileCreate: async (mobileAuthRequest: MobileAuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mobileAuthRequest' is not null or undefined
            assertParamExists('authMobileCreate', 'mobileAuthRequest', mobileAuthRequest)
            const localVarPath = `/auth/mobile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mobileAuthRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is a duplicate of rest_framework\'s own ObtainAuthToken method. Instead, this returns an Auth Token based on our callback token and source.
         * @param {CallbackTokenAuthRequest} callbackTokenAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokenCreate: async (callbackTokenAuthRequest: CallbackTokenAuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'callbackTokenAuthRequest' is not null or undefined
            assertParamExists('authTokenCreate', 'callbackTokenAuthRequest', callbackTokenAuthRequest)
            const localVarPath = `/auth/token/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(callbackTokenAuthRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This verifies an alias on correct callback token entry using the same logic as auth. Should be refactored at some point.
         * @param {CallbackTokenVerificationRequest} callbackTokenVerificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifyCreate: async (callbackTokenVerificationRequest: CallbackTokenVerificationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'callbackTokenVerificationRequest' is not null or undefined
            assertParamExists('authVerifyCreate', 'callbackTokenVerificationRequest', callbackTokenVerificationRequest)
            const localVarPath = `/auth/verify/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(callbackTokenVerificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifyEmailCreate: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/verify/email/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifyMobileCreate: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/verify/mobile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
         * @param {EmailAuthRequest} emailAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authEmailCreate(emailAuthRequest: EmailAuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authEmailCreate(emailAuthRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
         * @param {MobileAuthRequest} mobileAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authMobileCreate(mobileAuthRequest: MobileAuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authMobileCreate(mobileAuthRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This is a duplicate of rest_framework\'s own ObtainAuthToken method. Instead, this returns an Auth Token based on our callback token and source.
         * @param {CallbackTokenAuthRequest} callbackTokenAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authTokenCreate(callbackTokenAuthRequest: CallbackTokenAuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authTokenCreate(callbackTokenAuthRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This verifies an alias on correct callback token entry using the same logic as auth. Should be refactored at some point.
         * @param {CallbackTokenVerificationRequest} callbackTokenVerificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authVerifyCreate(callbackTokenVerificationRequest: CallbackTokenVerificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallbackTokenVerification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authVerifyCreate(callbackTokenVerificationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authVerifyEmailCreate(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authVerifyEmailCreate(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authVerifyMobileCreate(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authVerifyMobileCreate(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
         * @param {EmailAuthRequest} emailAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authEmailCreate(emailAuthRequest: EmailAuthRequest, options?: any): AxiosPromise<DetailResponse> {
            return localVarFp.authEmailCreate(emailAuthRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
         * @param {MobileAuthRequest} mobileAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authMobileCreate(mobileAuthRequest: MobileAuthRequest, options?: any): AxiosPromise<DetailResponse> {
            return localVarFp.authMobileCreate(mobileAuthRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This is a duplicate of rest_framework\'s own ObtainAuthToken method. Instead, this returns an Auth Token based on our callback token and source.
         * @param {CallbackTokenAuthRequest} callbackTokenAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokenCreate(callbackTokenAuthRequest: CallbackTokenAuthRequest, options?: any): AxiosPromise<TokenResponse> {
            return localVarFp.authTokenCreate(callbackTokenAuthRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This verifies an alias on correct callback token entry using the same logic as auth. Should be refactored at some point.
         * @param {CallbackTokenVerificationRequest} callbackTokenVerificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifyCreate(callbackTokenVerificationRequest: CallbackTokenVerificationRequest, options?: any): AxiosPromise<CallbackTokenVerification> {
            return localVarFp.authVerifyCreate(callbackTokenVerificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifyEmailCreate(options?: any): AxiosPromise<DetailResponse> {
            return localVarFp.authVerifyEmailCreate(options).then((request) => request(axios, basePath));
        },
        /**
         * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifyMobileCreate(options?: any): AxiosPromise<DetailResponse> {
            return localVarFp.authVerifyMobileCreate(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - interface
 * @export
 * @interface AuthApi
 */
export interface AuthApiInterface {
    /**
     * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
     * @param {EmailAuthRequest} emailAuthRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authEmailCreate(emailAuthRequest: EmailAuthRequest, options?: AxiosRequestConfig): AxiosPromise<DetailResponse>;

    /**
     * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
     * @param {MobileAuthRequest} mobileAuthRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authMobileCreate(mobileAuthRequest: MobileAuthRequest, options?: AxiosRequestConfig): AxiosPromise<DetailResponse>;

    /**
     * This is a duplicate of rest_framework\'s own ObtainAuthToken method. Instead, this returns an Auth Token based on our callback token and source.
     * @param {CallbackTokenAuthRequest} callbackTokenAuthRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authTokenCreate(callbackTokenAuthRequest: CallbackTokenAuthRequest, options?: AxiosRequestConfig): AxiosPromise<TokenResponse>;

    /**
     * This verifies an alias on correct callback token entry using the same logic as auth. Should be refactored at some point.
     * @param {CallbackTokenVerificationRequest} callbackTokenVerificationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authVerifyCreate(callbackTokenVerificationRequest: CallbackTokenVerificationRequest, options?: AxiosRequestConfig): AxiosPromise<CallbackTokenVerification>;

    /**
     * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authVerifyEmailCreate(options?: AxiosRequestConfig): AxiosPromise<DetailResponse>;

    /**
     * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authVerifyMobileCreate(options?: AxiosRequestConfig): AxiosPromise<DetailResponse>;

}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI implements AuthApiInterface {
    /**
     * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
     * @param {EmailAuthRequest} emailAuthRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authEmailCreate(emailAuthRequest: EmailAuthRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authEmailCreate(emailAuthRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
     * @param {MobileAuthRequest} mobileAuthRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authMobileCreate(mobileAuthRequest: MobileAuthRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authMobileCreate(mobileAuthRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This is a duplicate of rest_framework\'s own ObtainAuthToken method. Instead, this returns an Auth Token based on our callback token and source.
     * @param {CallbackTokenAuthRequest} callbackTokenAuthRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authTokenCreate(callbackTokenAuthRequest: CallbackTokenAuthRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authTokenCreate(callbackTokenAuthRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This verifies an alias on correct callback token entry using the same logic as auth. Should be refactored at some point.
     * @param {CallbackTokenVerificationRequest} callbackTokenVerificationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authVerifyCreate(callbackTokenVerificationRequest: CallbackTokenVerificationRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authVerifyCreate(callbackTokenVerificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authVerifyEmailCreate(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authVerifyEmailCreate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This returns a 6-digit callback token we can trade for a user\'s Auth Token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authVerifyMobileCreate(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authVerifyMobileCreate(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BillingApi - axios parameter creator
 * @export
 */
export const BillingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billingCancelCreate: async (subscriptionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('billingCancelCreate', 'subscriptionId', subscriptionId)
            const localVarPath = `/api/billing/{subscription_id}/cancel/`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billingReactivateCreate: async (subscriptionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('billingReactivateCreate', 'subscriptionId', subscriptionId)
            const localVarPath = `/api/billing/{subscription_id}/reactivate/`
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billingSummaryRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/billing/summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BillingApi - functional programming interface
 * @export
 */
export const BillingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BillingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async billingCancelCreate(subscriptionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BillingSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.billingCancelCreate(subscriptionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async billingReactivateCreate(subscriptionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BillingSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.billingReactivateCreate(subscriptionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async billingSummaryRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BillingSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.billingSummaryRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BillingApi - factory interface
 * @export
 */
export const BillingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BillingApiFp(configuration)
    return {
        /**
         * 
         * @param {number} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billingCancelCreate(subscriptionId: number, options?: any): AxiosPromise<BillingSummary> {
            return localVarFp.billingCancelCreate(subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billingReactivateCreate(subscriptionId: string, options?: any): AxiosPromise<BillingSummary> {
            return localVarFp.billingReactivateCreate(subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billingSummaryRetrieve(options?: any): AxiosPromise<BillingSummary> {
            return localVarFp.billingSummaryRetrieve(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BillingApi - interface
 * @export
 * @interface BillingApi
 */
export interface BillingApiInterface {
    /**
     * 
     * @param {number} subscriptionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    billingCancelCreate(subscriptionId: number, options?: AxiosRequestConfig): AxiosPromise<BillingSummary>;

    /**
     * 
     * @param {string} subscriptionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    billingReactivateCreate(subscriptionId: string, options?: AxiosRequestConfig): AxiosPromise<BillingSummary>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    billingSummaryRetrieve(options?: AxiosRequestConfig): AxiosPromise<BillingSummary>;

}

/**
 * BillingApi - object-oriented interface
 * @export
 * @class BillingApi
 * @extends {BaseAPI}
 */
export class BillingApi extends BaseAPI implements BillingApiInterface {
    /**
     * 
     * @param {number} subscriptionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    public billingCancelCreate(subscriptionId: number, options?: AxiosRequestConfig) {
        return BillingApiFp(this.configuration).billingCancelCreate(subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} subscriptionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    public billingReactivateCreate(subscriptionId: string, options?: AxiosRequestConfig) {
        return BillingApiFp(this.configuration).billingReactivateCreate(subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    public billingSummaryRetrieve(options?: AxiosRequestConfig) {
        return BillingApiFp(this.configuration).billingSummaryRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ClientApi - axios parameter creator
 * @export
 */
export const ClientApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConfigRetreive: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/client`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientApi - functional programming interface
 * @export
 */
export const ClientApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConfigRetreive(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrintNannyApiConfig>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiConfigRetreive(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClientApi - factory interface
 * @export
 */
export const ClientApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConfigRetreive(options?: any): AxiosPromise<PrintNannyApiConfig> {
            return localVarFp.apiConfigRetreive(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClientApi - interface
 * @export
 * @interface ClientApi
 */
export interface ClientApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApiInterface
     */
    apiConfigRetreive(options?: AxiosRequestConfig): AxiosPromise<PrintNannyApiConfig>;

}

/**
 * ClientApi - object-oriented interface
 * @export
 * @class ClientApi
 * @extends {BaseAPI}
 */
export class ClientApi extends BaseAPI implements ClientApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    public apiConfigRetreive(options?: AxiosRequestConfig) {
        return ClientApiFp(this.configuration).apiConfigRetreive(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CommandsApi - axios parameter creator
 * @export
 */
export const CommandsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generic events viewset
         * @param {PolymorphicCommandCreateRequest} [polymorphicCommandCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsCreate: async (polymorphicCommandCreateRequest?: PolymorphicCommandCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/commands/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(polymorphicCommandCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generic events viewset
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/commands/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generic events viewset
         * @param {number} id A unique integer value identifying this event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commandsRetrieve', 'id', id)
            const localVarPath = `/api/commands/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommandsApi - functional programming interface
 * @export
 */
export const CommandsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommandsApiAxiosParamCreator(configuration)
    return {
        /**
         * Generic events viewset
         * @param {PolymorphicCommandCreateRequest} [polymorphicCommandCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commandsCreate(polymorphicCommandCreateRequest?: PolymorphicCommandCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolymorphicCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commandsCreate(polymorphicCommandCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generic events viewset
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commandsList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPolymorphicCommandList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commandsList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generic events viewset
         * @param {number} id A unique integer value identifying this event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commandsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolymorphicCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commandsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CommandsApi - factory interface
 * @export
 */
export const CommandsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommandsApiFp(configuration)
    return {
        /**
         * Generic events viewset
         * @param {PolymorphicCommandCreateRequest} [polymorphicCommandCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsCreate(polymorphicCommandCreateRequest?: PolymorphicCommandCreateRequest, options?: any): AxiosPromise<PolymorphicCommand> {
            return localVarFp.commandsCreate(polymorphicCommandCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Generic events viewset
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsList(page?: number, options?: any): AxiosPromise<PaginatedPolymorphicCommandList> {
            return localVarFp.commandsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Generic events viewset
         * @param {number} id A unique integer value identifying this event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsRetrieve(id: number, options?: any): AxiosPromise<PolymorphicCommand> {
            return localVarFp.commandsRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommandsApi - interface
 * @export
 * @interface CommandsApi
 */
export interface CommandsApiInterface {
    /**
     * Generic events viewset
     * @param {PolymorphicCommandCreateRequest} [polymorphicCommandCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandsApiInterface
     */
    commandsCreate(polymorphicCommandCreateRequest?: PolymorphicCommandCreateRequest, options?: AxiosRequestConfig): AxiosPromise<PolymorphicCommand>;

    /**
     * Generic events viewset
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandsApiInterface
     */
    commandsList(page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedPolymorphicCommandList>;

    /**
     * Generic events viewset
     * @param {number} id A unique integer value identifying this event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandsApiInterface
     */
    commandsRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<PolymorphicCommand>;

}

/**
 * CommandsApi - object-oriented interface
 * @export
 * @class CommandsApi
 * @extends {BaseAPI}
 */
export class CommandsApi extends BaseAPI implements CommandsApiInterface {
    /**
     * Generic events viewset
     * @param {PolymorphicCommandCreateRequest} [polymorphicCommandCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandsApi
     */
    public commandsCreate(polymorphicCommandCreateRequest?: PolymorphicCommandCreateRequest, options?: AxiosRequestConfig) {
        return CommandsApiFp(this.configuration).commandsCreate(polymorphicCommandCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generic events viewset
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandsApi
     */
    public commandsList(page?: number, options?: AxiosRequestConfig) {
        return CommandsApiFp(this.configuration).commandsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generic events viewset
     * @param {number} id A unique integer value identifying this event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandsApi
     */
    public commandsRetrieve(id: number, options?: AxiosRequestConfig) {
        return CommandsApiFp(this.configuration).commandsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ConfigApi - axios parameter creator
 * @export
 */
export const ConfigApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConfigRetreive: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/client`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigApi - functional programming interface
 * @export
 */
export const ConfigApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConfigApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConfigRetreive(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrintNannyApiConfig>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiConfigRetreive(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConfigApi - factory interface
 * @export
 */
export const ConfigApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConfigApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConfigRetreive(options?: any): AxiosPromise<PrintNannyApiConfig> {
            return localVarFp.apiConfigRetreive(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfigApi - interface
 * @export
 * @interface ConfigApi
 */
export interface ConfigApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    apiConfigRetreive(options?: AxiosRequestConfig): AxiosPromise<PrintNannyApiConfig>;

}

/**
 * ConfigApi - object-oriented interface
 * @export
 * @class ConfigApi
 * @extends {BaseAPI}
 */
export class ConfigApi extends BaseAPI implements ConfigApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public apiConfigRetreive(options?: AxiosRequestConfig) {
        return ConfigApiFp(this.configuration).apiConfigRetreive(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DevicesApi - axios parameter creator
 * @export
 */
export const DevicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} deviceId 
         * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudiotDeviceUpdateOrCreate: async (deviceId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('cloudiotDeviceUpdateOrCreate', 'deviceId', deviceId)
            // verify required parameter 'cloudiotDeviceRequest' is not null or undefined
            assertParamExists('cloudiotDeviceUpdateOrCreate', 'cloudiotDeviceRequest', cloudiotDeviceRequest)
            const localVarPath = `/api/devices/{device_id}/cloudiot/update-or-create/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cloudiotDeviceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesCloudiotCreate: async (deviceId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesCloudiotCreate', 'deviceId', deviceId)
            // verify required parameter 'cloudiotDeviceRequest' is not null or undefined
            assertParamExists('devicesCloudiotCreate', 'cloudiotDeviceRequest', cloudiotDeviceRequest)
            const localVarPath = `/api/devices/{device_id}/cloudiot/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cloudiotDeviceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesCloudiotList: async (deviceId: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesCloudiotList', 'deviceId', deviceId)
            const localVarPath = `/api/devices/{device_id}/cloudiot/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {string} id 
         * @param {PatchedCloudiotDeviceRequest} [patchedCloudiotDeviceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesCloudiotPartialUpdate: async (deviceId: number, id: string, patchedCloudiotDeviceRequest?: PatchedCloudiotDeviceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesCloudiotPartialUpdate', 'deviceId', deviceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('devicesCloudiotPartialUpdate', 'id', id)
            const localVarPath = `/api/devices/{device_id}/cloudiot/{id}/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedCloudiotDeviceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesCloudiotRetrieve: async (deviceId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesCloudiotRetrieve', 'deviceId', deviceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('devicesCloudiotRetrieve', 'id', id)
            const localVarPath = `/api/devices/{device_id}/cloudiot/{id}/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {string} id 
         * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesCloudiotUpdate: async (deviceId: number, id: string, cloudiotDeviceRequest: CloudiotDeviceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesCloudiotUpdate', 'deviceId', deviceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('devicesCloudiotUpdate', 'id', id)
            // verify required parameter 'cloudiotDeviceRequest' is not null or undefined
            assertParamExists('devicesCloudiotUpdate', 'cloudiotDeviceRequest', cloudiotDeviceRequest)
            const localVarPath = `/api/devices/{device_id}/cloudiot/{id}/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cloudiotDeviceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesConfigDownloadRetrieve: async (deviceId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesConfigDownloadRetrieve', 'deviceId', deviceId)
            const localVarPath = `/api/devices/{device_id}/config/download/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {DeviceRequest} deviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesCreate: async (deviceRequest: DeviceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceRequest' is not null or undefined
            assertParamExists('devicesCreate', 'deviceRequest', deviceRequest)
            const localVarPath = `/api/devices/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesJanusStreamsList: async (deviceId: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesJanusStreamsList', 'deviceId', deviceId)
            const localVarPath = `/api/devices/{device_id}/janus-streams/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this janus stream.
         * @param {PatchedJanusStreamRequest} [patchedJanusStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesJanusStreamsPartialUpdate: async (deviceId: number, id: number, patchedJanusStreamRequest?: PatchedJanusStreamRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesJanusStreamsPartialUpdate', 'deviceId', deviceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('devicesJanusStreamsPartialUpdate', 'id', id)
            const localVarPath = `/api/devices/{device_id}/janus-streams/{id}/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedJanusStreamRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this janus stream.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesJanusStreamsRetrieve: async (deviceId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesJanusStreamsRetrieve', 'deviceId', deviceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('devicesJanusStreamsRetrieve', 'id', id)
            const localVarPath = `/api/devices/{device_id}/janus-streams/{id}/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this janus stream.
         * @param {JanusStreamRequest} [janusStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesJanusStreamsUpdate: async (deviceId: number, id: number, janusStreamRequest?: JanusStreamRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesJanusStreamsUpdate', 'deviceId', deviceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('devicesJanusStreamsUpdate', 'id', id)
            const localVarPath = `/api/devices/{device_id}/janus-streams/{id}/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(janusStreamRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/devices/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesOctoprintServersList: async (deviceId: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesOctoprintServersList', 'deviceId', deviceId)
            const localVarPath = `/api/devices/{device_id}/octoprint-servers/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} id A unique integer value identifying this device.
         * @param {PatchedDeviceRequest} [patchedDeviceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesPartialUpdate: async (id: number, patchedDeviceRequest?: PatchedDeviceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('devicesPartialUpdate', 'id', id)
            const localVarPath = `/api/devices/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedDeviceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {PublicKeyRequest} publicKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesPublicKeysCreate: async (deviceId: number, publicKeyRequest: PublicKeyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesPublicKeysCreate', 'deviceId', deviceId)
            // verify required parameter 'publicKeyRequest' is not null or undefined
            assertParamExists('devicesPublicKeysCreate', 'publicKeyRequest', publicKeyRequest)
            const localVarPath = `/api/devices/{device_id}/public-keys/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(publicKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesPublicKeysList: async (deviceId: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesPublicKeysList', 'deviceId', deviceId)
            const localVarPath = `/api/devices/{device_id}/public-keys/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this public key.
         * @param {PatchedPublicKeyRequest} [patchedPublicKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesPublicKeysPartialUpdate: async (deviceId: number, id: number, patchedPublicKeyRequest?: PatchedPublicKeyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesPublicKeysPartialUpdate', 'deviceId', deviceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('devicesPublicKeysPartialUpdate', 'id', id)
            const localVarPath = `/api/devices/{device_id}/public-keys/{id}/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedPublicKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this public key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesPublicKeysRetrieve: async (deviceId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesPublicKeysRetrieve', 'deviceId', deviceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('devicesPublicKeysRetrieve', 'id', id)
            const localVarPath = `/api/devices/{device_id}/public-keys/{id}/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this public key.
         * @param {PublicKeyRequest} publicKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesPublicKeysUpdate: async (deviceId: number, id: number, publicKeyRequest: PublicKeyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesPublicKeysUpdate', 'deviceId', deviceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('devicesPublicKeysUpdate', 'id', id)
            // verify required parameter 'publicKeyRequest' is not null or undefined
            assertParamExists('devicesPublicKeysUpdate', 'publicKeyRequest', publicKeyRequest)
            const localVarPath = `/api/devices/{device_id}/public-keys/{id}/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(publicKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} id A unique integer value identifying this device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('devicesRetrieve', 'id', id)
            const localVarPath = `/api/devices/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} hostname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesRetrieveHostname: async (hostname: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hostname' is not null or undefined
            assertParamExists('devicesRetrieveHostname', 'hostname', hostname)
            const localVarPath = `/api/devices/{hostname}`
                .replace(`{${"hostname"}}`, encodeURIComponent(String(hostname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesSettingsList: async (deviceId: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesSettingsList', 'deviceId', deviceId)
            const localVarPath = `/api/devices/{device_id}/settings/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this device settings.
         * @param {PatchedDeviceSettingsRequest} [patchedDeviceSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesSettingsPartialUpdate: async (deviceId: number, id: number, patchedDeviceSettingsRequest?: PatchedDeviceSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesSettingsPartialUpdate', 'deviceId', deviceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('devicesSettingsPartialUpdate', 'id', id)
            const localVarPath = `/api/devices/{device_id}/settings/{id}/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedDeviceSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this device settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesSettingsRetrieve: async (deviceId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesSettingsRetrieve', 'deviceId', deviceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('devicesSettingsRetrieve', 'id', id)
            const localVarPath = `/api/devices/{device_id}/settings/{id}/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this device settings.
         * @param {DeviceSettingsRequest} deviceSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesSettingsUpdate: async (deviceId: number, id: number, deviceSettingsRequest: DeviceSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesSettingsUpdate', 'deviceId', deviceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('devicesSettingsUpdate', 'id', id)
            // verify required parameter 'deviceSettingsRequest' is not null or undefined
            assertParamExists('devicesSettingsUpdate', 'deviceSettingsRequest', deviceSettingsRequest)
            const localVarPath = `/api/devices/{device_id}/settings/{id}/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {SystemInfoRequest} systemInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesSystemInfoCreate: async (deviceId: number, systemInfoRequest: SystemInfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesSystemInfoCreate', 'deviceId', deviceId)
            // verify required parameter 'systemInfoRequest' is not null or undefined
            assertParamExists('devicesSystemInfoCreate', 'systemInfoRequest', systemInfoRequest)
            const localVarPath = `/api/devices/{device_id}/system-info/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(systemInfoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesSystemInfoList: async (deviceId: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesSystemInfoList', 'deviceId', deviceId)
            const localVarPath = `/api/devices/{device_id}/system-info/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this system info.
         * @param {PatchedSystemInfoRequest} [patchedSystemInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesSystemInfoPartialUpdate: async (deviceId: number, id: number, patchedSystemInfoRequest?: PatchedSystemInfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesSystemInfoPartialUpdate', 'deviceId', deviceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('devicesSystemInfoPartialUpdate', 'id', id)
            const localVarPath = `/api/devices/{device_id}/system-info/{id}/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedSystemInfoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this system info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesSystemInfoRetrieve: async (deviceId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesSystemInfoRetrieve', 'deviceId', deviceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('devicesSystemInfoRetrieve', 'id', id)
            const localVarPath = `/api/devices/{device_id}/system-info/{id}/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this system info.
         * @param {SystemInfoRequest} systemInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesSystemInfoUpdate: async (deviceId: number, id: number, systemInfoRequest: SystemInfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesSystemInfoUpdate', 'deviceId', deviceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('devicesSystemInfoUpdate', 'id', id)
            // verify required parameter 'systemInfoRequest' is not null or undefined
            assertParamExists('devicesSystemInfoUpdate', 'systemInfoRequest', systemInfoRequest)
            const localVarPath = `/api/devices/{device_id}/system-info/{id}/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(systemInfoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} id A unique integer value identifying this device.
         * @param {DeviceRequest} [deviceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesUpdate: async (id: number, deviceRequest?: DeviceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('devicesUpdate', 'id', id)
            const localVarPath = `/api/devices/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {PublicKeyRequest} publicKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicKeyUpdateOrCreate: async (deviceId: number, publicKeyRequest: PublicKeyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('publicKeyUpdateOrCreate', 'deviceId', deviceId)
            // verify required parameter 'publicKeyRequest' is not null or undefined
            assertParamExists('publicKeyUpdateOrCreate', 'publicKeyRequest', publicKeyRequest)
            const localVarPath = `/api/devices/{device_id}/public-keys/update-or-create/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(publicKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {SystemInfoRequest} systemInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemInfoUpdateOrCreate: async (deviceId: number, systemInfoRequest: SystemInfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('systemInfoUpdateOrCreate', 'deviceId', deviceId)
            // verify required parameter 'systemInfoRequest' is not null or undefined
            assertParamExists('systemInfoUpdateOrCreate', 'systemInfoRequest', systemInfoRequest)
            const localVarPath = `/api/devices/{device_id}/system-info/update-or-create/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(systemInfoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DevicesApi - functional programming interface
 * @export
 */
export const DevicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DevicesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} deviceId 
         * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudiotDeviceUpdateOrCreate(deviceId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudiotDevice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudiotDeviceUpdateOrCreate(deviceId, cloudiotDeviceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesCloudiotCreate(deviceId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudiotDevice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesCloudiotCreate(deviceId, cloudiotDeviceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesCloudiotList(deviceId: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCloudiotDeviceList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesCloudiotList(deviceId, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {string} id 
         * @param {PatchedCloudiotDeviceRequest} [patchedCloudiotDeviceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesCloudiotPartialUpdate(deviceId: number, id: string, patchedCloudiotDeviceRequest?: PatchedCloudiotDeviceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudiotDevice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesCloudiotPartialUpdate(deviceId, id, patchedCloudiotDeviceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesCloudiotRetrieve(deviceId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudiotDevice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesCloudiotRetrieve(deviceId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {string} id 
         * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesCloudiotUpdate(deviceId: number, id: string, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesCloudiotUpdate(deviceId, id, cloudiotDeviceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesConfigDownloadRetrieve(deviceId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Config>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesConfigDownloadRetrieve(deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {DeviceRequest} deviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesCreate(deviceRequest: DeviceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesCreate(deviceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesJanusStreamsList(deviceId: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedJanusStreamList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesJanusStreamsList(deviceId, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this janus stream.
         * @param {PatchedJanusStreamRequest} [patchedJanusStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesJanusStreamsPartialUpdate(deviceId: number, id: number, patchedJanusStreamRequest?: PatchedJanusStreamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JanusStream>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesJanusStreamsPartialUpdate(deviceId, id, patchedJanusStreamRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this janus stream.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesJanusStreamsRetrieve(deviceId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JanusStream>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesJanusStreamsRetrieve(deviceId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this janus stream.
         * @param {JanusStreamRequest} [janusStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesJanusStreamsUpdate(deviceId: number, id: number, janusStreamRequest?: JanusStreamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JanusStream>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesJanusStreamsUpdate(deviceId, id, janusStreamRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedDeviceList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesOctoprintServersList(deviceId: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedOctoPrintServerList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesOctoprintServersList(deviceId, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} id A unique integer value identifying this device.
         * @param {PatchedDeviceRequest} [patchedDeviceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesPartialUpdate(id: number, patchedDeviceRequest?: PatchedDeviceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesPartialUpdate(id, patchedDeviceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {PublicKeyRequest} publicKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesPublicKeysCreate(deviceId: number, publicKeyRequest: PublicKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicKey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesPublicKeysCreate(deviceId, publicKeyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesPublicKeysList(deviceId: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPublicKeyList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesPublicKeysList(deviceId, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this public key.
         * @param {PatchedPublicKeyRequest} [patchedPublicKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesPublicKeysPartialUpdate(deviceId: number, id: number, patchedPublicKeyRequest?: PatchedPublicKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicKey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesPublicKeysPartialUpdate(deviceId, id, patchedPublicKeyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this public key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesPublicKeysRetrieve(deviceId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicKey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesPublicKeysRetrieve(deviceId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this public key.
         * @param {PublicKeyRequest} publicKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesPublicKeysUpdate(deviceId: number, id: number, publicKeyRequest: PublicKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicKey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesPublicKeysUpdate(deviceId, id, publicKeyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} id A unique integer value identifying this device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} hostname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesRetrieveHostname(hostname: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesRetrieveHostname(hostname, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesSettingsList(deviceId: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedDeviceSettingsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesSettingsList(deviceId, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this device settings.
         * @param {PatchedDeviceSettingsRequest} [patchedDeviceSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesSettingsPartialUpdate(deviceId: number, id: number, patchedDeviceSettingsRequest?: PatchedDeviceSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesSettingsPartialUpdate(deviceId, id, patchedDeviceSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this device settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesSettingsRetrieve(deviceId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesSettingsRetrieve(deviceId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this device settings.
         * @param {DeviceSettingsRequest} deviceSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesSettingsUpdate(deviceId: number, id: number, deviceSettingsRequest: DeviceSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesSettingsUpdate(deviceId, id, deviceSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {SystemInfoRequest} systemInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesSystemInfoCreate(deviceId: number, systemInfoRequest: SystemInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesSystemInfoCreate(deviceId, systemInfoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesSystemInfoList(deviceId: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedSystemInfoList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesSystemInfoList(deviceId, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this system info.
         * @param {PatchedSystemInfoRequest} [patchedSystemInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesSystemInfoPartialUpdate(deviceId: number, id: number, patchedSystemInfoRequest?: PatchedSystemInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesSystemInfoPartialUpdate(deviceId, id, patchedSystemInfoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this system info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesSystemInfoRetrieve(deviceId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesSystemInfoRetrieve(deviceId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this system info.
         * @param {SystemInfoRequest} systemInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesSystemInfoUpdate(deviceId: number, id: number, systemInfoRequest: SystemInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesSystemInfoUpdate(deviceId, id, systemInfoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} id A unique integer value identifying this device.
         * @param {DeviceRequest} [deviceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesUpdate(id: number, deviceRequest?: DeviceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesUpdate(id, deviceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {PublicKeyRequest} publicKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicKeyUpdateOrCreate(deviceId: number, publicKeyRequest: PublicKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicKey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publicKeyUpdateOrCreate(deviceId, publicKeyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {SystemInfoRequest} systemInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemInfoUpdateOrCreate(deviceId: number, systemInfoRequest: SystemInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemInfoUpdateOrCreate(deviceId, systemInfoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DevicesApi - factory interface
 * @export
 */
export const DevicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DevicesApiFp(configuration)
    return {
        /**
         * 
         * @param {number} deviceId 
         * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudiotDeviceUpdateOrCreate(deviceId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: any): AxiosPromise<CloudiotDevice> {
            return localVarFp.cloudiotDeviceUpdateOrCreate(deviceId, cloudiotDeviceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesCloudiotCreate(deviceId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: any): AxiosPromise<CloudiotDevice> {
            return localVarFp.devicesCloudiotCreate(deviceId, cloudiotDeviceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesCloudiotList(deviceId: number, page?: number, options?: any): AxiosPromise<PaginatedCloudiotDeviceList> {
            return localVarFp.devicesCloudiotList(deviceId, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {string} id 
         * @param {PatchedCloudiotDeviceRequest} [patchedCloudiotDeviceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesCloudiotPartialUpdate(deviceId: number, id: string, patchedCloudiotDeviceRequest?: PatchedCloudiotDeviceRequest, options?: any): AxiosPromise<CloudiotDevice> {
            return localVarFp.devicesCloudiotPartialUpdate(deviceId, id, patchedCloudiotDeviceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesCloudiotRetrieve(deviceId: number, id: number, options?: any): AxiosPromise<CloudiotDevice> {
            return localVarFp.devicesCloudiotRetrieve(deviceId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {string} id 
         * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesCloudiotUpdate(deviceId: number, id: string, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: any): AxiosPromise<void> {
            return localVarFp.devicesCloudiotUpdate(deviceId, id, cloudiotDeviceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesConfigDownloadRetrieve(deviceId: number, options?: any): AxiosPromise<Config> {
            return localVarFp.devicesConfigDownloadRetrieve(deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {DeviceRequest} deviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesCreate(deviceRequest: DeviceRequest, options?: any): AxiosPromise<Device> {
            return localVarFp.devicesCreate(deviceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesJanusStreamsList(deviceId: number, page?: number, options?: any): AxiosPromise<PaginatedJanusStreamList> {
            return localVarFp.devicesJanusStreamsList(deviceId, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this janus stream.
         * @param {PatchedJanusStreamRequest} [patchedJanusStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesJanusStreamsPartialUpdate(deviceId: number, id: number, patchedJanusStreamRequest?: PatchedJanusStreamRequest, options?: any): AxiosPromise<JanusStream> {
            return localVarFp.devicesJanusStreamsPartialUpdate(deviceId, id, patchedJanusStreamRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this janus stream.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesJanusStreamsRetrieve(deviceId: number, id: number, options?: any): AxiosPromise<JanusStream> {
            return localVarFp.devicesJanusStreamsRetrieve(deviceId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this janus stream.
         * @param {JanusStreamRequest} [janusStreamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesJanusStreamsUpdate(deviceId: number, id: number, janusStreamRequest?: JanusStreamRequest, options?: any): AxiosPromise<JanusStream> {
            return localVarFp.devicesJanusStreamsUpdate(deviceId, id, janusStreamRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesList(page?: number, options?: any): AxiosPromise<PaginatedDeviceList> {
            return localVarFp.devicesList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesOctoprintServersList(deviceId: number, page?: number, options?: any): AxiosPromise<PaginatedOctoPrintServerList> {
            return localVarFp.devicesOctoprintServersList(deviceId, page, options).then((request) => request(axios, basePath));
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} id A unique integer value identifying this device.
         * @param {PatchedDeviceRequest} [patchedDeviceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesPartialUpdate(id: number, patchedDeviceRequest?: PatchedDeviceRequest, options?: any): AxiosPromise<Device> {
            return localVarFp.devicesPartialUpdate(id, patchedDeviceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {PublicKeyRequest} publicKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesPublicKeysCreate(deviceId: number, publicKeyRequest: PublicKeyRequest, options?: any): AxiosPromise<PublicKey> {
            return localVarFp.devicesPublicKeysCreate(deviceId, publicKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesPublicKeysList(deviceId: number, page?: number, options?: any): AxiosPromise<PaginatedPublicKeyList> {
            return localVarFp.devicesPublicKeysList(deviceId, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this public key.
         * @param {PatchedPublicKeyRequest} [patchedPublicKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesPublicKeysPartialUpdate(deviceId: number, id: number, patchedPublicKeyRequest?: PatchedPublicKeyRequest, options?: any): AxiosPromise<PublicKey> {
            return localVarFp.devicesPublicKeysPartialUpdate(deviceId, id, patchedPublicKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this public key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesPublicKeysRetrieve(deviceId: number, id: number, options?: any): AxiosPromise<PublicKey> {
            return localVarFp.devicesPublicKeysRetrieve(deviceId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this public key.
         * @param {PublicKeyRequest} publicKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesPublicKeysUpdate(deviceId: number, id: number, publicKeyRequest: PublicKeyRequest, options?: any): AxiosPromise<PublicKey> {
            return localVarFp.devicesPublicKeysUpdate(deviceId, id, publicKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} id A unique integer value identifying this device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesRetrieve(id: number, options?: any): AxiosPromise<Device> {
            return localVarFp.devicesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} hostname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesRetrieveHostname(hostname: string, options?: any): AxiosPromise<Device> {
            return localVarFp.devicesRetrieveHostname(hostname, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesSettingsList(deviceId: number, page?: number, options?: any): AxiosPromise<PaginatedDeviceSettingsList> {
            return localVarFp.devicesSettingsList(deviceId, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this device settings.
         * @param {PatchedDeviceSettingsRequest} [patchedDeviceSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesSettingsPartialUpdate(deviceId: number, id: number, patchedDeviceSettingsRequest?: PatchedDeviceSettingsRequest, options?: any): AxiosPromise<DeviceSettings> {
            return localVarFp.devicesSettingsPartialUpdate(deviceId, id, patchedDeviceSettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this device settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesSettingsRetrieve(deviceId: number, id: number, options?: any): AxiosPromise<DeviceSettings> {
            return localVarFp.devicesSettingsRetrieve(deviceId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this device settings.
         * @param {DeviceSettingsRequest} deviceSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesSettingsUpdate(deviceId: number, id: number, deviceSettingsRequest: DeviceSettingsRequest, options?: any): AxiosPromise<DeviceSettings> {
            return localVarFp.devicesSettingsUpdate(deviceId, id, deviceSettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {SystemInfoRequest} systemInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesSystemInfoCreate(deviceId: number, systemInfoRequest: SystemInfoRequest, options?: any): AxiosPromise<SystemInfo> {
            return localVarFp.devicesSystemInfoCreate(deviceId, systemInfoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesSystemInfoList(deviceId: number, page?: number, options?: any): AxiosPromise<PaginatedSystemInfoList> {
            return localVarFp.devicesSystemInfoList(deviceId, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this system info.
         * @param {PatchedSystemInfoRequest} [patchedSystemInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesSystemInfoPartialUpdate(deviceId: number, id: number, patchedSystemInfoRequest?: PatchedSystemInfoRequest, options?: any): AxiosPromise<SystemInfo> {
            return localVarFp.devicesSystemInfoPartialUpdate(deviceId, id, patchedSystemInfoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this system info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesSystemInfoRetrieve(deviceId: number, id: number, options?: any): AxiosPromise<SystemInfo> {
            return localVarFp.devicesSystemInfoRetrieve(deviceId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this system info.
         * @param {SystemInfoRequest} systemInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesSystemInfoUpdate(deviceId: number, id: number, systemInfoRequest: SystemInfoRequest, options?: any): AxiosPromise<SystemInfo> {
            return localVarFp.devicesSystemInfoUpdate(deviceId, id, systemInfoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A device (Raspberry Pi) running Print Nanny OS
         * @param {number} id A unique integer value identifying this device.
         * @param {DeviceRequest} [deviceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesUpdate(id: number, deviceRequest?: DeviceRequest, options?: any): AxiosPromise<void> {
            return localVarFp.devicesUpdate(id, deviceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {PublicKeyRequest} publicKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicKeyUpdateOrCreate(deviceId: number, publicKeyRequest: PublicKeyRequest, options?: any): AxiosPromise<PublicKey> {
            return localVarFp.publicKeyUpdateOrCreate(deviceId, publicKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {SystemInfoRequest} systemInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemInfoUpdateOrCreate(deviceId: number, systemInfoRequest: SystemInfoRequest, options?: any): AxiosPromise<SystemInfo> {
            return localVarFp.systemInfoUpdateOrCreate(deviceId, systemInfoRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DevicesApi - interface
 * @export
 * @interface DevicesApi
 */
export interface DevicesApiInterface {
    /**
     * 
     * @param {number} deviceId 
     * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    cloudiotDeviceUpdateOrCreate(deviceId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: AxiosRequestConfig): AxiosPromise<CloudiotDevice>;

    /**
     * 
     * @param {number} deviceId 
     * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesCloudiotCreate(deviceId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: AxiosRequestConfig): AxiosPromise<CloudiotDevice>;

    /**
     * 
     * @param {number} deviceId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesCloudiotList(deviceId: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedCloudiotDeviceList>;

    /**
     * 
     * @param {number} deviceId 
     * @param {string} id 
     * @param {PatchedCloudiotDeviceRequest} [patchedCloudiotDeviceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesCloudiotPartialUpdate(deviceId: number, id: string, patchedCloudiotDeviceRequest?: PatchedCloudiotDeviceRequest, options?: AxiosRequestConfig): AxiosPromise<CloudiotDevice>;

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesCloudiotRetrieve(deviceId: number, id: number, options?: AxiosRequestConfig): AxiosPromise<CloudiotDevice>;

    /**
     * 
     * @param {number} deviceId 
     * @param {string} id 
     * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesCloudiotUpdate(deviceId: number, id: string, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} deviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesConfigDownloadRetrieve(deviceId: number, options?: AxiosRequestConfig): AxiosPromise<Config>;

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {DeviceRequest} deviceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesCreate(deviceRequest: DeviceRequest, options?: AxiosRequestConfig): AxiosPromise<Device>;

    /**
     * 
     * @param {number} deviceId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesJanusStreamsList(deviceId: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedJanusStreamList>;

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this janus stream.
     * @param {PatchedJanusStreamRequest} [patchedJanusStreamRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesJanusStreamsPartialUpdate(deviceId: number, id: number, patchedJanusStreamRequest?: PatchedJanusStreamRequest, options?: AxiosRequestConfig): AxiosPromise<JanusStream>;

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this janus stream.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesJanusStreamsRetrieve(deviceId: number, id: number, options?: AxiosRequestConfig): AxiosPromise<JanusStream>;

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this janus stream.
     * @param {JanusStreamRequest} [janusStreamRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesJanusStreamsUpdate(deviceId: number, id: number, janusStreamRequest?: JanusStreamRequest, options?: AxiosRequestConfig): AxiosPromise<JanusStream>;

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesList(page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedDeviceList>;

    /**
     * 
     * @param {number} deviceId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesOctoprintServersList(deviceId: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedOctoPrintServerList>;

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {number} id A unique integer value identifying this device.
     * @param {PatchedDeviceRequest} [patchedDeviceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesPartialUpdate(id: number, patchedDeviceRequest?: PatchedDeviceRequest, options?: AxiosRequestConfig): AxiosPromise<Device>;

    /**
     * 
     * @param {number} deviceId 
     * @param {PublicKeyRequest} publicKeyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesPublicKeysCreate(deviceId: number, publicKeyRequest: PublicKeyRequest, options?: AxiosRequestConfig): AxiosPromise<PublicKey>;

    /**
     * 
     * @param {number} deviceId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesPublicKeysList(deviceId: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedPublicKeyList>;

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this public key.
     * @param {PatchedPublicKeyRequest} [patchedPublicKeyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesPublicKeysPartialUpdate(deviceId: number, id: number, patchedPublicKeyRequest?: PatchedPublicKeyRequest, options?: AxiosRequestConfig): AxiosPromise<PublicKey>;

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this public key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesPublicKeysRetrieve(deviceId: number, id: number, options?: AxiosRequestConfig): AxiosPromise<PublicKey>;

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this public key.
     * @param {PublicKeyRequest} publicKeyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesPublicKeysUpdate(deviceId: number, id: number, publicKeyRequest: PublicKeyRequest, options?: AxiosRequestConfig): AxiosPromise<PublicKey>;

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {number} id A unique integer value identifying this device.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<Device>;

    /**
     * 
     * @param {string} hostname 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesRetrieveHostname(hostname: string, options?: AxiosRequestConfig): AxiosPromise<Device>;

    /**
     * 
     * @param {number} deviceId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesSettingsList(deviceId: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedDeviceSettingsList>;

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this device settings.
     * @param {PatchedDeviceSettingsRequest} [patchedDeviceSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesSettingsPartialUpdate(deviceId: number, id: number, patchedDeviceSettingsRequest?: PatchedDeviceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceSettings>;

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this device settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesSettingsRetrieve(deviceId: number, id: number, options?: AxiosRequestConfig): AxiosPromise<DeviceSettings>;

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this device settings.
     * @param {DeviceSettingsRequest} deviceSettingsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesSettingsUpdate(deviceId: number, id: number, deviceSettingsRequest: DeviceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceSettings>;

    /**
     * 
     * @param {number} deviceId 
     * @param {SystemInfoRequest} systemInfoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesSystemInfoCreate(deviceId: number, systemInfoRequest: SystemInfoRequest, options?: AxiosRequestConfig): AxiosPromise<SystemInfo>;

    /**
     * 
     * @param {number} deviceId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesSystemInfoList(deviceId: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedSystemInfoList>;

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this system info.
     * @param {PatchedSystemInfoRequest} [patchedSystemInfoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesSystemInfoPartialUpdate(deviceId: number, id: number, patchedSystemInfoRequest?: PatchedSystemInfoRequest, options?: AxiosRequestConfig): AxiosPromise<SystemInfo>;

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this system info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesSystemInfoRetrieve(deviceId: number, id: number, options?: AxiosRequestConfig): AxiosPromise<SystemInfo>;

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this system info.
     * @param {SystemInfoRequest} systemInfoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesSystemInfoUpdate(deviceId: number, id: number, systemInfoRequest: SystemInfoRequest, options?: AxiosRequestConfig): AxiosPromise<SystemInfo>;

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {number} id A unique integer value identifying this device.
     * @param {DeviceRequest} [deviceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    devicesUpdate(id: number, deviceRequest?: DeviceRequest, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} deviceId 
     * @param {PublicKeyRequest} publicKeyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    publicKeyUpdateOrCreate(deviceId: number, publicKeyRequest: PublicKeyRequest, options?: AxiosRequestConfig): AxiosPromise<PublicKey>;

    /**
     * 
     * @param {number} deviceId 
     * @param {SystemInfoRequest} systemInfoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    systemInfoUpdateOrCreate(deviceId: number, systemInfoRequest: SystemInfoRequest, options?: AxiosRequestConfig): AxiosPromise<SystemInfo>;

}

/**
 * DevicesApi - object-oriented interface
 * @export
 * @class DevicesApi
 * @extends {BaseAPI}
 */
export class DevicesApi extends BaseAPI implements DevicesApiInterface {
    /**
     * 
     * @param {number} deviceId 
     * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public cloudiotDeviceUpdateOrCreate(deviceId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).cloudiotDeviceUpdateOrCreate(deviceId, cloudiotDeviceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesCloudiotCreate(deviceId: number, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesCloudiotCreate(deviceId, cloudiotDeviceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesCloudiotList(deviceId: number, page?: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesCloudiotList(deviceId, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {string} id 
     * @param {PatchedCloudiotDeviceRequest} [patchedCloudiotDeviceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesCloudiotPartialUpdate(deviceId: number, id: string, patchedCloudiotDeviceRequest?: PatchedCloudiotDeviceRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesCloudiotPartialUpdate(deviceId, id, patchedCloudiotDeviceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesCloudiotRetrieve(deviceId: number, id: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesCloudiotRetrieve(deviceId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {string} id 
     * @param {CloudiotDeviceRequest} cloudiotDeviceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesCloudiotUpdate(deviceId: number, id: string, cloudiotDeviceRequest: CloudiotDeviceRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesCloudiotUpdate(deviceId, id, cloudiotDeviceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesConfigDownloadRetrieve(deviceId: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesConfigDownloadRetrieve(deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {DeviceRequest} deviceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesCreate(deviceRequest: DeviceRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesCreate(deviceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesJanusStreamsList(deviceId: number, page?: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesJanusStreamsList(deviceId, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this janus stream.
     * @param {PatchedJanusStreamRequest} [patchedJanusStreamRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesJanusStreamsPartialUpdate(deviceId: number, id: number, patchedJanusStreamRequest?: PatchedJanusStreamRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesJanusStreamsPartialUpdate(deviceId, id, patchedJanusStreamRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this janus stream.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesJanusStreamsRetrieve(deviceId: number, id: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesJanusStreamsRetrieve(deviceId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this janus stream.
     * @param {JanusStreamRequest} [janusStreamRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesJanusStreamsUpdate(deviceId: number, id: number, janusStreamRequest?: JanusStreamRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesJanusStreamsUpdate(deviceId, id, janusStreamRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesList(page?: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesOctoprintServersList(deviceId: number, page?: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesOctoprintServersList(deviceId, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {number} id A unique integer value identifying this device.
     * @param {PatchedDeviceRequest} [patchedDeviceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesPartialUpdate(id: number, patchedDeviceRequest?: PatchedDeviceRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesPartialUpdate(id, patchedDeviceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {PublicKeyRequest} publicKeyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesPublicKeysCreate(deviceId: number, publicKeyRequest: PublicKeyRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesPublicKeysCreate(deviceId, publicKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesPublicKeysList(deviceId: number, page?: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesPublicKeysList(deviceId, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this public key.
     * @param {PatchedPublicKeyRequest} [patchedPublicKeyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesPublicKeysPartialUpdate(deviceId: number, id: number, patchedPublicKeyRequest?: PatchedPublicKeyRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesPublicKeysPartialUpdate(deviceId, id, patchedPublicKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this public key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesPublicKeysRetrieve(deviceId: number, id: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesPublicKeysRetrieve(deviceId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this public key.
     * @param {PublicKeyRequest} publicKeyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesPublicKeysUpdate(deviceId: number, id: number, publicKeyRequest: PublicKeyRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesPublicKeysUpdate(deviceId, id, publicKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {number} id A unique integer value identifying this device.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesRetrieve(id: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} hostname 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesRetrieveHostname(hostname: string, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesRetrieveHostname(hostname, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesSettingsList(deviceId: number, page?: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesSettingsList(deviceId, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this device settings.
     * @param {PatchedDeviceSettingsRequest} [patchedDeviceSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesSettingsPartialUpdate(deviceId: number, id: number, patchedDeviceSettingsRequest?: PatchedDeviceSettingsRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesSettingsPartialUpdate(deviceId, id, patchedDeviceSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this device settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesSettingsRetrieve(deviceId: number, id: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesSettingsRetrieve(deviceId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this device settings.
     * @param {DeviceSettingsRequest} deviceSettingsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesSettingsUpdate(deviceId: number, id: number, deviceSettingsRequest: DeviceSettingsRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesSettingsUpdate(deviceId, id, deviceSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {SystemInfoRequest} systemInfoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesSystemInfoCreate(deviceId: number, systemInfoRequest: SystemInfoRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesSystemInfoCreate(deviceId, systemInfoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesSystemInfoList(deviceId: number, page?: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesSystemInfoList(deviceId, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this system info.
     * @param {PatchedSystemInfoRequest} [patchedSystemInfoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesSystemInfoPartialUpdate(deviceId: number, id: number, patchedSystemInfoRequest?: PatchedSystemInfoRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesSystemInfoPartialUpdate(deviceId, id, patchedSystemInfoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this system info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesSystemInfoRetrieve(deviceId: number, id: number, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesSystemInfoRetrieve(deviceId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this system info.
     * @param {SystemInfoRequest} systemInfoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesSystemInfoUpdate(deviceId: number, id: number, systemInfoRequest: SystemInfoRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesSystemInfoUpdate(deviceId, id, systemInfoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A device (Raspberry Pi) running Print Nanny OS
     * @param {number} id A unique integer value identifying this device.
     * @param {DeviceRequest} [deviceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesUpdate(id: number, deviceRequest?: DeviceRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesUpdate(id, deviceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {PublicKeyRequest} publicKeyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public publicKeyUpdateOrCreate(deviceId: number, publicKeyRequest: PublicKeyRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).publicKeyUpdateOrCreate(deviceId, publicKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {SystemInfoRequest} systemInfoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public systemInfoUpdateOrCreate(deviceId: number, systemInfoRequest: SystemInfoRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).systemInfoUpdateOrCreate(deviceId, systemInfoRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generic events viewset
         * @param {PolymorphicCommandCreateRequest} [polymorphicCommandCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsCreate: async (polymorphicCommandCreateRequest?: PolymorphicCommandCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/commands/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(polymorphicCommandCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generic events viewset
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/commands/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generic events viewset
         * @param {number} id A unique integer value identifying this event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commandsRetrieve', 'id', id)
            const localVarPath = `/api/commands/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generic events viewset
         * @param {PolymorphicEventCreateRequest} [polymorphicEventCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCreate: async (polymorphicEventCreateRequest?: PolymorphicEventCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/events/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(polymorphicEventCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generic events viewset
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/events/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generic events viewset
         * @param {number} id A unique integer value identifying this event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eventsRetrieve', 'id', id)
            const localVarPath = `/api/events/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventsApiAxiosParamCreator(configuration)
    return {
        /**
         * Generic events viewset
         * @param {PolymorphicCommandCreateRequest} [polymorphicCommandCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commandsCreate(polymorphicCommandCreateRequest?: PolymorphicCommandCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolymorphicCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commandsCreate(polymorphicCommandCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generic events viewset
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commandsList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPolymorphicCommandList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commandsList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generic events viewset
         * @param {number} id A unique integer value identifying this event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commandsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolymorphicCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commandsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generic events viewset
         * @param {PolymorphicEventCreateRequest} [polymorphicEventCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsCreate(polymorphicEventCreateRequest?: PolymorphicEventCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolymorphicEvent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsCreate(polymorphicEventCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generic events viewset
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPolymorphicEventList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generic events viewset
         * @param {number} id A unique integer value identifying this event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolymorphicEvent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventsApiFp(configuration)
    return {
        /**
         * Generic events viewset
         * @param {PolymorphicCommandCreateRequest} [polymorphicCommandCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsCreate(polymorphicCommandCreateRequest?: PolymorphicCommandCreateRequest, options?: any): AxiosPromise<PolymorphicCommand> {
            return localVarFp.commandsCreate(polymorphicCommandCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Generic events viewset
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsList(page?: number, options?: any): AxiosPromise<PaginatedPolymorphicCommandList> {
            return localVarFp.commandsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Generic events viewset
         * @param {number} id A unique integer value identifying this event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commandsRetrieve(id: number, options?: any): AxiosPromise<PolymorphicCommand> {
            return localVarFp.commandsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Generic events viewset
         * @param {PolymorphicEventCreateRequest} [polymorphicEventCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsCreate(polymorphicEventCreateRequest?: PolymorphicEventCreateRequest, options?: any): AxiosPromise<PolymorphicEvent> {
            return localVarFp.eventsCreate(polymorphicEventCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Generic events viewset
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsList(page?: number, options?: any): AxiosPromise<PaginatedPolymorphicEventList> {
            return localVarFp.eventsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Generic events viewset
         * @param {number} id A unique integer value identifying this event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsRetrieve(id: number, options?: any): AxiosPromise<PolymorphicEvent> {
            return localVarFp.eventsRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventsApi - interface
 * @export
 * @interface EventsApi
 */
export interface EventsApiInterface {
    /**
     * Generic events viewset
     * @param {PolymorphicCommandCreateRequest} [polymorphicCommandCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    commandsCreate(polymorphicCommandCreateRequest?: PolymorphicCommandCreateRequest, options?: AxiosRequestConfig): AxiosPromise<PolymorphicCommand>;

    /**
     * Generic events viewset
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    commandsList(page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedPolymorphicCommandList>;

    /**
     * Generic events viewset
     * @param {number} id A unique integer value identifying this event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    commandsRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<PolymorphicCommand>;

    /**
     * Generic events viewset
     * @param {PolymorphicEventCreateRequest} [polymorphicEventCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsCreate(polymorphicEventCreateRequest?: PolymorphicEventCreateRequest, options?: AxiosRequestConfig): AxiosPromise<PolymorphicEvent>;

    /**
     * Generic events viewset
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsList(page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedPolymorphicEventList>;

    /**
     * Generic events viewset
     * @param {number} id A unique integer value identifying this event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<PolymorphicEvent>;

}

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI implements EventsApiInterface {
    /**
     * Generic events viewset
     * @param {PolymorphicCommandCreateRequest} [polymorphicCommandCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public commandsCreate(polymorphicCommandCreateRequest?: PolymorphicCommandCreateRequest, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).commandsCreate(polymorphicCommandCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generic events viewset
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public commandsList(page?: number, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).commandsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generic events viewset
     * @param {number} id A unique integer value identifying this event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public commandsRetrieve(id: number, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).commandsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generic events viewset
     * @param {PolymorphicEventCreateRequest} [polymorphicEventCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsCreate(polymorphicEventCreateRequest?: PolymorphicEventCreateRequest, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsCreate(polymorphicEventCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generic events viewset
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsList(page?: number, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generic events viewset
     * @param {number} id A unique integer value identifying this event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsRetrieve(id: number, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * JanusApi - axios parameter creator
 * @export
 */
export const JanusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} deviceId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesJanusStreamsList: async (deviceId: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesJanusStreamsList', 'deviceId', deviceId)
            const localVarPath = `/api/devices/{device_id}/janus-streams/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this janus stream.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesJanusStreamsRetrieve: async (deviceId: number, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesJanusStreamsRetrieve', 'deviceId', deviceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('devicesJanusStreamsRetrieve', 'id', id)
            const localVarPath = `/api/devices/{device_id}/janus-streams/{id}/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JanusApi - functional programming interface
 * @export
 */
export const JanusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JanusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} deviceId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesJanusStreamsList(deviceId: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedJanusStreamList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesJanusStreamsList(deviceId, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this janus stream.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesJanusStreamsRetrieve(deviceId: number, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JanusStream>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesJanusStreamsRetrieve(deviceId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JanusApi - factory interface
 * @export
 */
export const JanusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JanusApiFp(configuration)
    return {
        /**
         * 
         * @param {number} deviceId 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesJanusStreamsList(deviceId: number, page?: number, options?: any): AxiosPromise<PaginatedJanusStreamList> {
            return localVarFp.devicesJanusStreamsList(deviceId, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} deviceId 
         * @param {number} id A unique integer value identifying this janus stream.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesJanusStreamsRetrieve(deviceId: number, id: number, options?: any): AxiosPromise<JanusStream> {
            return localVarFp.devicesJanusStreamsRetrieve(deviceId, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JanusApi - interface
 * @export
 * @interface JanusApi
 */
export interface JanusApiInterface {
    /**
     * 
     * @param {number} deviceId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JanusApiInterface
     */
    devicesJanusStreamsList(deviceId: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedJanusStreamList>;

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this janus stream.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JanusApiInterface
     */
    devicesJanusStreamsRetrieve(deviceId: number, id: number, options?: AxiosRequestConfig): AxiosPromise<JanusStream>;

}

/**
 * JanusApi - object-oriented interface
 * @export
 * @class JanusApi
 * @extends {BaseAPI}
 */
export class JanusApi extends BaseAPI implements JanusApiInterface {
    /**
     * 
     * @param {number} deviceId 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JanusApi
     */
    public devicesJanusStreamsList(deviceId: number, page?: number, options?: AxiosRequestConfig) {
        return JanusApiFp(this.configuration).devicesJanusStreamsList(deviceId, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} deviceId 
     * @param {number} id A unique integer value identifying this janus stream.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JanusApi
     */
    public devicesJanusStreamsRetrieve(deviceId: number, id: number, options?: AxiosRequestConfig) {
        return JanusApiFp(this.configuration).devicesJanusStreamsRetrieve(deviceId, id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OctoprintApi - axios parameter creator
 * @export
 */
export const OctoprintApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} hostname 
         * @param {string} name 
         * @param {string} octoprintVersion 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintBackupsCreate: async (hostname: string, name: string, octoprintVersion: string, file: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hostname' is not null or undefined
            assertParamExists('octoprintBackupsCreate', 'hostname', hostname)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('octoprintBackupsCreate', 'name', name)
            // verify required parameter 'octoprintVersion' is not null or undefined
            assertParamExists('octoprintBackupsCreate', 'octoprintVersion', octoprintVersion)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('octoprintBackupsCreate', 'file', file)
            const localVarPath = `/api/octoprint/backups/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (hostname !== undefined) { 
                localVarFormParams.append('hostname', hostname as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (octoprintVersion !== undefined) { 
                localVarFormParams.append('octoprint_version', octoprintVersion as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintBackupsList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/octoprint/backups/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print backup.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintBackupsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('octoprintBackupsRetrieve', 'id', id)
            const localVarPath = `/api/octoprint/backups/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {any} file 
         * @param {string} hash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintGcodeFilesCreate: async (name: string, file: any, hash: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('octoprintGcodeFilesCreate', 'name', name)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('octoprintGcodeFilesCreate', 'file', file)
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('octoprintGcodeFilesCreate', 'hash', hash)
            const localVarPath = `/api/octoprint/gcode-files/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (hash !== undefined) { 
                localVarFormParams.append('hash', hash as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintGcodeFilesList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/octoprint/gcode-files/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this gcode file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintGcodeFilesRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('octoprintGcodeFilesRetrieve', 'id', id)
            const localVarPath = `/api/octoprint/gcode-files/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintPrinterProfilesCreate: async (octoPrinterProfileRequest: OctoPrinterProfileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'octoPrinterProfileRequest' is not null or undefined
            assertParamExists('octoprintPrinterProfilesCreate', 'octoPrinterProfileRequest', octoPrinterProfileRequest)
            const localVarPath = `/api/octoprint/printer-profiles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(octoPrinterProfileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintPrinterProfilesList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/octoprint/printer-profiles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo printer profile.
         * @param {PatchedOctoPrinterProfileRequest} [patchedOctoPrinterProfileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintPrinterProfilesPartialUpdate: async (id: number, patchedOctoPrinterProfileRequest?: PatchedOctoPrinterProfileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('octoprintPrinterProfilesPartialUpdate', 'id', id)
            const localVarPath = `/api/octoprint/printer-profiles/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedOctoPrinterProfileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo printer profile.
         * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintPrinterProfilesUpdate: async (id: number, octoPrinterProfileRequest: OctoPrinterProfileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('octoprintPrinterProfilesUpdate', 'id', id)
            // verify required parameter 'octoPrinterProfileRequest' is not null or undefined
            assertParamExists('octoprintPrinterProfilesUpdate', 'octoPrinterProfileRequest', octoPrinterProfileRequest)
            const localVarPath = `/api/octoprint/printer-profiles/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(octoPrinterProfileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintProfileUpdateOrCreate: async (octoPrinterProfileRequest: OctoPrinterProfileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'octoPrinterProfileRequest' is not null or undefined
            assertParamExists('octoprintProfileUpdateOrCreate', 'octoPrinterProfileRequest', octoPrinterProfileRequest)
            const localVarPath = `/api/octoprint/printer-profiles/update-or-create/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(octoPrinterProfileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OctoPrintServerRequest} octoPrintServerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintServerUpdateOrCreate: async (octoPrintServerRequest: OctoPrintServerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'octoPrintServerRequest' is not null or undefined
            assertParamExists('octoprintServerUpdateOrCreate', 'octoPrintServerRequest', octoPrintServerRequest)
            const localVarPath = `/api/octoprint-servers/update-or-create/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(octoPrintServerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintSettingsCreate: async (octoPrintSettingsRequest: OctoPrintSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'octoPrintSettingsRequest' is not null or undefined
            assertParamExists('octoprintSettingsCreate', 'octoPrintSettingsRequest', octoPrintSettingsRequest)
            const localVarPath = `/api/octoprint/settings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(octoPrintSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintSettingsList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/octoprint/settings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print settings.
         * @param {PatchedOctoPrintSettingsRequest} [patchedOctoPrintSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintSettingsPartialUpdate: async (id: number, patchedOctoPrintSettingsRequest?: PatchedOctoPrintSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('octoprintSettingsPartialUpdate', 'id', id)
            const localVarPath = `/api/octoprint/settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedOctoPrintSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print settings.
         * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintSettingsUpdate: async (id: number, octoPrintSettingsRequest: OctoPrintSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('octoprintSettingsUpdate', 'id', id)
            // verify required parameter 'octoPrintSettingsRequest' is not null or undefined
            assertParamExists('octoprintSettingsUpdate', 'octoPrintSettingsRequest', octoPrintSettingsRequest)
            const localVarPath = `/api/octoprint/settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(octoPrintSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintSettingsUpdateOrCreate: async (octoPrintSettingsRequest: OctoPrintSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'octoPrintSettingsRequest' is not null or undefined
            assertParamExists('octoprintSettingsUpdateOrCreate', 'octoPrintSettingsRequest', octoPrintSettingsRequest)
            const localVarPath = `/api/octoprint/settings/update-or-create/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(octoPrintSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OctoprintApi - functional programming interface
 * @export
 */
export const OctoprintApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OctoprintApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} hostname 
         * @param {string} name 
         * @param {string} octoprintVersion 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintBackupsCreate(hostname: string, name: string, octoprintVersion: string, file: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintBackup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintBackupsCreate(hostname, name, octoprintVersion, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintBackupsList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedOctoPrintBackupList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintBackupsList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print backup.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintBackupsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintBackup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintBackupsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} name 
         * @param {any} file 
         * @param {string} hash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintGcodeFilesCreate(name: string, file: any, hash: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GcodeFile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintGcodeFilesCreate(name, file, hash, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintGcodeFilesList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedGcodeFileList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintGcodeFilesList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this gcode file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintGcodeFilesRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GcodeFile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintGcodeFilesRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintPrinterProfilesCreate(octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrinterProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintPrinterProfilesCreate(octoPrinterProfileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintPrinterProfilesList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedOctoPrinterProfileList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintPrinterProfilesList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo printer profile.
         * @param {PatchedOctoPrinterProfileRequest} [patchedOctoPrinterProfileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintPrinterProfilesPartialUpdate(id: number, patchedOctoPrinterProfileRequest?: PatchedOctoPrinterProfileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrinterProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintPrinterProfilesPartialUpdate(id, patchedOctoPrinterProfileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo printer profile.
         * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintPrinterProfilesUpdate(id: number, octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintPrinterProfilesUpdate(id, octoPrinterProfileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintProfileUpdateOrCreate(octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrinterProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintProfileUpdateOrCreate(octoPrinterProfileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OctoPrintServerRequest} octoPrintServerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintServerUpdateOrCreate(octoPrintServerRequest: OctoPrintServerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintServer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintServerUpdateOrCreate(octoPrintServerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintSettingsCreate(octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintSettingsCreate(octoPrintSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintSettingsList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedOctoPrintSettingsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintSettingsList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print settings.
         * @param {PatchedOctoPrintSettingsRequest} [patchedOctoPrintSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintSettingsPartialUpdate(id: number, patchedOctoPrintSettingsRequest?: PatchedOctoPrintSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintSettingsPartialUpdate(id, patchedOctoPrintSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print settings.
         * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintSettingsUpdate(id: number, octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintSettingsUpdate(id, octoPrintSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintSettingsUpdateOrCreate(octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintSettingsUpdateOrCreate(octoPrintSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OctoprintApi - factory interface
 * @export
 */
export const OctoprintApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OctoprintApiFp(configuration)
    return {
        /**
         * 
         * @param {string} hostname 
         * @param {string} name 
         * @param {string} octoprintVersion 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintBackupsCreate(hostname: string, name: string, octoprintVersion: string, file: any, options?: any): AxiosPromise<OctoPrintBackup> {
            return localVarFp.octoprintBackupsCreate(hostname, name, octoprintVersion, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintBackupsList(page?: number, options?: any): AxiosPromise<PaginatedOctoPrintBackupList> {
            return localVarFp.octoprintBackupsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print backup.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintBackupsRetrieve(id: number, options?: any): AxiosPromise<OctoPrintBackup> {
            return localVarFp.octoprintBackupsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name 
         * @param {any} file 
         * @param {string} hash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintGcodeFilesCreate(name: string, file: any, hash: string, options?: any): AxiosPromise<GcodeFile> {
            return localVarFp.octoprintGcodeFilesCreate(name, file, hash, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintGcodeFilesList(page?: number, options?: any): AxiosPromise<PaginatedGcodeFileList> {
            return localVarFp.octoprintGcodeFilesList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this gcode file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintGcodeFilesRetrieve(id: number, options?: any): AxiosPromise<GcodeFile> {
            return localVarFp.octoprintGcodeFilesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintPrinterProfilesCreate(octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: any): AxiosPromise<OctoPrinterProfile> {
            return localVarFp.octoprintPrinterProfilesCreate(octoPrinterProfileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintPrinterProfilesList(page?: number, options?: any): AxiosPromise<PaginatedOctoPrinterProfileList> {
            return localVarFp.octoprintPrinterProfilesList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo printer profile.
         * @param {PatchedOctoPrinterProfileRequest} [patchedOctoPrinterProfileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintPrinterProfilesPartialUpdate(id: number, patchedOctoPrinterProfileRequest?: PatchedOctoPrinterProfileRequest, options?: any): AxiosPromise<OctoPrinterProfile> {
            return localVarFp.octoprintPrinterProfilesPartialUpdate(id, patchedOctoPrinterProfileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo printer profile.
         * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintPrinterProfilesUpdate(id: number, octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: any): AxiosPromise<void> {
            return localVarFp.octoprintPrinterProfilesUpdate(id, octoPrinterProfileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintProfileUpdateOrCreate(octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: any): AxiosPromise<OctoPrinterProfile> {
            return localVarFp.octoprintProfileUpdateOrCreate(octoPrinterProfileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OctoPrintServerRequest} octoPrintServerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintServerUpdateOrCreate(octoPrintServerRequest: OctoPrintServerRequest, options?: any): AxiosPromise<OctoPrintServer> {
            return localVarFp.octoprintServerUpdateOrCreate(octoPrintServerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintSettingsCreate(octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: any): AxiosPromise<OctoPrintSettings> {
            return localVarFp.octoprintSettingsCreate(octoPrintSettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintSettingsList(page?: number, options?: any): AxiosPromise<PaginatedOctoPrintSettingsList> {
            return localVarFp.octoprintSettingsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print settings.
         * @param {PatchedOctoPrintSettingsRequest} [patchedOctoPrintSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintSettingsPartialUpdate(id: number, patchedOctoPrintSettingsRequest?: PatchedOctoPrintSettingsRequest, options?: any): AxiosPromise<OctoPrintSettings> {
            return localVarFp.octoprintSettingsPartialUpdate(id, patchedOctoPrintSettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print settings.
         * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintSettingsUpdate(id: number, octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.octoprintSettingsUpdate(id, octoPrintSettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintSettingsUpdateOrCreate(octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: any): AxiosPromise<OctoPrintSettings> {
            return localVarFp.octoprintSettingsUpdateOrCreate(octoPrintSettingsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OctoprintApi - interface
 * @export
 * @interface OctoprintApi
 */
export interface OctoprintApiInterface {
    /**
     * 
     * @param {string} hostname 
     * @param {string} name 
     * @param {string} octoprintVersion 
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintBackupsCreate(hostname: string, name: string, octoprintVersion: string, file: any, options?: AxiosRequestConfig): AxiosPromise<OctoPrintBackup>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintBackupsList(page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedOctoPrintBackupList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print backup.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintBackupsRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<OctoPrintBackup>;

    /**
     * 
     * @param {string} name 
     * @param {any} file 
     * @param {string} hash 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintGcodeFilesCreate(name: string, file: any, hash: string, options?: AxiosRequestConfig): AxiosPromise<GcodeFile>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintGcodeFilesList(page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedGcodeFileList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this gcode file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintGcodeFilesRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<GcodeFile>;

    /**
     * 
     * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintPrinterProfilesCreate(octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: AxiosRequestConfig): AxiosPromise<OctoPrinterProfile>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintPrinterProfilesList(page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedOctoPrinterProfileList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this octo printer profile.
     * @param {PatchedOctoPrinterProfileRequest} [patchedOctoPrinterProfileRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintPrinterProfilesPartialUpdate(id: number, patchedOctoPrinterProfileRequest?: PatchedOctoPrinterProfileRequest, options?: AxiosRequestConfig): AxiosPromise<OctoPrinterProfile>;

    /**
     * 
     * @param {number} id A unique integer value identifying this octo printer profile.
     * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintPrinterProfilesUpdate(id: number, octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintProfileUpdateOrCreate(octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: AxiosRequestConfig): AxiosPromise<OctoPrinterProfile>;

    /**
     * 
     * @param {OctoPrintServerRequest} octoPrintServerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintServerUpdateOrCreate(octoPrintServerRequest: OctoPrintServerRequest, options?: AxiosRequestConfig): AxiosPromise<OctoPrintServer>;

    /**
     * 
     * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintSettingsCreate(octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<OctoPrintSettings>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintSettingsList(page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedOctoPrintSettingsList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print settings.
     * @param {PatchedOctoPrintSettingsRequest} [patchedOctoPrintSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintSettingsPartialUpdate(id: number, patchedOctoPrintSettingsRequest?: PatchedOctoPrintSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<OctoPrintSettings>;

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print settings.
     * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintSettingsUpdate(id: number, octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApiInterface
     */
    octoprintSettingsUpdateOrCreate(octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<OctoPrintSettings>;

}

/**
 * OctoprintApi - object-oriented interface
 * @export
 * @class OctoprintApi
 * @extends {BaseAPI}
 */
export class OctoprintApi extends BaseAPI implements OctoprintApiInterface {
    /**
     * 
     * @param {string} hostname 
     * @param {string} name 
     * @param {string} octoprintVersion 
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintBackupsCreate(hostname: string, name: string, octoprintVersion: string, file: any, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintBackupsCreate(hostname, name, octoprintVersion, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintBackupsList(page?: number, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintBackupsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print backup.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintBackupsRetrieve(id: number, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintBackupsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name 
     * @param {any} file 
     * @param {string} hash 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintGcodeFilesCreate(name: string, file: any, hash: string, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintGcodeFilesCreate(name, file, hash, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintGcodeFilesList(page?: number, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintGcodeFilesList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this gcode file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintGcodeFilesRetrieve(id: number, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintGcodeFilesRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintPrinterProfilesCreate(octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintPrinterProfilesCreate(octoPrinterProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintPrinterProfilesList(page?: number, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintPrinterProfilesList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this octo printer profile.
     * @param {PatchedOctoPrinterProfileRequest} [patchedOctoPrinterProfileRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintPrinterProfilesPartialUpdate(id: number, patchedOctoPrinterProfileRequest?: PatchedOctoPrinterProfileRequest, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintPrinterProfilesPartialUpdate(id, patchedOctoPrinterProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this octo printer profile.
     * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintPrinterProfilesUpdate(id: number, octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintPrinterProfilesUpdate(id, octoPrinterProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OctoPrinterProfileRequest} octoPrinterProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintProfileUpdateOrCreate(octoPrinterProfileRequest: OctoPrinterProfileRequest, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintProfileUpdateOrCreate(octoPrinterProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OctoPrintServerRequest} octoPrintServerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintServerUpdateOrCreate(octoPrintServerRequest: OctoPrintServerRequest, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintServerUpdateOrCreate(octoPrintServerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintSettingsCreate(octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintSettingsCreate(octoPrintSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintSettingsList(page?: number, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintSettingsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print settings.
     * @param {PatchedOctoPrintSettingsRequest} [patchedOctoPrintSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintSettingsPartialUpdate(id: number, patchedOctoPrintSettingsRequest?: PatchedOctoPrintSettingsRequest, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintSettingsPartialUpdate(id, patchedOctoPrintSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print settings.
     * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintSettingsUpdate(id: number, octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintSettingsUpdate(id, octoPrintSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OctoPrintSettingsRequest} octoPrintSettingsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintApi
     */
    public octoprintSettingsUpdateOrCreate(octoPrintSettingsRequest: OctoPrintSettingsRequest, options?: AxiosRequestConfig) {
        return OctoprintApiFp(this.configuration).octoprintSettingsUpdateOrCreate(octoPrintSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OctoprintServersApi - axios parameter creator
 * @export
 */
export const OctoprintServersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {OctoPrintServerRequest} octoPrintServerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintServersCreate: async (octoPrintServerRequest: OctoPrintServerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'octoPrintServerRequest' is not null or undefined
            assertParamExists('octoprintServersCreate', 'octoPrintServerRequest', octoPrintServerRequest)
            const localVarPath = `/api/octoprint-servers/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(octoPrintServerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintServersList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/octoprint-servers/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print server.
         * @param {PatchedOctoPrintServerRequest} [patchedOctoPrintServerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintServersPartialUpdate: async (id: number, patchedOctoPrintServerRequest?: PatchedOctoPrintServerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('octoprintServersPartialUpdate', 'id', id)
            const localVarPath = `/api/octoprint-servers/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedOctoPrintServerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print server.
         * @param {OctoPrintServerRequest} octoPrintServerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintServersUpdate: async (id: number, octoPrintServerRequest: OctoPrintServerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('octoprintServersUpdate', 'id', id)
            // verify required parameter 'octoPrintServerRequest' is not null or undefined
            assertParamExists('octoprintServersUpdate', 'octoPrintServerRequest', octoPrintServerRequest)
            const localVarPath = `/api/octoprint-servers/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(octoPrintServerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OctoprintServersApi - functional programming interface
 * @export
 */
export const OctoprintServersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OctoprintServersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {OctoPrintServerRequest} octoPrintServerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintServersCreate(octoPrintServerRequest: OctoPrintServerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintServer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintServersCreate(octoPrintServerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintServersList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedOctoPrintServerList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintServersList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print server.
         * @param {PatchedOctoPrintServerRequest} [patchedOctoPrintServerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintServersPartialUpdate(id: number, patchedOctoPrintServerRequest?: PatchedOctoPrintServerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OctoPrintServer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintServersPartialUpdate(id, patchedOctoPrintServerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print server.
         * @param {OctoPrintServerRequest} octoPrintServerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async octoprintServersUpdate(id: number, octoPrintServerRequest: OctoPrintServerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.octoprintServersUpdate(id, octoPrintServerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OctoprintServersApi - factory interface
 * @export
 */
export const OctoprintServersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OctoprintServersApiFp(configuration)
    return {
        /**
         * 
         * @param {OctoPrintServerRequest} octoPrintServerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintServersCreate(octoPrintServerRequest: OctoPrintServerRequest, options?: any): AxiosPromise<OctoPrintServer> {
            return localVarFp.octoprintServersCreate(octoPrintServerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintServersList(page?: number, options?: any): AxiosPromise<PaginatedOctoPrintServerList> {
            return localVarFp.octoprintServersList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print server.
         * @param {PatchedOctoPrintServerRequest} [patchedOctoPrintServerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintServersPartialUpdate(id: number, patchedOctoPrintServerRequest?: PatchedOctoPrintServerRequest, options?: any): AxiosPromise<OctoPrintServer> {
            return localVarFp.octoprintServersPartialUpdate(id, patchedOctoPrintServerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this octo print server.
         * @param {OctoPrintServerRequest} octoPrintServerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        octoprintServersUpdate(id: number, octoPrintServerRequest: OctoPrintServerRequest, options?: any): AxiosPromise<void> {
            return localVarFp.octoprintServersUpdate(id, octoPrintServerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OctoprintServersApi - interface
 * @export
 * @interface OctoprintServersApi
 */
export interface OctoprintServersApiInterface {
    /**
     * 
     * @param {OctoPrintServerRequest} octoPrintServerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintServersApiInterface
     */
    octoprintServersCreate(octoPrintServerRequest: OctoPrintServerRequest, options?: AxiosRequestConfig): AxiosPromise<OctoPrintServer>;

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintServersApiInterface
     */
    octoprintServersList(page?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedOctoPrintServerList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print server.
     * @param {PatchedOctoPrintServerRequest} [patchedOctoPrintServerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintServersApiInterface
     */
    octoprintServersPartialUpdate(id: number, patchedOctoPrintServerRequest?: PatchedOctoPrintServerRequest, options?: AxiosRequestConfig): AxiosPromise<OctoPrintServer>;

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print server.
     * @param {OctoPrintServerRequest} octoPrintServerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintServersApiInterface
     */
    octoprintServersUpdate(id: number, octoPrintServerRequest: OctoPrintServerRequest, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * OctoprintServersApi - object-oriented interface
 * @export
 * @class OctoprintServersApi
 * @extends {BaseAPI}
 */
export class OctoprintServersApi extends BaseAPI implements OctoprintServersApiInterface {
    /**
     * 
     * @param {OctoPrintServerRequest} octoPrintServerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintServersApi
     */
    public octoprintServersCreate(octoPrintServerRequest: OctoPrintServerRequest, options?: AxiosRequestConfig) {
        return OctoprintServersApiFp(this.configuration).octoprintServersCreate(octoPrintServerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintServersApi
     */
    public octoprintServersList(page?: number, options?: AxiosRequestConfig) {
        return OctoprintServersApiFp(this.configuration).octoprintServersList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print server.
     * @param {PatchedOctoPrintServerRequest} [patchedOctoPrintServerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintServersApi
     */
    public octoprintServersPartialUpdate(id: number, patchedOctoPrintServerRequest?: PatchedOctoPrintServerRequest, options?: AxiosRequestConfig) {
        return OctoprintServersApiFp(this.configuration).octoprintServersPartialUpdate(id, patchedOctoPrintServerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this octo print server.
     * @param {OctoPrintServerRequest} octoPrintServerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OctoprintServersApi
     */
    public octoprintServersUpdate(id: number, octoPrintServerRequest: OctoPrintServerRequest, options?: AxiosRequestConfig) {
        return OctoprintServersApiFp(this.configuration).octoprintServersUpdate(id, octoPrintServerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PartnersGeeks3dApi - axios parameter creator
 * @export
 */
export const PartnersGeeks3dApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsList2: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('alertsList2', 'id', id)
            const localVarPath = `/api/partners/3d-geeks/{id}/alerts/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 3D Geeks calls this endpoint to validate token & fetch printer metadata
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataRetrieve: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('metadataRetrieve', 'id', id)
            const localVarPath = `/api/partners/3d-geeks/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PartnersGeeks3dApi - functional programming interface
 * @export
 */
export const PartnersGeeks3dApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PartnersGeeks3dApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertsList2(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Partner3DGeeksAlert>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertsList2(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 3D Geeks calls this endpoint to validate token & fetch printer metadata
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataRetrieve(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Partner3DGeeksMetadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PartnersGeeks3dApi - factory interface
 * @export
 */
export const PartnersGeeks3dApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PartnersGeeks3dApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertsList2(id: string, options?: any): AxiosPromise<Partner3DGeeksAlert> {
            return localVarFp.alertsList2(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 3D Geeks calls this endpoint to validate token & fetch printer metadata
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataRetrieve(id: string, options?: any): AxiosPromise<Partner3DGeeksMetadata> {
            return localVarFp.metadataRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PartnersGeeks3dApi - interface
 * @export
 * @interface PartnersGeeks3dApi
 */
export interface PartnersGeeks3dApiInterface {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersGeeks3dApiInterface
     */
    alertsList2(id: string, options?: AxiosRequestConfig): AxiosPromise<Partner3DGeeksAlert>;

    /**
     * 3D Geeks calls this endpoint to validate token & fetch printer metadata
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersGeeks3dApiInterface
     */
    metadataRetrieve(id: string, options?: AxiosRequestConfig): AxiosPromise<Partner3DGeeksMetadata>;

}

/**
 * PartnersGeeks3dApi - object-oriented interface
 * @export
 * @class PartnersGeeks3dApi
 * @extends {BaseAPI}
 */
export class PartnersGeeks3dApi extends BaseAPI implements PartnersGeeks3dApiInterface {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersGeeks3dApi
     */
    public alertsList2(id: string, options?: AxiosRequestConfig) {
        return PartnersGeeks3dApiFp(this.configuration).alertsList2(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 3D Geeks calls this endpoint to validate token & fetch printer metadata
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersGeeks3dApi
     */
    public metadataRetrieve(id: string, options?: AxiosRequestConfig) {
        return PartnersGeeks3dApiFp(this.configuration).metadataRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SchemaApi - axios parameter creator
 * @export
 */
export const SchemaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schemaRetrieve: async (lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/schema/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchemaApi - functional programming interface
 * @export
 */
export const SchemaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchemaApiAxiosParamCreator(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schemaRetrieve(lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schemaRetrieve(lang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SchemaApi - factory interface
 * @export
 */
export const SchemaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchemaApiFp(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schemaRetrieve(lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: any): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.schemaRetrieve(lang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchemaApi - interface
 * @export
 * @interface SchemaApi
 */
export interface SchemaApiInterface {
    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApiInterface
     */
    schemaRetrieve(lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: AxiosRequestConfig): AxiosPromise<{ [key: string]: any; }>;

}

/**
 * SchemaApi - object-oriented interface
 * @export
 * @class SchemaApi
 * @extends {BaseAPI}
 */
export class SchemaApi extends BaseAPI implements SchemaApiInterface {
    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    public schemaRetrieve(lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: AxiosRequestConfig) {
        return SchemaApiFp(this.configuration).schemaRetrieve(lang, options).then((request) => request(this.axios, this.basePath));
    }
}


