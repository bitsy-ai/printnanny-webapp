# Generated by Django 3.2.9 on 2022-01-30 20:37

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="AnsibleFactsd",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("namespace", models.CharField(default="printnanny", max_length=64)),
                ("created_dt", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_dt", models.DateTimeField(auto_now=True, db_index=True)),
            ],
        ),
        migrations.CreateModel(
            name="Device",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.DateTimeField(editable=False, null=True)),
                ("monitoring_active", models.BooleanField(default=False)),
                ("created_dt", models.DateTimeField(auto_now_add=True)),
                ("updated_dt", models.DateTimeField(auto_now=True)),
                (
                    "hostname",
                    models.CharField(
                        default="printnanny",
                        help_text="Please enter the hostname you set in the Raspberry Pi Imager's Advanced Options menu (without .local extension)",
                        max_length=255,
                    ),
                ),
                (
                    "release_channel",
                    models.CharField(
                        choices=[
                            ("stable", "Stable mainline release channel"),
                            ("nightly", "Nightly developer release channel"),
                        ],
                        default="stable",
                        help_text="WARNING: you should only use the nightly developer channel when guided by Print Nanny staff! This unstable channel is intended for QA and verifying bug fixes.",
                        max_length=8,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="devices",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.DateTimeField(editable=False, null=True)),
                ("active", models.BooleanField(default=True)),
                (
                    "task_type",
                    models.CharField(
                        choices=[
                            ("monitor_start", "Start Monitor"),
                            ("monitor_stop", "Stop Monitor"),
                            ("system_check", "System Check"),
                            ("software_update", "Software Updating"),
                        ],
                        default="software_update",
                        max_length=255,
                    ),
                ),
                ("created_dt", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tasks",
                        to="devices.device",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_dt"],
                "index_together": {("device", "task_type", "active")},
            },
        ),
        migrations.CreateModel(
            name="SystemInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.DateTimeField(editable=False, null=True)),
                ("created_dt", models.DateTimeField(auto_now_add=True)),
                ("updated_dt", models.DateTimeField(auto_now=True)),
                (
                    "machine_id",
                    models.CharField(
                        help_text="Populated from /etc/machine-id", max_length=255
                    ),
                ),
                (
                    "hardware",
                    models.CharField(
                        help_text="Populated from /proc/cpuinfo HARDWARE",
                        max_length=255,
                    ),
                ),
                (
                    "revision",
                    models.CharField(
                        help_text="Populated from /proc/cpuinfo REVISION",
                        max_length=255,
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        help_text="Populated from /proc/cpuinfo MODEL", max_length=255
                    ),
                ),
                (
                    "serial",
                    models.CharField(
                        help_text="Populated from /proc/cpuinfo SERIAL", max_length=255
                    ),
                ),
                ("cores", models.IntegerField()),
                ("ram", models.BigIntegerField()),
                (
                    "image_version",
                    models.CharField(
                        help_text="Print Nanny OS version string from /boot/image_version.txt",
                        max_length=255,
                    ),
                ),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="devices.device"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PublicKey",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.DateTimeField(editable=False, null=True)),
                ("pem", models.TextField()),
                ("cipher", models.CharField(max_length=32)),
                ("length", models.IntegerField()),
                ("fingerprint", models.CharField(max_length=255)),
                ("created_dt", models.DateTimeField(auto_now_add=True)),
                ("updated_dt", models.DateTimeField(auto_now=True)),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="public_keys",
                        to="devices.device",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PrinterController",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.DateTimeField(editable=False, null=True)),
                ("created_dt", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_dt", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "software",
                    models.CharField(
                        choices=[("OctoPrint", "OctoPrint printer controller")],
                        default="OctoPrint",
                        max_length=12,
                    ),
                ),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="printer_controllers",
                        to="devices.device",
                    ),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_devices.printercontroller_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="printer_controllers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
        ),
        migrations.CreateModel(
            name="OnboardingTask",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_dt", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "task",
                    models.CharField(
                        choices=[
                            ("link", "Link device to your account"),
                            ("test_video", "Test live video stream"),
                            ("test_mqtt", "Send a ping/pong over MQTT"),
                            ("restore_octoprint", "Restore OctoPrint from backup"),
                            ("test_octoprint", "Log into OctoPrint"),
                        ],
                        max_length=32,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("failed", "Task failed."),
                            ("pending", "Waiting for device to acknowledge task."),
                            ("started", "Task is running."),
                            ("success", "Task succeeded."),
                            ("timeout", "Task timed out. Please try again."),
                        ],
                        max_length=32,
                    ),
                ),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="onboarding_tasks",
                        to="devices.device",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="JanusAuth",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.DateTimeField(editable=False, null=True)),
                ("janus_admin_secret", models.CharField(max_length=255)),
                ("janus_token", models.CharField(max_length=255)),
                ("created_dt", models.DateTimeField(auto_now_add=True)),
                ("updated_dt", models.DateTimeField(auto_now=True)),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="janus_auths",
                        to="devices.device",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DeviceConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.DateTimeField(editable=False, null=True)),
                (
                    "release_channel",
                    models.CharField(
                        choices=[
                            ("stable", "Stable mainline release channel"),
                            ("nightly", "Nightly developer release channel"),
                        ],
                        default="stable",
                        max_length=8,
                    ),
                ),
                ("created_dt", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="devices.device"
                    ),
                ),
            ],
            options={
                "ordering": ["-created_dt"],
            },
        ),
        migrations.CreateModel(
            name="CloudiotDevice",
            fields=[
                ("deleted", models.DateTimeField(editable=False, null=True)),
                ("created_dt", models.DateTimeField(auto_now_add=True)),
                ("updated_dt", models.DateTimeField(auto_now=True)),
                ("num_id", models.BigIntegerField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255)),
                ("id", models.CharField(max_length=255)),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cloudiot_devices",
                        to="devices.device",
                    ),
                ),
                (
                    "public_key",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cloudiot_devices",
                        to="devices.publickey",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Camera",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.DateTimeField(editable=False, null=True)),
                ("created_dt", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_dt", models.DateTimeField(auto_now=True, db_index=True)),
                ("active", models.BooleanField(default=False)),
                (
                    "name",
                    models.CharField(
                        default="Raspberry Pi Cam",
                        help_text="Descriptive name to identify this camera",
                        max_length=255,
                    ),
                ),
                (
                    "camera_type",
                    models.CharField(
                        choices=[
                            ("picam", "Raspberry Pi Camera Module"),
                            ("usb", "USB Camera (coming soon)"),
                            ("ip", "Generic RTP/RTSP IP Camera (coming soon)"),
                        ],
                        default=[
                            ("picam", "Raspberry Pi Camera Module"),
                            ("usb", "USB Camera (coming soon)"),
                            ("ip", "Generic RTP/RTSP IP Camera (coming soon)"),
                        ],
                        help_text="Specify camera connection type",
                        max_length=255,
                    ),
                ),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cameras",
                        to="devices.device",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TaskStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deleted", models.DateTimeField(editable=False, null=True)),
                ("detail", models.CharField(max_length=1024, null=True)),
                ("wiki_url", models.CharField(max_length=1024, null=True)),
                ("created_dt", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("failed", "Task failed."),
                            ("pending", "Waiting for device to acknowledge task."),
                            ("started", "Task is running."),
                            ("success", "Task succeeded."),
                            ("timeout", "Task timed out. Please try again."),
                        ],
                        default="pending",
                        max_length=16,
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="status_set",
                        to="devices.task",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_dt"],
                "index_together": {("task", "status")},
            },
        ),
        migrations.AddConstraint(
            model_name="systeminfo",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("device",),
                name="unique_device_info_per_device",
            ),
        ),
        migrations.AlterIndexTogether(
            name="systeminfo",
            index_together={("device", "created_dt", "updated_dt")},
        ),
        migrations.AddConstraint(
            model_name="publickey",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("device",),
                name="unique_public_key_per_device",
            ),
        ),
        migrations.AlterIndexTogether(
            name="publickey",
            index_together={("device", "created_dt", "updated_dt")},
        ),
        migrations.AddConstraint(
            model_name="janusauth",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("device",),
                name="unique_janus_auth_per_device",
            ),
        ),
        migrations.AlterIndexTogether(
            name="janusauth",
            index_together={("device", "created_dt", "updated_dt")},
        ),
        migrations.AddConstraint(
            model_name="device",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("user", "hostname"),
                name="unique_device_hostname_per_user",
            ),
        ),
        migrations.AlterIndexTogether(
            name="device",
            index_together={("hostname", "created_dt", "updated_dt")},
        ),
        migrations.AddConstraint(
            model_name="cloudiotdevice",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("device", "public_key"),
                name="unique_cloud_iot_device_per_device",
            ),
        ),
        migrations.AlterIndexTogether(
            name="cloudiotdevice",
            index_together={("device", "public_key", "created_dt", "updated_dt")},
        ),
        migrations.AlterUniqueTogether(
            name="camera",
            unique_together={("device", "name")},
        ),
    ]
