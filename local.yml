version: '3'

volumes:
  local_postgres_data: {}
  local_postgres_data_backups: {}
  local_prometheus_data: {}
  local_file_data: {}
  local_octoprint_data: {}
services:
  octoprint:
    hostname: octoprint
    image: octoprint/octoprint
    container_name: print_nanny_webapp_octoprint
    ports:
      - "5005:5000"
    environment:
      OCTOPRINT_NANNY_GCP_PROJECT_ID: ${PROJECT}
      OCTOPRINT_NANNY_API_URL: 'http://django:8000/api/'
      OCTOPRINT_NANNY_WS_URL: 'ws://django:8000/ws/'
      OCTOPRINT_NANNY_IOT_DEVICE_REGISTRY: 'octoprint-devices'
      OCTOPRINT_NANNY_HONEYCOMB_DATASET: ${PRINT_NANNY_HONEYCOMB_DATASET}
      OCTOPRINT_NANNY_HONEYCOMB_API_KEY: ${PRINT_NANNY_HONEYCOMB_API_KEY}
      OCTOPRINT_NANNY_HONEYCOMB_DEBUG: 1
      PYTHONASYNCDEBUG: 1
    volumes:
      - local_octoprint_data:/octoprint
  django: &django
    # enables use of pdb
    hostname: django
    stdin_open: true
    tty: true
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
    image: print_nanny_webapp_local_django
    container_name: print_nanny_webapp_django
    depends_on:
      - postgres
      - prometheus
    volumes:
      - .:/app:z
      - local_file_data:/tmp:z
      - .envs/.local/key.json:/tmp/keys/keyfile.json:ro
      # prevent host machine .venv and node_modules from being included in container
      # idea from: https://stackoverflow.com/questions/29181032/add-a-volume-to-docker-but-exclude-a-sub-folder
      - /app/node_modules
      - /app/.venv
    environment:
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
    env_file:
      - ./.envs/.local/.django
      - ./.envs/.local/.postgres
      - ./.envs/.local/.secrets
    ports:
      - "8000:8000"
      - "8001:8001"
    command: /start

  postgres:
    hostname: postgres
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: print_nanny_webapp_production_postgres
    container_name: print_nanny_webapp_postgres
    volumes:
      - local_postgres_data:/var/lib/postgresql/data:z
      - local_postgres_data_backups:/backups:z
    env_file:
      - ./.envs/.local/.postgres
    ports:
      - "5432:5432"

  redis:
    hostname: redis
    build:
      context: .
      dockerfile: ./compose/local/redis/Dockerfile
    container_name: print_nanny_webapp_redis
    ports:
      - "6379:6379"

  celeryworker:
    <<: *django
    # celery uses rdb (telnet-based debugger) instead of pdb
    stdin_open: false
    tty: false
    image: print_nanny_webapp_local_celeryworker
    container_name: print_nanny_webapp_celeryworker
    depends_on:
      - django
      - redis
      - postgres
    ports: []
    command: /start-celeryworker

  celerybeat:
    <<: *django
    user: 1000:1000
    # celery uses rdb (telnet-based debugger) instead of pdb
    stdin_open: false
    tty: false
    image: print_nanny_webapp_local_celerybeat
    container_name: print_nanny_webapp_celerybeat
    depends_on:
      - celeryworker
      - django
      - redis
      - postgres
    ports: []
    command: /start-celerybeat

  flower:
    <<: *django
    hostname: flower
    user: 1000:1000

    image: print_nanny_webapp_local_flower
    container_name: print_nanny_webapp_flower
    ports:
      - "5555:5555"
    command: /start-flower
    depends_on:
      - celeryworker
      - django
      - redis
      - postgres
  prometheus:
    container_name: print_nanny_webapp_prometheus
    hostname: prometheus
    image: prom/prometheus
    ports:
      - 9000:9090

    volumes:
      - ./prometheus:/etc/prometheus
      - local_prometheus_data:/prometheus
    command: --web.enable-lifecycle  --config.file=/etc/prometheus/prometheus.yml

  events:
    container_name: print_nanny_webapp_octoprint_events
    <<: *django
    ports: []
    command:
      - python
      - print_nanny_webapp/telemetry/subscribers/octoprint_events.py
  # alerts:
  #   container_name: print_nanny_webapp_alerts
  #   <<: *django
  #   ports: []
  #   command:
  #     - python
  #     - print_nanny_webapp/alerts/subscribers/alerts.py