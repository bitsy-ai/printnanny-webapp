version: "3"

volumes:
  local_postgres14_data: {}
  local_postgres14_data_backups: {}
  local_postgres12_data: {}
  local_postgres12_data_backups: {}
  local_prometheus_data: {}
  local_file_data: {}
  local_octoprint_data: {}
  local_nsc_data: {}
  local_jetstream_data: {}
  local_windmill_worker_dependency_cache: null
services:
  janus:
    hostname: janus
    image: bitsyai/janus:1.0.4
    container_name: printnanny_janus
    ports:
      - "9188:8188"
      - "11188:7188"
      - "11088:7088"
      - "9088:8088"
      - "5000-5100:5000-5100/udp"
    env_file:
      - ./.envs/.local/.janus
    volumes:
      - ./compose/local/janus/etc:/etc/janus

  mailhog:
    image: mailhog/mailhog:v1.0.0
    container_name: printnanny_webapp_local_mailhog
    ports:
      - "8025:8025"
  django: &django
    hostname: django
    stdin_open: true
    tty: true
    # network_mode: "host"
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
    image: printnanny_webapp_local_django
    container_name: printnanny_webapp_django
    depends_on:
      - postgres12
      - prometheus
      - cloud-nats
      - janus
      - mailhog
      - redis

    volumes:
      - .:/app:z
      - local_file_data:/tmp:z
      - .envs/.local/key.json:/tmp/keys/keyfile.json:ro
      # prevent host machine .venv and node_modules from being included in container
      # idea from: https://stackoverflow.com/questions/29181032/add-a-volume-to-docker-but-exclude-a-sub-folder
      - /app/node_modules
      - /app/.venv
      - local_nsc_data:/var/lib/nats/nsc:z
    environment:
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
      NKEYS_PATH: /var/lib/nats/nsc/keys
      NSC_HOME: /var/lib/nats/nsc
      NSC_STORE: /var/lib/nats/nsc/stores
    env_file:
      - ./.envs/.local/.django
      - ./.envs/.local/.postgres
      - ./.envs/.local/.secrets
    ports:
      - "8080:8080"
      - "8001:8001"

    command:
      - /start

  celeryworker:
    <<: *django
    image: printnanny_webapp_local_celeryworker
    container_name: printnanny_webapp_local_celeryworker
    depends_on:
      - redis
      - postgres12
      - mailhog
    ports: []
    command: /start-celeryworker

  celerybeat:
    <<: *django
    image: printnanny_webapp_local_celerybeat
    container_name: printnanny_webapp_local_celerybeat
    depends_on:
      - redis
      - postgres12
      - mailhog
    ports: []
    command: /start-celerybeat

  flower:
    <<: *django
    image: printnanny_webapp_local_flower
    container_name: printnanny_webapp_local_flower
    ports:
      - "5555:5555"
    command: /start-flower

  firehose: &firehose
    hostname: firehose
    depends_on:
      - postgres12
      - cloud-nats
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
    image: printnanny_webapp_local_django
    container_name: printnanny_webapp_firehose
    environment:
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
      NKEYS_PATH: /var/lib/nats/nsc/keys
      NSC_HOME: /var/lib/nats/nsc
      NSC_STORE: /var/lib/nats/nsc/stores
      DJANGO_SETTINGS_MODULE: config.settings.local
    env_file:
      - ./.envs/.local/.django
      - ./.envs/.local/.postgres
      - ./.envs/.local/.secrets
    volumes:
      - .:/app:z
      - local_nsc_data:/var/lib/nats/nsc:z

    command:
      - python
      - -m
      - print_nanny_webapp.events.streams.firehose

  postgres12:
    hostname: postgres12
    image: postgres:12.3
    container_name: printnanny_webapp_postgres12
    volumes:
      - local_postgres12_data:/var/lib/postgresql/data:z
      - local_postgres12_data_backups:/backups:z
    env_file:
      - ./.envs/.local/.postgres
    ports:
      - "5432:5432"

  postgres14:
    hostname: postgres14
    image: postgres:14.6
    container_name: printnanny_webapp_postgres14
    volumes:
      - ./compose/local/windmill/init-db-as-superuser.sql:/docker-entrypoint-initdb.d/init-db-as-superuser.sql
      - local_postgres14_data:/var/lib/postgresql/data:z
      - local_postgres14_data_backups:/backups:z
    env_file:
      - ./.envs/.local/.windmill
    ports:
      - "5433:5432"

  redis:
    hostname: redis
    build:
      context: .
      dockerfile: ./compose/local/redis/Dockerfile
    container_name: printnanny_webapp_redis
    ports:
      - "6379:6379"
  prometheus:
    container_name: printnanny_webapp_prometheus
    hostname: prometheus
    image: prom/prometheus
    ports:
      - 9000:9090

    volumes:
      - ./prometheus:/etc/prometheus
      - local_prometheus_data:/prometheus
    command: --web.enable-lifecycle  --config.file=/etc/prometheus/prometheus.yml
  cloud-nats:
    hostname: nats
    image: nats:2.8-alpine
    container_name: printnanny_webapp_nats
    volumes:
      - .nats/:/etc/nats
      - local_jetstream_data:/data/jetstream:z
    command:
      - -c
      - /etc/nats/nats-server.conf
      - --name
      - localnats
    ports:
      - "4222:4222"
      - "8443:8443"
      - "1883:1883"

  windmill_server:
    image: ghcr.io/windmill-labs/windmill:main
    deploy:
      replicas: 1
    restart: unless-stopped
    ports:
      - 8000:8000
    env_file:
      - ./.envs/.local/.windmill
    environment:
      - RUST_LOG=debug
      ## You can set the number of workers to > 0 and not need any separate worker service
      - NUM_WORKERS=1
      - DISABLE_SERVER=false
      - METRICS_ADDR=false
    depends_on:
      - postgres14
      - django
    volumes:
      - ./compose/local/windmill/oauth.json/:/usr/src/app/oauth.json

  windmill_worker:
    image: ghcr.io/windmill-labs/windmill:main
    deploy:
      replicas: 1
    restart: unless-stopped
    env_file:
      - ./.envs/.local/.windmill
    environment:
      - RUST_LOG=debug
      - NUM_WORKERS=1
      - DISABLE_SERVER=true
      - KEEP_JOB_DIR=true
      - DENO_PATH=/usr/bin/deno
      - PYTHON_PATH=/usr/local/bin/python3
      - METRICS_ADDR=false
    depends_on:
      - postgres14
      - django

    volumes:
      - local_windmill_worker_dependency_cache:/tmp/windmill/cache
      - ./compose/local/windmill/oauth.json/:/usr/src/app/oauth.json
